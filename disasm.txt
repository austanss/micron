
bin/microCORE.kernel:     file format elf64-x86-64


Disassembly of section .text:

0000000000101000 <shutdown>:
  101000:	55                   	push   rbp
  101001:	48 89 e5             	mov    rbp,rsp
  101004:	e8 49 11 00 00       	call   102152 <terminal::instance()>
  101009:	48 89 c7             	mov    rdi,rax
  10100c:	e8 1f 05 00 00       	call   101530 <terminal::clear()>
  101011:	fa                   	cli    
  101012:	f4                   	hlt    
  101013:	90                   	nop
  101014:	5d                   	pop    rbp
  101015:	c3                   	ret    

0000000000101016 <restart_warm>:
  101016:	55                   	push   rbp
  101017:	48 89 e5             	mov    rbp,rsp
  10101a:	e9 e1 ef ef ff       	jmp    0 <stivale_hdr-0x100000>
  10101f:	90                   	nop
  101020:	5d                   	pop    rbp
  101021:	c3                   	ret    

0000000000101022 <restart_cold>:
  101022:	55                   	push   rbp
  101023:	48 89 e5             	mov    rbp,rsp
  101026:	e9 d5 ef ef ff       	jmp    0 <stivale_hdr-0x100000>
  10102b:	90                   	nop
  10102c:	5d                   	pop    rbp
  10102d:	c3                   	ret    

000000000010102e <io::outb(unsigned short, unsigned char)>:
  10102e:	55                   	push   rbp
  10102f:	48 89 e5             	mov    rbp,rsp
  101032:	48 83 ec 08          	sub    rsp,0x8
  101036:	89 f8                	mov    eax,edi
  101038:	89 f2                	mov    edx,esi
  10103a:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  10103e:	89 d0                	mov    eax,edx
  101040:	88 45 f8             	mov    BYTE PTR [rbp-0x8],al
  101043:	0f b6 45 f8          	movzx  eax,BYTE PTR [rbp-0x8]
  101047:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
  10104b:	ee                   	out    dx,al
  10104c:	90                   	nop
  10104d:	c9                   	leave  
  10104e:	c3                   	ret    

000000000010104f <io::inb(unsigned short)>:
  10104f:	55                   	push   rbp
  101050:	48 89 e5             	mov    rbp,rsp
  101053:	48 83 ec 18          	sub    rsp,0x18
  101057:	89 f8                	mov    eax,edi
  101059:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
  10105d:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
  101061:	89 c2                	mov    edx,eax
  101063:	ec                   	in     al,dx
  101064:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
  101067:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
  10106b:	c9                   	leave  
  10106c:	c3                   	ret    

000000000010106d <io::io_wait()>:
  10106d:	55                   	push   rbp
  10106e:	48 89 e5             	mov    rbp,rsp
  101071:	b8 00 00 00 00       	mov    eax,0x0
  101076:	e6 80                	out    0x80,al
  101078:	90                   	nop
  101079:	5d                   	pop    rbp
  10107a:	c3                   	ret    

000000000010107b <pic_send_eoi>:
  10107b:	55                   	push   rbp
  10107c:	48 89 e5             	mov    rbp,rsp
  10107f:	48 83 ec 08          	sub    rsp,0x8
  101083:	89 f8                	mov    eax,edi
  101085:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
  101088:	80 7d fc 07          	cmp    BYTE PTR [rbp-0x4],0x7
  10108c:	76 0f                	jbe    10109d <pic_send_eoi+0x22>
  10108e:	be 20 00 00 00       	mov    esi,0x20
  101093:	bf a0 00 00 00       	mov    edi,0xa0
  101098:	e8 91 ff ff ff       	call   10102e <io::outb(unsigned short, unsigned char)>
  10109d:	be 20 00 00 00       	mov    esi,0x20
  1010a2:	bf 20 00 00 00       	mov    edi,0x20
  1010a7:	e8 82 ff ff ff       	call   10102e <io::outb(unsigned short, unsigned char)>
  1010ac:	90                   	nop
  1010ad:	c9                   	leave  
  1010ae:	c3                   	ret    

00000000001010af <pic_remap>:
  1010af:	55                   	push   rbp
  1010b0:	48 89 e5             	mov    rbp,rsp
  1010b3:	48 83 ec 18          	sub    rsp,0x18
  1010b7:	89 fa                	mov    edx,edi
  1010b9:	89 f0                	mov    eax,esi
  1010bb:	88 55 ec             	mov    BYTE PTR [rbp-0x14],dl
  1010be:	88 45 e8             	mov    BYTE PTR [rbp-0x18],al
  1010c1:	bf 21 00 00 00       	mov    edi,0x21
  1010c6:	e8 84 ff ff ff       	call   10104f <io::inb(unsigned short)>
  1010cb:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
  1010ce:	bf a1 00 00 00       	mov    edi,0xa1
  1010d3:	e8 77 ff ff ff       	call   10104f <io::inb(unsigned short)>
  1010d8:	88 45 fe             	mov    BYTE PTR [rbp-0x2],al
  1010db:	be 11 00 00 00       	mov    esi,0x11
  1010e0:	bf 20 00 00 00       	mov    edi,0x20
  1010e5:	e8 44 ff ff ff       	call   10102e <io::outb(unsigned short, unsigned char)>
  1010ea:	e8 7e ff ff ff       	call   10106d <io::io_wait()>
  1010ef:	be 11 00 00 00       	mov    esi,0x11
  1010f4:	bf a0 00 00 00       	mov    edi,0xa0
  1010f9:	e8 30 ff ff ff       	call   10102e <io::outb(unsigned short, unsigned char)>
  1010fe:	e8 6a ff ff ff       	call   10106d <io::io_wait()>
  101103:	0f b6 45 ec          	movzx  eax,BYTE PTR [rbp-0x14]
  101107:	89 c6                	mov    esi,eax
  101109:	bf 21 00 00 00       	mov    edi,0x21
  10110e:	e8 1b ff ff ff       	call   10102e <io::outb(unsigned short, unsigned char)>
  101113:	e8 55 ff ff ff       	call   10106d <io::io_wait()>
  101118:	0f b6 45 e8          	movzx  eax,BYTE PTR [rbp-0x18]
  10111c:	89 c6                	mov    esi,eax
  10111e:	bf a1 00 00 00       	mov    edi,0xa1
  101123:	e8 06 ff ff ff       	call   10102e <io::outb(unsigned short, unsigned char)>
  101128:	e8 40 ff ff ff       	call   10106d <io::io_wait()>
  10112d:	be 04 00 00 00       	mov    esi,0x4
  101132:	bf 21 00 00 00       	mov    edi,0x21
  101137:	e8 f2 fe ff ff       	call   10102e <io::outb(unsigned short, unsigned char)>
  10113c:	e8 2c ff ff ff       	call   10106d <io::io_wait()>
  101141:	be 02 00 00 00       	mov    esi,0x2
  101146:	bf a1 00 00 00       	mov    edi,0xa1
  10114b:	e8 de fe ff ff       	call   10102e <io::outb(unsigned short, unsigned char)>
  101150:	e8 18 ff ff ff       	call   10106d <io::io_wait()>
  101155:	be 01 00 00 00       	mov    esi,0x1
  10115a:	bf 21 00 00 00       	mov    edi,0x21
  10115f:	e8 ca fe ff ff       	call   10102e <io::outb(unsigned short, unsigned char)>
  101164:	e8 04 ff ff ff       	call   10106d <io::io_wait()>
  101169:	be 01 00 00 00       	mov    esi,0x1
  10116e:	bf a1 00 00 00       	mov    edi,0xa1
  101173:	e8 b6 fe ff ff       	call   10102e <io::outb(unsigned short, unsigned char)>
  101178:	e8 f0 fe ff ff       	call   10106d <io::io_wait()>
  10117d:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
  101181:	89 c6                	mov    esi,eax
  101183:	bf 21 00 00 00       	mov    edi,0x21
  101188:	e8 a1 fe ff ff       	call   10102e <io::outb(unsigned short, unsigned char)>
  10118d:	0f b6 45 fe          	movzx  eax,BYTE PTR [rbp-0x2]
  101191:	89 c6                	mov    esi,eax
  101193:	bf a1 00 00 00       	mov    edi,0xa1
  101198:	e8 91 fe ff ff       	call   10102e <io::outb(unsigned short, unsigned char)>
  10119d:	90                   	nop
  10119e:	c9                   	leave  
  10119f:	c3                   	ret    

00000000001011a0 <irq_mask>:
  1011a0:	55                   	push   rbp
  1011a1:	48 89 e5             	mov    rbp,rsp
  1011a4:	48 83 ec 18          	sub    rsp,0x18
  1011a8:	89 f8                	mov    eax,edi
  1011aa:	88 45 ec             	mov    BYTE PTR [rbp-0x14],al
  1011ad:	80 7d ec 07          	cmp    BYTE PTR [rbp-0x14],0x7
  1011b1:	77 08                	ja     1011bb <irq_mask+0x1b>
  1011b3:	66 c7 45 fe 21 00    	mov    WORD PTR [rbp-0x2],0x21
  1011b9:	eb 0a                	jmp    1011c5 <irq_mask+0x25>
  1011bb:	66 c7 45 fe a1 00    	mov    WORD PTR [rbp-0x2],0xa1
  1011c1:	80 6d ec 08          	sub    BYTE PTR [rbp-0x14],0x8
  1011c5:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  1011c9:	89 c7                	mov    edi,eax
  1011cb:	e8 7f fe ff ff       	call   10104f <io::inb(unsigned short)>
  1011d0:	89 c6                	mov    esi,eax
  1011d2:	0f b6 45 ec          	movzx  eax,BYTE PTR [rbp-0x14]
  1011d6:	ba 01 00 00 00       	mov    edx,0x1
  1011db:	89 c1                	mov    ecx,eax
  1011dd:	d3 e2                	shl    edx,cl
  1011df:	89 d0                	mov    eax,edx
  1011e1:	09 f0                	or     eax,esi
  1011e3:	88 45 fd             	mov    BYTE PTR [rbp-0x3],al
  1011e6:	0f b6 55 fd          	movzx  edx,BYTE PTR [rbp-0x3]
  1011ea:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  1011ee:	89 d6                	mov    esi,edx
  1011f0:	89 c7                	mov    edi,eax
  1011f2:	e8 37 fe ff ff       	call   10102e <io::outb(unsigned short, unsigned char)>
  1011f7:	90                   	nop
  1011f8:	c9                   	leave  
  1011f9:	c3                   	ret    

00000000001011fa <irq_unmask>:
  1011fa:	55                   	push   rbp
  1011fb:	48 89 e5             	mov    rbp,rsp
  1011fe:	48 83 ec 18          	sub    rsp,0x18
  101202:	89 f8                	mov    eax,edi
  101204:	88 45 ec             	mov    BYTE PTR [rbp-0x14],al
  101207:	80 7d ec 07          	cmp    BYTE PTR [rbp-0x14],0x7
  10120b:	77 08                	ja     101215 <irq_unmask+0x1b>
  10120d:	66 c7 45 fe 21 00    	mov    WORD PTR [rbp-0x2],0x21
  101213:	eb 0a                	jmp    10121f <irq_unmask+0x25>
  101215:	66 c7 45 fe a1 00    	mov    WORD PTR [rbp-0x2],0xa1
  10121b:	80 6d ec 08          	sub    BYTE PTR [rbp-0x14],0x8
  10121f:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  101223:	89 c7                	mov    edi,eax
  101225:	e8 25 fe ff ff       	call   10104f <io::inb(unsigned short)>
  10122a:	89 c6                	mov    esi,eax
  10122c:	0f b6 45 ec          	movzx  eax,BYTE PTR [rbp-0x14]
  101230:	ba 01 00 00 00       	mov    edx,0x1
  101235:	89 c1                	mov    ecx,eax
  101237:	d3 e2                	shl    edx,cl
  101239:	89 d0                	mov    eax,edx
  10123b:	f7 d0                	not    eax
  10123d:	21 f0                	and    eax,esi
  10123f:	88 45 fd             	mov    BYTE PTR [rbp-0x3],al
  101242:	0f b6 55 fd          	movzx  edx,BYTE PTR [rbp-0x3]
  101246:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  10124a:	89 d6                	mov    esi,edx
  10124c:	89 c7                	mov    edi,eax
  10124e:	e8 db fd ff ff       	call   10102e <io::outb(unsigned short, unsigned char)>
  101253:	90                   	nop
  101254:	c9                   	leave  
  101255:	c3                   	ret    

0000000000101256 <configure_pic>:
  101256:	55                   	push   rbp
  101257:	48 89 e5             	mov    rbp,rsp
  10125a:	be 28 00 00 00       	mov    esi,0x28
  10125f:	bf 20 00 00 00       	mov    edi,0x20
  101264:	e8 46 fe ff ff       	call   1010af <pic_remap>
  101269:	90                   	nop
  10126a:	5d                   	pop    rbp
  10126b:	c3                   	ret    

000000000010126c <gfx::screen::plot_pixel(gfx::shapes::s_pos_point, unsigned int)>:
  10126c:	55                   	push   rbp
  10126d:	48 89 e5             	mov    rbp,rsp
  101270:	48 83 ec 10          	sub    rsp,0x10
  101274:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  101278:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
  10127b:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  101282:	0f b7 40 0a          	movzx  eax,WORD PTR [rax+0xa]
  101286:	0f b7 d0             	movzx  edx,ax
  101289:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  10128c:	0f af d0             	imul   edx,eax
  10128f:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  101292:	01 d0                	add    eax,edx
  101294:	89 c0                	mov    eax,eax
  101296:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
  10129d:	00 
  10129e:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  1012a5:	48 8b 00             	mov    rax,QWORD PTR [rax]
  1012a8:	48 01 d0             	add    rax,rdx
  1012ab:	48 89 c2             	mov    rdx,rax
  1012ae:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  1012b1:	89 02                	mov    DWORD PTR [rdx],eax
  1012b3:	90                   	nop
  1012b4:	c9                   	leave  
  1012b5:	c3                   	ret    

00000000001012b6 <gfx::screen::plot_pixel_buffer(gfx::shapes::s_pos_point, unsigned int)>:
  1012b6:	55                   	push   rbp
  1012b7:	48 89 e5             	mov    rbp,rsp
  1012ba:	48 83 ec 10          	sub    rsp,0x10
  1012be:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  1012c2:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
  1012c5:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  1012cc:	0f b7 40 0a          	movzx  eax,WORD PTR [rax+0xa]
  1012d0:	0f b7 d0             	movzx  edx,ax
  1012d3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  1012d6:	0f af d0             	imul   edx,eax
  1012d9:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  1012dc:	01 d0                	add    eax,edx
  1012de:	89 c0                	mov    eax,eax
  1012e0:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
  1012e7:	00 
  1012e8:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  1012ef:	48 8b 00             	mov    rax,QWORD PTR [rax]
  1012f2:	48 01 d0             	add    rax,rdx
  1012f5:	48 89 c2             	mov    rdx,rax
  1012f8:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  1012fb:	89 02                	mov    DWORD PTR [rdx],eax
  1012fd:	90                   	nop
  1012fe:	c9                   	leave  
  1012ff:	c3                   	ret    

0000000000101300 <util::get_bit(unsigned long, unsigned char)>:
  101300:	55                   	push   rbp
  101301:	48 89 e5             	mov    rbp,rsp
  101304:	48 83 ec 10          	sub    rsp,0x10
  101308:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  10130c:	89 f0                	mov    eax,esi
  10130e:	88 45 f4             	mov    BYTE PTR [rbp-0xc],al
  101311:	0f b6 45 f4          	movzx  eax,BYTE PTR [rbp-0xc]
  101315:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  101319:	89 c1                	mov    ecx,eax
  10131b:	48 d3 ea             	shr    rdx,cl
  10131e:	48 89 d0             	mov    rax,rdx
  101321:	83 e0 01             	and    eax,0x1
  101324:	c9                   	leave  
  101325:	c3                   	ret    

0000000000101326 <terminal::terminal()>:
  101326:	55                   	push   rbp
  101327:	48 89 e5             	mov    rbp,rsp
  10132a:	48 83 ec 20          	sub    rsp,0x20
  10132e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  101332:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  101336:	48 c7 00 40 00 00 00 	mov    QWORD PTR [rax],0x40
  10133d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  101341:	48 c7 40 08 1e 00 00 	mov    QWORD PTR [rax+0x8],0x1e
  101348:	00 
  101349:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  10134d:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
  101354:	00 
  101355:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  101359:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
  101360:	00 
  101361:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  101365:	c6 40 20 00          	mov    BYTE PTR [rax+0x20],0x0
  101369:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  101370:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  101374:	0f b7 d0             	movzx  edx,ax
  101377:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  10137e:	0f b7 40 0a          	movzx  eax,WORD PTR [rax+0xa]
  101382:	0f b7 c0             	movzx  eax,ax
  101385:	89 d6                	mov    esi,edx
  101387:	89 c7                	mov    edi,eax
  101389:	e8 01 0f 00 00       	call   10228f <gfx::shapes::dims(unsigned int, unsigned int)>
  10138e:	48 89 c7             	mov    rdi,rax
  101391:	e8 ee 0d 00 00       	call   102184 <terminal::get_optimal_size(gfx::shapes::s_dimensions)>
  101396:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  10139a:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  10139d:	89 c2                	mov    edx,eax
  10139f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  1013a3:	48 89 10             	mov    QWORD PTR [rax],rdx
  1013a6:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  1013a9:	89 c2                	mov    edx,eax
  1013ab:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  1013af:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
  1013b3:	e8 19 4e 00 00       	call   1061d1 <request_page>
  1013b8:	48 c7 c2 00 e0 10 00 	mov    rdx,0x10e000
  1013bf:	48 89 02             	mov    QWORD PTR [rdx],rax
  1013c2:	48 c7 c0 00 e0 10 00 	mov    rax,0x10e000
  1013c9:	48 8b 00             	mov    rax,QWORD PTR [rax]
  1013cc:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  1013d0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1013d4:	c6 00 54             	mov    BYTE PTR [rax],0x54
  1013d7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1013db:	48 83 c0 01          	add    rax,0x1
  1013df:	c6 00 45             	mov    BYTE PTR [rax],0x45
  1013e2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1013e6:	48 83 c0 02          	add    rax,0x2
  1013ea:	c6 00 58             	mov    BYTE PTR [rax],0x58
  1013ed:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1013f1:	48 83 c0 03          	add    rax,0x3
  1013f5:	c6 00 54             	mov    BYTE PTR [rax],0x54
  1013f8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1013fc:	48 83 c0 04          	add    rax,0x4
  101400:	c6 00 42             	mov    BYTE PTR [rax],0x42
  101403:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101407:	48 83 c0 05          	add    rax,0x5
  10140b:	c6 00 55             	mov    BYTE PTR [rax],0x55
  10140e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101412:	48 83 c0 06          	add    rax,0x6
  101416:	c6 00 46             	mov    BYTE PTR [rax],0x46
  101419:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  10141d:	48 83 c0 07          	add    rax,0x7
  101421:	c6 00 46             	mov    BYTE PTR [rax],0x46
  101424:	48 c7 c0 00 e0 10 00 	mov    rax,0x10e000
  10142b:	48 8b 00             	mov    rax,QWORD PTR [rax]
  10142e:	48 8d 50 10          	lea    rdx,[rax+0x10]
  101432:	48 c7 c0 00 e0 10 00 	mov    rax,0x10e000
  101439:	48 89 10             	mov    QWORD PTR [rax],rdx
  10143c:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
  10143f:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  101442:	0f af c2             	imul   eax,edx
  101445:	01 c0                	add    eax,eax
  101447:	89 c2                	mov    edx,eax
  101449:	48 c7 c0 00 e0 10 00 	mov    rax,0x10e000
  101450:	48 8b 00             	mov    rax,QWORD PTR [rax]
  101453:	be 00 00 00 00       	mov    esi,0x0
  101458:	48 89 c7             	mov    rdi,rax
  10145b:	e8 00 56 00 00       	call   106a60 <memory::operations::memset(void*, unsigned char, unsigned long)>
  101460:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  101467:	0f b7 40 0a          	movzx  eax,WORD PTR [rax+0xa]
  10146b:	0f b7 d0             	movzx  edx,ax
  10146e:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  101475:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  101479:	0f b7 c0             	movzx  eax,ax
  10147c:	0f af d0             	imul   edx,eax
  10147f:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  101486:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
  10148a:	66 c1 e8 03          	shr    ax,0x3
  10148e:	0f b7 c0             	movzx  eax,ax
  101491:	0f af c2             	imul   eax,edx
  101494:	48 63 d0             	movsxd rdx,eax
  101497:	48 c7 c0 a0 e0 10 00 	mov    rax,0x10e0a0
  10149e:	48 8b 00             	mov    rax,QWORD PTR [rax]
  1014a1:	be 00 00 00 00       	mov    esi,0x0
  1014a6:	48 89 c7             	mov    rdi,rax
  1014a9:	e8 b2 55 00 00       	call   106a60 <memory::operations::memset(void*, unsigned char, unsigned long)>
  1014ae:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  1014b5:	0f b7 40 0a          	movzx  eax,WORD PTR [rax+0xa]
  1014b9:	0f b7 d0             	movzx  edx,ax
  1014bc:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  1014c3:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  1014c7:	0f b7 c0             	movzx  eax,ax
  1014ca:	0f af d0             	imul   edx,eax
  1014cd:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  1014d4:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
  1014d8:	66 c1 e8 03          	shr    ax,0x3
  1014dc:	0f b7 c0             	movzx  eax,ax
  1014df:	0f af c2             	imul   eax,edx
  1014e2:	48 98                	cdqe   
  1014e4:	48 c7 c2 90 e0 10 00 	mov    rdx,0x10e090
  1014eb:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  1014ee:	48 89 d1             	mov    rcx,rdx
  1014f1:	48 89 c2             	mov    rdx,rax
  1014f4:	be 00 00 00 00       	mov    esi,0x0
  1014f9:	48 89 cf             	mov    rdi,rcx
  1014fc:	e8 5f 55 00 00       	call   106a60 <memory::operations::memset(void*, unsigned char, unsigned long)>
  101501:	48 8d 3d f8 8a 00 00 	lea    rdi,[rip+0x8af8]        # 10a000 <terminal::vga_entry(unsigned char, unsigned char)+0xfaa>
  101508:	e8 09 61 00 00       	call   107616 <serial_msg>
  10150d:	48 c7 c0 00 e0 10 00 	mov    rax,0x10e000
  101514:	48 8b 00             	mov    rax,QWORD PTR [rax]
  101517:	be 10 00 00 00       	mov    esi,0x10
  10151c:	48 89 c7             	mov    rdi,rax
  10151f:	e8 c5 56 00 00       	call   106be9 <util::itoa(long, int)>
  101524:	48 89 c7             	mov    rdi,rax
  101527:	e8 ea 60 00 00       	call   107616 <serial_msg>
  10152c:	90                   	nop
  10152d:	c9                   	leave  
  10152e:	c3                   	ret    
  10152f:	90                   	nop

0000000000101530 <terminal::clear()>:
  101530:	55                   	push   rbp
  101531:	48 89 e5             	mov    rbp,rsp
  101534:	48 83 ec 20          	sub    rsp,0x20
  101538:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  10153c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  101543:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
  101546:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  10154a:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  10154e:	48 39 c2             	cmp    rdx,rax
  101551:	73 44                	jae    101597 <terminal::clear()+0x67>
  101553:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
  10155a:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
  10155d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  101561:	48 8b 00             	mov    rax,QWORD PTR [rax]
  101564:	48 39 c2             	cmp    rdx,rax
  101567:	73 28                	jae    101591 <terminal::clear()+0x61>
  101569:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
  10156c:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
  10156f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  101573:	49 89 c8             	mov    r8,rcx
  101576:	48 89 d1             	mov    rcx,rdx
  101579:	ba 00 00 00 00       	mov    edx,0x0
  10157e:	be 20 00 00 00       	mov    esi,0x20
  101583:	48 89 c7             	mov    rdi,rax
  101586:	e8 25 00 00 00       	call   1015b0 <terminal::put_entry_at(char, unsigned char, unsigned long, unsigned long)>
  10158b:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
  10158f:	eb c9                	jmp    10155a <terminal::clear()+0x2a>
  101591:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
  101595:	eb ac                	jmp    101543 <terminal::clear()+0x13>
  101597:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  10159b:	ba 00 00 00 00       	mov    edx,0x0
  1015a0:	be 00 00 00 00       	mov    esi,0x0
  1015a5:	48 89 c7             	mov    rdi,rax
  1015a8:	e8 69 0a 00 00       	call   102016 <terminal::setCursor(unsigned long, unsigned long)>
  1015ad:	90                   	nop
  1015ae:	c9                   	leave  
  1015af:	c3                   	ret    

00000000001015b0 <terminal::put_entry_at(char, unsigned char, unsigned long, unsigned long)>:
  1015b0:	55                   	push   rbp
  1015b1:	48 89 e5             	mov    rbp,rsp
  1015b4:	53                   	push   rbx
  1015b5:	48 83 ec 28          	sub    rsp,0x28
  1015b9:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  1015bd:	89 d0                	mov    eax,edx
  1015bf:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
  1015c3:	4c 89 45 d0          	mov    QWORD PTR [rbp-0x30],r8
  1015c7:	89 f2                	mov    edx,esi
  1015c9:	88 55 e4             	mov    BYTE PTR [rbp-0x1c],dl
  1015cc:	88 45 e0             	mov    BYTE PTR [rbp-0x20],al
  1015cf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  1015d3:	48 8b 00             	mov    rax,QWORD PTR [rax]
  1015d6:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
  1015da:	77 6a                	ja     101646 <terminal::put_entry_at(char, unsigned char, unsigned long, unsigned long)+0x96>
  1015dc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  1015e0:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  1015e4:	48 39 45 d0          	cmp    QWORD PTR [rbp-0x30],rax
  1015e8:	77 5f                	ja     101649 <terminal::put_entry_at(char, unsigned char, unsigned long, unsigned long)+0x99>
  1015ea:	0f b6 55 e0          	movzx  edx,BYTE PTR [rbp-0x20]
  1015ee:	0f b6 45 e4          	movzx  eax,BYTE PTR [rbp-0x1c]
  1015f2:	0f b6 c0             	movzx  eax,al
  1015f5:	48 c7 c1 00 e0 10 00 	mov    rcx,0x10e000
  1015fc:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
  1015ff:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  101603:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  101606:	48 89 cf             	mov    rdi,rcx
  101609:	48 0f af 7d d0       	imul   rdi,QWORD PTR [rbp-0x30]
  10160e:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  101612:	48 01 f9             	add    rcx,rdi
  101615:	48 01 c9             	add    rcx,rcx
  101618:	48 8d 1c 0e          	lea    rbx,[rsi+rcx*1]
  10161c:	89 d6                	mov    esi,edx
  10161e:	89 c7                	mov    edi,eax
  101620:	e8 31 7a 00 00       	call   109056 <terminal::vga_entry(unsigned char, unsigned char)>
  101625:	66 89 03             	mov    WORD PTR [rbx],ax
  101628:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  10162c:	0f b7 d0             	movzx  edx,ax
  10162f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  101633:	0f b7 c8             	movzx  ecx,ax
  101636:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  10163a:	89 ce                	mov    esi,ecx
  10163c:	48 89 c7             	mov    rdi,rax
  10163f:	e8 ea 00 00 00       	call   10172e <terminal::render_entry_at(unsigned short, unsigned short)>
  101644:	eb 04                	jmp    10164a <terminal::put_entry_at(char, unsigned char, unsigned long, unsigned long)+0x9a>
  101646:	90                   	nop
  101647:	eb 01                	jmp    10164a <terminal::put_entry_at(char, unsigned char, unsigned long, unsigned long)+0x9a>
  101649:	90                   	nop
  10164a:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
  10164e:	c9                   	leave  
  10164f:	c3                   	ret    

0000000000101650 <terminal::convert_vga_to_pix(unsigned char)>:
  101650:	55                   	push   rbp
  101651:	48 89 e5             	mov    rbp,rsp
  101654:	48 83 ec 20          	sub    rsp,0x20
  101658:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  10165c:	89 f0                	mov    eax,esi
  10165e:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
  101661:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  101668:	0f b6 45 e4          	movzx  eax,BYTE PTR [rbp-0x1c]
  10166c:	83 f8 0f             	cmp    eax,0xf
  10166f:	0f 87 b4 00 00 00    	ja     101729 <terminal::convert_vga_to_pix(unsigned char)+0xd9>
  101675:	89 c0                	mov    eax,eax
  101677:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
  10167e:	00 
  10167f:	48 8d 05 8a 89 00 00 	lea    rax,[rip+0x898a]        # 10a010 <terminal::vga_entry(unsigned char, unsigned char)+0xfba>
  101686:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
  101689:	48 98                	cdqe   
  10168b:	48 8d 15 7e 89 00 00 	lea    rdx,[rip+0x897e]        # 10a010 <terminal::vga_entry(unsigned char, unsigned char)+0xfba>
  101692:	48 01 d0             	add    rax,rdx
  101695:	ff e0                	jmp    rax
  101697:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  10169e:	e9 86 00 00 00       	jmp    101729 <terminal::convert_vga_to_pix(unsigned char)+0xd9>
  1016a3:	c7 45 fc ff ff ff 00 	mov    DWORD PTR [rbp-0x4],0xffffff
  1016aa:	eb 7d                	jmp    101729 <terminal::convert_vga_to_pix(unsigned char)+0xd9>
  1016ac:	c7 45 fc 00 00 ff 00 	mov    DWORD PTR [rbp-0x4],0xff0000
  1016b3:	eb 74                	jmp    101729 <terminal::convert_vga_to_pix(unsigned char)+0xd9>
  1016b5:	c7 45 fc ff 22 22 00 	mov    DWORD PTR [rbp-0x4],0x2222ff
  1016bc:	eb 6b                	jmp    101729 <terminal::convert_vga_to_pix(unsigned char)+0xd9>
  1016be:	c7 45 fc 22 ff 22 00 	mov    DWORD PTR [rbp-0x4],0x22ff22
  1016c5:	eb 62                	jmp    101729 <terminal::convert_vga_to_pix(unsigned char)+0xd9>
  1016c7:	c7 45 fc ff ff 11 00 	mov    DWORD PTR [rbp-0x4],0x11ffff
  1016ce:	eb 59                	jmp    101729 <terminal::convert_vga_to_pix(unsigned char)+0xd9>
  1016d0:	c7 45 fc aa 01 ff 00 	mov    DWORD PTR [rbp-0x4],0xff01aa
  1016d7:	eb 50                	jmp    101729 <terminal::convert_vga_to_pix(unsigned char)+0xd9>
  1016d9:	c7 45 fc cd eb ff 00 	mov    DWORD PTR [rbp-0x4],0xffebcd
  1016e0:	eb 47                	jmp    101729 <terminal::convert_vga_to_pix(unsigned char)+0xd9>
  1016e2:	c7 45 fc dd dd dd 00 	mov    DWORD PTR [rbp-0x4],0xdddddd
  1016e9:	eb 3e                	jmp    101729 <terminal::convert_vga_to_pix(unsigned char)+0xd9>
  1016eb:	c7 45 fc 55 55 55 00 	mov    DWORD PTR [rbp-0x4],0x555555
  1016f2:	eb 35                	jmp    101729 <terminal::convert_vga_to_pix(unsigned char)+0xd9>
  1016f4:	c7 45 fc ff aa 01 00 	mov    DWORD PTR [rbp-0x4],0x1aaff
  1016fb:	eb 2c                	jmp    101729 <terminal::convert_vga_to_pix(unsigned char)+0xd9>
  1016fd:	c7 45 fc 01 ff 01 00 	mov    DWORD PTR [rbp-0x4],0x1ff01
  101704:	eb 23                	jmp    101729 <terminal::convert_vga_to_pix(unsigned char)+0xd9>
  101706:	c7 45 fc ff dd 01 00 	mov    DWORD PTR [rbp-0x4],0x1ddff
  10170d:	eb 1a                	jmp    101729 <terminal::convert_vga_to_pix(unsigned char)+0xd9>
  10170f:	c7 45 fc 22 22 ff 00 	mov    DWORD PTR [rbp-0x4],0xff2222
  101716:	eb 11                	jmp    101729 <terminal::convert_vga_to_pix(unsigned char)+0xd9>
  101718:	c7 45 fc 77 00 ff 00 	mov    DWORD PTR [rbp-0x4],0xff0077
  10171f:	eb 08                	jmp    101729 <terminal::convert_vga_to_pix(unsigned char)+0xd9>
  101721:	c7 45 fc 13 45 8b 00 	mov    DWORD PTR [rbp-0x4],0x8b4513
  101728:	90                   	nop
  101729:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  10172c:	c9                   	leave  
  10172d:	c3                   	ret    

000000000010172e <terminal::render_entry_at(unsigned short, unsigned short)>:
  10172e:	55                   	push   rbp
  10172f:	48 89 e5             	mov    rbp,rsp
  101732:	53                   	push   rbx
  101733:	48 81 ec 98 00 00 00 	sub    rsp,0x98
  10173a:	48 89 bd 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdi
  101741:	89 f1                	mov    ecx,esi
  101743:	89 d0                	mov    eax,edx
  101745:	89 ca                	mov    edx,ecx
  101747:	66 89 95 64 ff ff ff 	mov    WORD PTR [rbp-0x9c],dx
  10174e:	66 89 85 60 ff ff ff 	mov    WORD PTR [rbp-0xa0],ax
  101755:	48 c7 c0 00 e0 10 00 	mov    rax,0x10e000
  10175c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  10175f:	0f b7 95 60 ff ff ff 	movzx  edx,WORD PTR [rbp-0xa0]
  101766:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  10176d:	48 8b 00             	mov    rax,QWORD PTR [rax]
  101770:	48 0f af d0          	imul   rdx,rax
  101774:	0f b7 85 64 ff ff ff 	movzx  eax,WORD PTR [rbp-0x9c]
  10177b:	48 01 d0             	add    rax,rdx
  10177e:	48 01 c0             	add    rax,rax
  101781:	48 01 c8             	add    rax,rcx
  101784:	0f b7 00             	movzx  eax,WORD PTR [rax]
  101787:	66 89 45 c6          	mov    WORD PTR [rbp-0x3a],ax
  10178b:	0f b7 45 c6          	movzx  eax,WORD PTR [rbp-0x3a]
  10178f:	66 c1 e8 08          	shr    ax,0x8
  101793:	83 e0 0f             	and    eax,0xf
  101796:	88 45 c5             	mov    BYTE PTR [rbp-0x3b],al
  101799:	0f b7 45 c6          	movzx  eax,WORD PTR [rbp-0x3a]
  10179d:	66 c1 e8 0c          	shr    ax,0xc
  1017a1:	88 45 c4             	mov    BYTE PTR [rbp-0x3c],al
  1017a4:	0f b7 45 c6          	movzx  eax,WORD PTR [rbp-0x3a]
  1017a8:	88 45 c3             	mov    BYTE PTR [rbp-0x3d],al
  1017ab:	0f b6 55 c5          	movzx  edx,BYTE PTR [rbp-0x3b]
  1017af:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  1017b6:	89 d6                	mov    esi,edx
  1017b8:	48 89 c7             	mov    rdi,rax
  1017bb:	e8 90 fe ff ff       	call   101650 <terminal::convert_vga_to_pix(unsigned char)>
  1017c0:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
  1017c3:	0f b6 55 c4          	movzx  edx,BYTE PTR [rbp-0x3c]
  1017c7:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  1017ce:	89 d6                	mov    esi,edx
  1017d0:	48 89 c7             	mov    rdi,rax
  1017d3:	e8 78 fe ff ff       	call   101650 <terminal::convert_vga_to_pix(unsigned char)>
  1017d8:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
  1017db:	0f be 45 c3          	movsx  eax,BYTE PTR [rbp-0x3d]
  1017df:	89 c7                	mov    edi,eax
  1017e1:	e8 c8 0d 00 00       	call   1025ae <gfx::fonts::get_character_font(char)>
  1017e6:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  1017ea:	c6 45 ef 01          	mov    BYTE PTR [rbp-0x11],0x1
  1017ee:	80 7d ef 40          	cmp    BYTE PTR [rbp-0x11],0x40
  1017f2:	77 2f                	ja     101823 <terminal::render_entry_at(unsigned short, unsigned short)+0xf5>
  1017f4:	0f b6 55 ef          	movzx  edx,BYTE PTR [rbp-0x11]
  1017f8:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
  1017fc:	8d 58 ff             	lea    ebx,[rax-0x1]
  1017ff:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  101803:	89 d6                	mov    esi,edx
  101805:	48 89 c7             	mov    rdi,rax
  101808:	e8 f3 fa ff ff       	call   101300 <util::get_bit(unsigned long, unsigned char)>
  10180d:	48 63 d3             	movsxd rdx,ebx
  101810:	88 84 15 70 ff ff ff 	mov    BYTE PTR [rbp+rdx*1-0x90],al
  101817:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
  10181b:	83 c0 01             	add    eax,0x1
  10181e:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
  101821:	eb cb                	jmp    1017ee <terminal::render_entry_at(unsigned short, unsigned short)+0xc0>
  101823:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  10182a:	00 
  10182b:	0f b7 95 60 ff ff ff 	movzx  edx,WORD PTR [rbp-0xa0]
  101832:	89 d0                	mov    eax,edx
  101834:	c1 e0 03             	shl    eax,0x3
  101837:	01 d0                	add    eax,edx
  101839:	48 98                	cdqe   
  10183b:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  10183f:	48 83 7d e0 07       	cmp    QWORD PTR [rbp-0x20],0x7
  101844:	0f 87 a1 00 00 00    	ja     1018eb <terminal::render_entry_at(unsigned short, unsigned short)+0x1bd>
  10184a:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
  101851:	00 
  101852:	0f b7 85 64 ff ff ff 	movzx  eax,WORD PTR [rbp-0x9c]
  101859:	c1 e0 03             	shl    eax,0x3
  10185c:	48 98                	cdqe   
  10185e:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  101862:	48 83 7d d0 07       	cmp    QWORD PTR [rbp-0x30],0x7
  101867:	77 73                	ja     1018dc <terminal::render_entry_at(unsigned short, unsigned short)+0x1ae>
  101869:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  10186d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  101874:	00 
  101875:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  101879:	48 01 d0             	add    rax,rdx
  10187c:	0f b6 84 05 70 ff ff 	movzx  eax,BYTE PTR [rbp+rax*1-0x90]
  101883:	ff 
  101884:	84 c0                	test   al,al
  101886:	74 25                	je     1018ad <terminal::render_entry_at(unsigned short, unsigned short)+0x17f>
  101888:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  10188c:	89 c2                	mov    edx,eax
  10188e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  101892:	89 d6                	mov    esi,edx
  101894:	89 c7                	mov    edi,eax
  101896:	e8 d4 09 00 00       	call   10226f <gfx::shapes::pos(unsigned int, unsigned int)>
  10189b:	48 89 c2             	mov    rdx,rax
  10189e:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  1018a1:	89 c6                	mov    esi,eax
  1018a3:	48 89 d7             	mov    rdi,rdx
  1018a6:	e8 c1 f9 ff ff       	call   10126c <gfx::screen::plot_pixel(gfx::shapes::s_pos_point, unsigned int)>
  1018ab:	eb 23                	jmp    1018d0 <terminal::render_entry_at(unsigned short, unsigned short)+0x1a2>
  1018ad:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  1018b1:	89 c2                	mov    edx,eax
  1018b3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  1018b7:	89 d6                	mov    esi,edx
  1018b9:	89 c7                	mov    edi,eax
  1018bb:	e8 af 09 00 00       	call   10226f <gfx::shapes::pos(unsigned int, unsigned int)>
  1018c0:	48 89 c2             	mov    rdx,rax
  1018c3:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
  1018c6:	89 c6                	mov    esi,eax
  1018c8:	48 89 d7             	mov    rdi,rdx
  1018cb:	e8 9c f9 ff ff       	call   10126c <gfx::screen::plot_pixel(gfx::shapes::s_pos_point, unsigned int)>
  1018d0:	48 83 45 d0 01       	add    QWORD PTR [rbp-0x30],0x1
  1018d5:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
  1018da:	eb 86                	jmp    101862 <terminal::render_entry_at(unsigned short, unsigned short)+0x134>
  1018dc:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
  1018e1:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
  1018e6:	e9 54 ff ff ff       	jmp    10183f <terminal::render_entry_at(unsigned short, unsigned short)+0x111>
  1018eb:	90                   	nop
  1018ec:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
  1018f0:	c9                   	leave  
  1018f1:	c3                   	ret    

00000000001018f2 <terminal::render_entry_at_buffer(unsigned short, unsigned short)>:
  1018f2:	55                   	push   rbp
  1018f3:	48 89 e5             	mov    rbp,rsp
  1018f6:	53                   	push   rbx
  1018f7:	48 81 ec 98 00 00 00 	sub    rsp,0x98
  1018fe:	48 89 bd 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdi
  101905:	89 f1                	mov    ecx,esi
  101907:	89 d0                	mov    eax,edx
  101909:	89 ca                	mov    edx,ecx
  10190b:	66 89 95 64 ff ff ff 	mov    WORD PTR [rbp-0x9c],dx
  101912:	66 89 85 60 ff ff ff 	mov    WORD PTR [rbp-0xa0],ax
  101919:	48 c7 c0 00 e0 10 00 	mov    rax,0x10e000
  101920:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  101923:	0f b7 95 60 ff ff ff 	movzx  edx,WORD PTR [rbp-0xa0]
  10192a:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  101931:	48 8b 00             	mov    rax,QWORD PTR [rax]
  101934:	48 0f af d0          	imul   rdx,rax
  101938:	0f b7 85 64 ff ff ff 	movzx  eax,WORD PTR [rbp-0x9c]
  10193f:	48 01 d0             	add    rax,rdx
  101942:	48 01 c0             	add    rax,rax
  101945:	48 01 c8             	add    rax,rcx
  101948:	0f b7 00             	movzx  eax,WORD PTR [rax]
  10194b:	66 89 45 c6          	mov    WORD PTR [rbp-0x3a],ax
  10194f:	0f b7 45 c6          	movzx  eax,WORD PTR [rbp-0x3a]
  101953:	66 c1 e8 08          	shr    ax,0x8
  101957:	83 e0 0f             	and    eax,0xf
  10195a:	88 45 c5             	mov    BYTE PTR [rbp-0x3b],al
  10195d:	0f b7 45 c6          	movzx  eax,WORD PTR [rbp-0x3a]
  101961:	66 c1 e8 0c          	shr    ax,0xc
  101965:	88 45 c4             	mov    BYTE PTR [rbp-0x3c],al
  101968:	0f b7 45 c6          	movzx  eax,WORD PTR [rbp-0x3a]
  10196c:	88 45 c3             	mov    BYTE PTR [rbp-0x3d],al
  10196f:	0f b6 55 c5          	movzx  edx,BYTE PTR [rbp-0x3b]
  101973:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  10197a:	89 d6                	mov    esi,edx
  10197c:	48 89 c7             	mov    rdi,rax
  10197f:	e8 cc fc ff ff       	call   101650 <terminal::convert_vga_to_pix(unsigned char)>
  101984:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
  101987:	0f b6 55 c4          	movzx  edx,BYTE PTR [rbp-0x3c]
  10198b:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  101992:	89 d6                	mov    esi,edx
  101994:	48 89 c7             	mov    rdi,rax
  101997:	e8 b4 fc ff ff       	call   101650 <terminal::convert_vga_to_pix(unsigned char)>
  10199c:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
  10199f:	0f be 45 c3          	movsx  eax,BYTE PTR [rbp-0x3d]
  1019a3:	89 c7                	mov    edi,eax
  1019a5:	e8 04 0c 00 00       	call   1025ae <gfx::fonts::get_character_font(char)>
  1019aa:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  1019ae:	c6 45 ef 01          	mov    BYTE PTR [rbp-0x11],0x1
  1019b2:	80 7d ef 40          	cmp    BYTE PTR [rbp-0x11],0x40
  1019b6:	77 2f                	ja     1019e7 <terminal::render_entry_at_buffer(unsigned short, unsigned short)+0xf5>
  1019b8:	0f b6 55 ef          	movzx  edx,BYTE PTR [rbp-0x11]
  1019bc:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
  1019c0:	8d 58 ff             	lea    ebx,[rax-0x1]
  1019c3:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  1019c7:	89 d6                	mov    esi,edx
  1019c9:	48 89 c7             	mov    rdi,rax
  1019cc:	e8 2f f9 ff ff       	call   101300 <util::get_bit(unsigned long, unsigned char)>
  1019d1:	48 63 d3             	movsxd rdx,ebx
  1019d4:	88 84 15 70 ff ff ff 	mov    BYTE PTR [rbp+rdx*1-0x90],al
  1019db:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
  1019df:	83 c0 01             	add    eax,0x1
  1019e2:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
  1019e5:	eb cb                	jmp    1019b2 <terminal::render_entry_at_buffer(unsigned short, unsigned short)+0xc0>
  1019e7:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  1019ee:	00 
  1019ef:	0f b7 95 60 ff ff ff 	movzx  edx,WORD PTR [rbp-0xa0]
  1019f6:	89 d0                	mov    eax,edx
  1019f8:	c1 e0 03             	shl    eax,0x3
  1019fb:	01 d0                	add    eax,edx
  1019fd:	48 98                	cdqe   
  1019ff:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  101a03:	48 83 7d e0 07       	cmp    QWORD PTR [rbp-0x20],0x7
  101a08:	0f 87 a1 00 00 00    	ja     101aaf <terminal::render_entry_at_buffer(unsigned short, unsigned short)+0x1bd>
  101a0e:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
  101a15:	00 
  101a16:	0f b7 85 64 ff ff ff 	movzx  eax,WORD PTR [rbp-0x9c]
  101a1d:	c1 e0 03             	shl    eax,0x3
  101a20:	48 98                	cdqe   
  101a22:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  101a26:	48 83 7d d0 07       	cmp    QWORD PTR [rbp-0x30],0x7
  101a2b:	77 73                	ja     101aa0 <terminal::render_entry_at_buffer(unsigned short, unsigned short)+0x1ae>
  101a2d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  101a31:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  101a38:	00 
  101a39:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  101a3d:	48 01 d0             	add    rax,rdx
  101a40:	0f b6 84 05 70 ff ff 	movzx  eax,BYTE PTR [rbp+rax*1-0x90]
  101a47:	ff 
  101a48:	84 c0                	test   al,al
  101a4a:	74 25                	je     101a71 <terminal::render_entry_at_buffer(unsigned short, unsigned short)+0x17f>
  101a4c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  101a50:	89 c2                	mov    edx,eax
  101a52:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  101a56:	89 d6                	mov    esi,edx
  101a58:	89 c7                	mov    edi,eax
  101a5a:	e8 10 08 00 00       	call   10226f <gfx::shapes::pos(unsigned int, unsigned int)>
  101a5f:	48 89 c2             	mov    rdx,rax
  101a62:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  101a65:	89 c6                	mov    esi,eax
  101a67:	48 89 d7             	mov    rdi,rdx
  101a6a:	e8 47 f8 ff ff       	call   1012b6 <gfx::screen::plot_pixel_buffer(gfx::shapes::s_pos_point, unsigned int)>
  101a6f:	eb 23                	jmp    101a94 <terminal::render_entry_at_buffer(unsigned short, unsigned short)+0x1a2>
  101a71:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  101a75:	89 c2                	mov    edx,eax
  101a77:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  101a7b:	89 d6                	mov    esi,edx
  101a7d:	89 c7                	mov    edi,eax
  101a7f:	e8 eb 07 00 00       	call   10226f <gfx::shapes::pos(unsigned int, unsigned int)>
  101a84:	48 89 c2             	mov    rdx,rax
  101a87:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
  101a8a:	89 c6                	mov    esi,eax
  101a8c:	48 89 d7             	mov    rdi,rdx
  101a8f:	e8 22 f8 ff ff       	call   1012b6 <gfx::screen::plot_pixel_buffer(gfx::shapes::s_pos_point, unsigned int)>
  101a94:	48 83 45 d0 01       	add    QWORD PTR [rbp-0x30],0x1
  101a99:	48 83 45 c8 02       	add    QWORD PTR [rbp-0x38],0x2
  101a9e:	eb 86                	jmp    101a26 <terminal::render_entry_at_buffer(unsigned short, unsigned short)+0x134>
  101aa0:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
  101aa5:	48 83 45 d8 02       	add    QWORD PTR [rbp-0x28],0x2
  101aaa:	e9 54 ff ff ff       	jmp    101a03 <terminal::render_entry_at_buffer(unsigned short, unsigned short)+0x111>
  101aaf:	90                   	nop
  101ab0:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
  101ab4:	c9                   	leave  
  101ab5:	c3                   	ret    

0000000000101ab6 <terminal::render_buffer()>:
  101ab6:	55                   	push   rbp
  101ab7:	48 89 e5             	mov    rbp,rsp
  101aba:	48 83 ec 20          	sub    rsp,0x20
  101abe:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  101ac2:	66 c7 45 fe 00 00    	mov    WORD PTR [rbp-0x2],0x0
  101ac8:	0f b7 55 fe          	movzx  edx,WORD PTR [rbp-0x2]
  101acc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  101ad0:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  101ad4:	48 39 c2             	cmp    rdx,rax
  101ad7:	73 46                	jae    101b1f <terminal::render_buffer()+0x69>
  101ad9:	66 c7 45 fc 00 00    	mov    WORD PTR [rbp-0x4],0x0
  101adf:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
  101ae3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  101ae7:	48 8b 00             	mov    rax,QWORD PTR [rax]
  101aea:	48 39 c2             	cmp    rdx,rax
  101aed:	73 23                	jae    101b12 <terminal::render_buffer()+0x5c>
  101aef:	0f b7 55 fe          	movzx  edx,WORD PTR [rbp-0x2]
  101af3:	0f b7 4d fc          	movzx  ecx,WORD PTR [rbp-0x4]
  101af7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  101afb:	89 ce                	mov    esi,ecx
  101afd:	48 89 c7             	mov    rdi,rax
  101b00:	e8 29 fc ff ff       	call   10172e <terminal::render_entry_at(unsigned short, unsigned short)>
  101b05:	0f b7 45 fc          	movzx  eax,WORD PTR [rbp-0x4]
  101b09:	83 c0 01             	add    eax,0x1
  101b0c:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  101b10:	eb cd                	jmp    101adf <terminal::render_buffer()+0x29>
  101b12:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  101b16:	83 c0 01             	add    eax,0x1
  101b19:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  101b1d:	eb a9                	jmp    101ac8 <terminal::render_buffer()+0x12>
  101b1f:	90                   	nop
  101b20:	c9                   	leave  
  101b21:	c3                   	ret    

0000000000101b22 <terminal::shift()>:
  101b22:	55                   	push   rbp
  101b23:	48 89 e5             	mov    rbp,rsp
  101b26:	53                   	push   rbx
  101b27:	48 83 ec 38          	sub    rsp,0x38
  101b2b:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  101b2f:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  101b36:	00 
  101b37:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  101b3b:	48 8b 00             	mov    rax,QWORD PTR [rax]
  101b3e:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
  101b42:	73 2e                	jae    101b72 <terminal::shift()+0x50>
  101b44:	48 c7 c0 00 e0 10 00 	mov    rax,0x10e000
  101b4b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  101b4e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  101b52:	48 01 c0             	add    rax,rax
  101b55:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
  101b59:	be 00 00 00 00       	mov    esi,0x0
  101b5e:	bf 00 00 00 00       	mov    edi,0x0
  101b63:	e8 ee 74 00 00       	call   109056 <terminal::vga_entry(unsigned char, unsigned char)>
  101b68:	66 89 03             	mov    WORD PTR [rbx],ax
  101b6b:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
  101b70:	eb c5                	jmp    101b37 <terminal::shift()+0x15>
  101b72:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  101b79:	00 
  101b7a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  101b7e:	48 8b 00             	mov    rax,QWORD PTR [rax]
  101b81:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
  101b85:	73 62                	jae    101be9 <terminal::shift()+0xc7>
  101b87:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
  101b8e:	00 
  101b8f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  101b93:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  101b97:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  101b9b:	48 8b 00             	mov    rax,QWORD PTR [rax]
  101b9e:	48 0f af c2          	imul   rax,rdx
  101ba2:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
  101ba6:	73 3a                	jae    101be2 <terminal::shift()+0xc0>
  101ba8:	48 c7 c0 00 e0 10 00 	mov    rax,0x10e000
  101baf:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  101bb2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  101bb6:	48 83 c0 01          	add    rax,0x1
  101bba:	48 01 c0             	add    rax,rax
  101bbd:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
  101bc1:	48 c7 c0 00 e0 10 00 	mov    rax,0x10e000
  101bc8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  101bcb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  101bcf:	48 01 c0             	add    rax,rax
  101bd2:	48 01 c2             	add    rdx,rax
  101bd5:	0f b7 01             	movzx  eax,WORD PTR [rcx]
  101bd8:	66 89 02             	mov    WORD PTR [rdx],ax
  101bdb:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
  101be0:	eb ad                	jmp    101b8f <terminal::shift()+0x6d>
  101be2:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
  101be7:	eb 91                	jmp    101b7a <terminal::shift()+0x58>
  101be9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  101bed:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  101bf1:	48 8d 50 ff          	lea    rdx,[rax-0x1]
  101bf5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  101bf9:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
  101bfd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  101c01:	48 89 c7             	mov    rdi,rax
  101c04:	e8 ad fe ff ff       	call   101ab6 <terminal::render_buffer()>
  101c09:	90                   	nop
  101c0a:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
  101c0e:	c9                   	leave  
  101c0f:	c3                   	ret    

0000000000101c10 <terminal::put_char(char, unsigned char)>:
  101c10:	55                   	push   rbp
  101c11:	48 89 e5             	mov    rbp,rsp
  101c14:	48 83 ec 10          	sub    rsp,0x10
  101c18:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  101c1c:	89 f1                	mov    ecx,esi
  101c1e:	89 d0                	mov    eax,edx
  101c20:	89 ca                	mov    edx,ecx
  101c22:	88 55 f4             	mov    BYTE PTR [rbp-0xc],dl
  101c25:	88 45 f0             	mov    BYTE PTR [rbp-0x10],al
  101c28:	80 7d f4 00          	cmp    BYTE PTR [rbp-0xc],0x0
  101c2c:	0f 84 91 01 00 00    	je     101dc3 <terminal::put_char(char, unsigned char)+0x1b3>
  101c32:	80 7d f4 09          	cmp    BYTE PTR [rbp-0xc],0x9
  101c36:	75 25                	jne    101c5d <terminal::put_char(char, unsigned char)+0x4d>
  101c38:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101c3c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  101c40:	48 c1 e8 02          	shr    rax,0x2
  101c44:	48 83 c0 01          	add    rax,0x1
  101c48:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
  101c4f:	00 
  101c50:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101c54:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
  101c58:	e9 67 01 00 00       	jmp    101dc4 <terminal::put_char(char, unsigned char)+0x1b4>
  101c5d:	80 7d f4 08          	cmp    BYTE PTR [rbp-0xc],0x8
  101c61:	75 72                	jne    101cd5 <terminal::put_char(char, unsigned char)+0xc5>
  101c63:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101c67:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  101c6b:	48 85 c0             	test   rax,rax
  101c6e:	75 34                	jne    101ca4 <terminal::put_char(char, unsigned char)+0x94>
  101c70:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101c74:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  101c78:	48 85 c0             	test   rax,rax
  101c7b:	74 27                	je     101ca4 <terminal::put_char(char, unsigned char)+0x94>
  101c7d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101c81:	48 8b 00             	mov    rax,QWORD PTR [rax]
  101c84:	48 8d 50 ff          	lea    rdx,[rax-0x1]
  101c88:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101c8c:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
  101c90:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101c94:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  101c98:	48 8d 50 ff          	lea    rdx,[rax-0x1]
  101c9c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101ca0:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
  101ca4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101ca8:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
  101cac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101cb0:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
  101cb4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101cb8:	49 89 c8             	mov    r8,rcx
  101cbb:	48 89 d1             	mov    rcx,rdx
  101cbe:	ba 00 00 00 00       	mov    edx,0x0
  101cc3:	be 20 00 00 00       	mov    esi,0x20
  101cc8:	48 89 c7             	mov    rdi,rax
  101ccb:	e8 e0 f8 ff ff       	call   1015b0 <terminal::put_entry_at(char, unsigned char, unsigned long, unsigned long)>
  101cd0:	e9 ef 00 00 00       	jmp    101dc4 <terminal::put_char(char, unsigned char)+0x1b4>
  101cd5:	80 7d f4 0a          	cmp    BYTE PTR [rbp-0xc],0xa
  101cd9:	74 27                	je     101d02 <terminal::put_char(char, unsigned char)+0xf2>
  101cdb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101cdf:	48 8b 78 10          	mov    rdi,QWORD PTR [rax+0x10]
  101ce3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101ce7:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
  101ceb:	0f b6 55 f0          	movzx  edx,BYTE PTR [rbp-0x10]
  101cef:	0f be 75 f4          	movsx  esi,BYTE PTR [rbp-0xc]
  101cf3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101cf7:	49 89 f8             	mov    r8,rdi
  101cfa:	48 89 c7             	mov    rdi,rax
  101cfd:	e8 ae f8 ff ff       	call   1015b0 <terminal::put_entry_at(char, unsigned char, unsigned long, unsigned long)>
  101d02:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101d06:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  101d0a:	48 8d 50 01          	lea    rdx,[rax+0x1]
  101d0e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101d12:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
  101d16:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101d1a:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
  101d1e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101d22:	48 8b 00             	mov    rax,QWORD PTR [rax]
  101d25:	48 39 c2             	cmp    rdx,rax
  101d28:	0f 93 c0             	setae  al
  101d2b:	84 c0                	test   al,al
  101d2d:	74 46                	je     101d75 <terminal::put_char(char, unsigned char)+0x165>
  101d2f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101d33:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
  101d3a:	00 
  101d3b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101d3f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  101d43:	48 8d 50 01          	lea    rdx,[rax+0x1]
  101d47:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101d4b:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
  101d4f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101d53:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  101d57:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101d5b:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  101d5f:	48 39 c2             	cmp    rdx,rax
  101d62:	0f 93 c0             	setae  al
  101d65:	84 c0                	test   al,al
  101d67:	74 0c                	je     101d75 <terminal::put_char(char, unsigned char)+0x165>
  101d69:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101d6d:	48 89 c7             	mov    rdi,rax
  101d70:	e8 ad fd ff ff       	call   101b22 <terminal::shift()>
  101d75:	80 7d f4 0a          	cmp    BYTE PTR [rbp-0xc],0xa
  101d79:	75 49                	jne    101dc4 <terminal::put_char(char, unsigned char)+0x1b4>
  101d7b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101d7f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  101d83:	48 8d 50 01          	lea    rdx,[rax+0x1]
  101d87:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101d8b:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
  101d8f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101d93:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  101d97:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101d9b:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  101d9f:	48 39 c2             	cmp    rdx,rax
  101da2:	0f 93 c0             	setae  al
  101da5:	84 c0                	test   al,al
  101da7:	74 0c                	je     101db5 <terminal::put_char(char, unsigned char)+0x1a5>
  101da9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101dad:	48 89 c7             	mov    rdi,rax
  101db0:	e8 6d fd ff ff       	call   101b22 <terminal::shift()>
  101db5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  101db9:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
  101dc0:	00 
  101dc1:	eb 01                	jmp    101dc4 <terminal::put_char(char, unsigned char)+0x1b4>
  101dc3:	90                   	nop
  101dc4:	c9                   	leave  
  101dc5:	c3                   	ret    

0000000000101dc6 <terminal::write(char const*)>:
  101dc6:	55                   	push   rbp
  101dc7:	48 89 e5             	mov    rbp,rsp
  101dca:	48 83 ec 30          	sub    rsp,0x30
  101dce:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  101dd2:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  101dd6:	c6 45 ff 07          	mov    BYTE PTR [rbp-0x1],0x7
  101dda:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  101dde:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  101de1:	84 c0                	test   al,al
  101de3:	0f 84 2a 02 00 00    	je     102013 <terminal::write(char const*)+0x24d>
  101de9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  101ded:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  101df0:	3c 24                	cmp    al,0x24
  101df2:	0f 85 f5 01 00 00    	jne    101fed <terminal::write(char const*)+0x227>
  101df8:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
  101dff:	48 83 45 d0 01       	add    QWORD PTR [rbp-0x30],0x1
  101e04:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  101e08:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  101e0b:	3c 21                	cmp    al,0x21
  101e0d:	74 1b                	je     101e2a <terminal::write(char const*)+0x64>
  101e0f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  101e13:	0f b6 10             	movzx  edx,BYTE PTR [rax]
  101e16:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  101e19:	48 98                	cdqe   
  101e1b:	88 54 05 e9          	mov    BYTE PTR [rbp+rax*1-0x17],dl
  101e1f:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
  101e23:	48 83 45 d0 01       	add    QWORD PTR [rbp-0x30],0x1
  101e28:	eb da                	jmp    101e04 <terminal::write(char const*)+0x3e>
  101e2a:	48 83 45 d0 01       	add    QWORD PTR [rbp-0x30],0x1
  101e2f:	90                   	nop
  101e30:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  101e33:	83 c0 01             	add    eax,0x1
  101e36:	48 98                	cdqe   
  101e38:	c6 44 05 e9 00       	mov    BYTE PTR [rbp+rax*1-0x17],0x0
  101e3d:	48 8d 45 e9          	lea    rax,[rbp-0x17]
  101e41:	48 89 c6             	mov    rsi,rax
  101e44:	48 8d 3d 05 82 00 00 	lea    rdi,[rip+0x8205]        # 10a050 <terminal::vga_entry(unsigned char, unsigned char)+0xffa>
  101e4b:	e8 16 4e 00 00       	call   106c66 <util::strcomp(char const*, char const*)>
  101e50:	84 c0                	test   al,al
  101e52:	74 04                	je     101e58 <terminal::write(char const*)+0x92>
  101e54:	c6 45 ff 00          	mov    BYTE PTR [rbp-0x1],0x0
  101e58:	48 8d 45 e9          	lea    rax,[rbp-0x17]
  101e5c:	48 89 c6             	mov    rsi,rax
  101e5f:	48 8d 3d f0 81 00 00 	lea    rdi,[rip+0x81f0]        # 10a056 <terminal::vga_entry(unsigned char, unsigned char)+0x1000>
  101e66:	e8 fb 4d 00 00       	call   106c66 <util::strcomp(char const*, char const*)>
  101e6b:	84 c0                	test   al,al
  101e6d:	74 04                	je     101e73 <terminal::write(char const*)+0xad>
  101e6f:	c6 45 ff 01          	mov    BYTE PTR [rbp-0x1],0x1
  101e73:	48 8d 45 e9          	lea    rax,[rbp-0x17]
  101e77:	48 89 c6             	mov    rsi,rax
  101e7a:	48 8d 3d da 81 00 00 	lea    rdi,[rip+0x81da]        # 10a05b <terminal::vga_entry(unsigned char, unsigned char)+0x1005>
  101e81:	e8 e0 4d 00 00       	call   106c66 <util::strcomp(char const*, char const*)>
  101e86:	84 c0                	test   al,al
  101e88:	74 04                	je     101e8e <terminal::write(char const*)+0xc8>
  101e8a:	c6 45 ff 02          	mov    BYTE PTR [rbp-0x1],0x2
  101e8e:	48 8d 45 e9          	lea    rax,[rbp-0x17]
  101e92:	48 89 c6             	mov    rsi,rax
  101e95:	48 8d 3d c5 81 00 00 	lea    rdi,[rip+0x81c5]        # 10a061 <terminal::vga_entry(unsigned char, unsigned char)+0x100b>
  101e9c:	e8 c5 4d 00 00       	call   106c66 <util::strcomp(char const*, char const*)>
  101ea1:	84 c0                	test   al,al
  101ea3:	74 04                	je     101ea9 <terminal::write(char const*)+0xe3>
  101ea5:	c6 45 ff 03          	mov    BYTE PTR [rbp-0x1],0x3
  101ea9:	48 8d 45 e9          	lea    rax,[rbp-0x17]
  101ead:	48 89 c6             	mov    rsi,rax
  101eb0:	48 8d 3d af 81 00 00 	lea    rdi,[rip+0x81af]        # 10a066 <terminal::vga_entry(unsigned char, unsigned char)+0x1010>
  101eb7:	e8 aa 4d 00 00       	call   106c66 <util::strcomp(char const*, char const*)>
  101ebc:	84 c0                	test   al,al
  101ebe:	74 04                	je     101ec4 <terminal::write(char const*)+0xfe>
  101ec0:	c6 45 ff 04          	mov    BYTE PTR [rbp-0x1],0x4
  101ec4:	48 8d 45 e9          	lea    rax,[rbp-0x17]
  101ec8:	48 89 c6             	mov    rsi,rax
  101ecb:	48 8d 3d 98 81 00 00 	lea    rdi,[rip+0x8198]        # 10a06a <terminal::vga_entry(unsigned char, unsigned char)+0x1014>
  101ed2:	e8 8f 4d 00 00       	call   106c66 <util::strcomp(char const*, char const*)>
  101ed7:	84 c0                	test   al,al
  101ed9:	74 04                	je     101edf <terminal::write(char const*)+0x119>
  101edb:	c6 45 ff 05          	mov    BYTE PTR [rbp-0x1],0x5
  101edf:	48 8d 45 e9          	lea    rax,[rbp-0x17]
  101ee3:	48 89 c6             	mov    rsi,rax
  101ee6:	48 8d 3d 85 81 00 00 	lea    rdi,[rip+0x8185]        # 10a072 <terminal::vga_entry(unsigned char, unsigned char)+0x101c>
  101eed:	e8 74 4d 00 00       	call   106c66 <util::strcomp(char const*, char const*)>
  101ef2:	84 c0                	test   al,al
  101ef4:	74 04                	je     101efa <terminal::write(char const*)+0x134>
  101ef6:	c6 45 ff 06          	mov    BYTE PTR [rbp-0x1],0x6
  101efa:	48 8d 45 e9          	lea    rax,[rbp-0x17]
  101efe:	48 89 c6             	mov    rsi,rax
  101f01:	48 8d 3d 70 81 00 00 	lea    rdi,[rip+0x8170]        # 10a078 <terminal::vga_entry(unsigned char, unsigned char)+0x1022>
  101f08:	e8 59 4d 00 00       	call   106c66 <util::strcomp(char const*, char const*)>
  101f0d:	84 c0                	test   al,al
  101f0f:	74 04                	je     101f15 <terminal::write(char const*)+0x14f>
  101f11:	c6 45 ff 07          	mov    BYTE PTR [rbp-0x1],0x7
  101f15:	48 8d 45 e9          	lea    rax,[rbp-0x17]
  101f19:	48 89 c6             	mov    rsi,rax
  101f1c:	48 8d 3d 60 81 00 00 	lea    rdi,[rip+0x8160]        # 10a083 <terminal::vga_entry(unsigned char, unsigned char)+0x102d>
  101f23:	e8 3e 4d 00 00       	call   106c66 <util::strcomp(char const*, char const*)>
  101f28:	84 c0                	test   al,al
  101f2a:	74 04                	je     101f30 <terminal::write(char const*)+0x16a>
  101f2c:	c6 45 ff 08          	mov    BYTE PTR [rbp-0x1],0x8
  101f30:	48 8d 45 e9          	lea    rax,[rbp-0x17]
  101f34:	48 89 c6             	mov    rsi,rax
  101f37:	48 8d 3d 4f 81 00 00 	lea    rdi,[rip+0x814f]        # 10a08d <terminal::vga_entry(unsigned char, unsigned char)+0x1037>
  101f3e:	e8 23 4d 00 00       	call   106c66 <util::strcomp(char const*, char const*)>
  101f43:	84 c0                	test   al,al
  101f45:	74 04                	je     101f4b <terminal::write(char const*)+0x185>
  101f47:	c6 45 ff 09          	mov    BYTE PTR [rbp-0x1],0x9
  101f4b:	48 8d 45 e9          	lea    rax,[rbp-0x17]
  101f4f:	48 89 c6             	mov    rsi,rax
  101f52:	48 8d 3d 3f 81 00 00 	lea    rdi,[rip+0x813f]        # 10a098 <terminal::vga_entry(unsigned char, unsigned char)+0x1042>
  101f59:	e8 08 4d 00 00       	call   106c66 <util::strcomp(char const*, char const*)>
  101f5e:	84 c0                	test   al,al
  101f60:	74 04                	je     101f66 <terminal::write(char const*)+0x1a0>
  101f62:	c6 45 ff 0a          	mov    BYTE PTR [rbp-0x1],0xa
  101f66:	48 8d 45 e9          	lea    rax,[rbp-0x17]
  101f6a:	48 89 c6             	mov    rsi,rax
  101f6d:	48 8d 3d 30 81 00 00 	lea    rdi,[rip+0x8130]        # 10a0a4 <terminal::vga_entry(unsigned char, unsigned char)+0x104e>
  101f74:	e8 ed 4c 00 00       	call   106c66 <util::strcomp(char const*, char const*)>
  101f79:	84 c0                	test   al,al
  101f7b:	74 04                	je     101f81 <terminal::write(char const*)+0x1bb>
  101f7d:	c6 45 ff 0b          	mov    BYTE PTR [rbp-0x1],0xb
  101f81:	48 8d 45 e9          	lea    rax,[rbp-0x17]
  101f85:	48 89 c6             	mov    rsi,rax
  101f88:	48 8d 3d 20 81 00 00 	lea    rdi,[rip+0x8120]        # 10a0af <terminal::vga_entry(unsigned char, unsigned char)+0x1059>
  101f8f:	e8 d2 4c 00 00       	call   106c66 <util::strcomp(char const*, char const*)>
  101f94:	84 c0                	test   al,al
  101f96:	74 04                	je     101f9c <terminal::write(char const*)+0x1d6>
  101f98:	c6 45 ff 0c          	mov    BYTE PTR [rbp-0x1],0xc
  101f9c:	48 8d 45 e9          	lea    rax,[rbp-0x17]
  101fa0:	48 89 c6             	mov    rsi,rax
  101fa3:	48 8d 3d 0f 81 00 00 	lea    rdi,[rip+0x810f]        # 10a0b9 <terminal::vga_entry(unsigned char, unsigned char)+0x1063>
  101faa:	e8 b7 4c 00 00       	call   106c66 <util::strcomp(char const*, char const*)>
  101faf:	84 c0                	test   al,al
  101fb1:	74 04                	je     101fb7 <terminal::write(char const*)+0x1f1>
  101fb3:	c6 45 ff 0d          	mov    BYTE PTR [rbp-0x1],0xd
  101fb7:	48 8d 45 e9          	lea    rax,[rbp-0x17]
  101fbb:	48 89 c6             	mov    rsi,rax
  101fbe:	48 8d 3d 02 81 00 00 	lea    rdi,[rip+0x8102]        # 10a0c7 <terminal::vga_entry(unsigned char, unsigned char)+0x1071>
  101fc5:	e8 9c 4c 00 00       	call   106c66 <util::strcomp(char const*, char const*)>
  101fca:	84 c0                	test   al,al
  101fcc:	74 04                	je     101fd2 <terminal::write(char const*)+0x20c>
  101fce:	c6 45 ff 0e          	mov    BYTE PTR [rbp-0x1],0xe
  101fd2:	48 8d 45 e9          	lea    rax,[rbp-0x17]
  101fd6:	48 89 c6             	mov    rsi,rax
  101fd9:	48 8d 3d f3 80 00 00 	lea    rdi,[rip+0x80f3]        # 10a0d3 <terminal::vga_entry(unsigned char, unsigned char)+0x107d>
  101fe0:	e8 81 4c 00 00       	call   106c66 <util::strcomp(char const*, char const*)>
  101fe5:	84 c0                	test   al,al
  101fe7:	74 04                	je     101fed <terminal::write(char const*)+0x227>
  101fe9:	c6 45 ff 0f          	mov    BYTE PTR [rbp-0x1],0xf
  101fed:	0f b6 55 ff          	movzx  edx,BYTE PTR [rbp-0x1]
  101ff1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  101ff5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  101ff8:	0f be c8             	movsx  ecx,al
  101ffb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  101fff:	89 ce                	mov    esi,ecx
  102001:	48 89 c7             	mov    rdi,rax
  102004:	e8 07 fc ff ff       	call   101c10 <terminal::put_char(char, unsigned char)>
  102009:	48 83 45 d0 01       	add    QWORD PTR [rbp-0x30],0x1
  10200e:	e9 c7 fd ff ff       	jmp    101dda <terminal::write(char const*)+0x14>
  102013:	90                   	nop
  102014:	c9                   	leave  
  102015:	c3                   	ret    

0000000000102016 <terminal::setCursor(unsigned long, unsigned long)>:
  102016:	55                   	push   rbp
  102017:	48 89 e5             	mov    rbp,rsp
  10201a:	48 83 ec 18          	sub    rsp,0x18
  10201e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  102022:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  102026:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  10202a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  10202e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  102032:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
  102036:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  10203a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  10203e:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
  102042:	90                   	nop
  102043:	c9                   	leave  
  102044:	c3                   	ret    
  102045:	90                   	nop

0000000000102046 <terminal::write(int)::{lambda(unsigned int)#1}::operator()(unsigned int) const>:
  102046:	55                   	push   rbp
  102047:	48 89 e5             	mov    rbp,rsp
  10204a:	48 83 ec 20          	sub    rsp,0x20
  10204e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  102052:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
  102055:	48 8d 05 f5 bf 00 00 	lea    rax,[rip+0xbff5]        # 10e051 <terminal::write(int)::{lambda(unsigned int)#1}::operator()(unsigned int) const::buffer+0x31>
  10205c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  102060:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  102064:	c6 00 00             	mov    BYTE PTR [rax],0x0
  102067:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
  10206a:	89 ca                	mov    edx,ecx
  10206c:	b8 cd cc cc cc       	mov    eax,0xcccccccd
  102071:	48 0f af c2          	imul   rax,rdx
  102075:	48 c1 e8 20          	shr    rax,0x20
  102079:	89 c2                	mov    edx,eax
  10207b:	c1 ea 03             	shr    edx,0x3
  10207e:	89 d0                	mov    eax,edx
  102080:	c1 e0 02             	shl    eax,0x2
  102083:	01 d0                	add    eax,edx
  102085:	01 c0                	add    eax,eax
  102087:	29 c1                	sub    ecx,eax
  102089:	89 ca                	mov    edx,ecx
  10208b:	89 d2                	mov    edx,edx
  10208d:	48 8d 05 6c b0 00 00 	lea    rax,[rip+0xb06c]        # 10d100 <terminal::write(int)::{lambda(unsigned int)#1}::operator()(unsigned int) const::numberCharacters>
  102094:	0f b6 14 02          	movzx  edx,BYTE PTR [rdx+rax*1]
  102098:	48 83 6d f8 01       	sub    QWORD PTR [rbp-0x8],0x1
  10209d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1020a1:	88 10                	mov    BYTE PTR [rax],dl
  1020a3:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  1020a6:	89 c2                	mov    edx,eax
  1020a8:	b8 cd cc cc cc       	mov    eax,0xcccccccd
  1020ad:	48 0f af c2          	imul   rax,rdx
  1020b1:	48 c1 e8 20          	shr    rax,0x20
  1020b5:	c1 e8 03             	shr    eax,0x3
  1020b8:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
  1020bb:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
  1020bf:	74 02                	je     1020c3 <terminal::write(int)::{lambda(unsigned int)#1}::operator()(unsigned int) const+0x7d>
  1020c1:	eb a4                	jmp    102067 <terminal::write(int)::{lambda(unsigned int)#1}::operator()(unsigned int) const+0x21>
  1020c3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1020c7:	c9                   	leave  
  1020c8:	c3                   	ret    
  1020c9:	90                   	nop

00000000001020ca <terminal::write(int)>:
  1020ca:	55                   	push   rbp
  1020cb:	48 89 e5             	mov    rbp,rsp
  1020ce:	48 83 ec 20          	sub    rsp,0x20
  1020d2:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  1020d6:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
  1020d9:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
  1020dd:	79 13                	jns    1020f2 <terminal::write(int)+0x28>
  1020df:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  1020e3:	48 8d 35 ef 7f 00 00 	lea    rsi,[rip+0x7fef]        # 10a0d9 <terminal::vga_entry(unsigned char, unsigned char)+0x1083>
  1020ea:	48 89 c7             	mov    rdi,rax
  1020ed:	e8 d4 fc ff ff       	call   101dc6 <terminal::write(char const*)>
  1020f2:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
  1020f5:	48 8d 45 ff          	lea    rax,[rbp-0x1]
  1020f9:	89 d6                	mov    esi,edx
  1020fb:	48 89 c7             	mov    rdi,rax
  1020fe:	e8 43 ff ff ff       	call   102046 <terminal::write(int)::{lambda(unsigned int)#1}::operator()(unsigned int) const>
  102103:	48 89 c2             	mov    rdx,rax
  102106:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  10210a:	48 89 d6             	mov    rsi,rdx
  10210d:	48 89 c7             	mov    rdi,rax
  102110:	e8 b1 fc ff ff       	call   101dc6 <terminal::write(char const*)>
  102115:	90                   	nop
  102116:	c9                   	leave  
  102117:	c3                   	ret    

0000000000102118 <terminal::println(char const*)>:
  102118:	55                   	push   rbp
  102119:	48 89 e5             	mov    rbp,rsp
  10211c:	48 83 ec 10          	sub    rsp,0x10
  102120:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  102124:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  102128:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  10212c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  102130:	48 89 d6             	mov    rsi,rdx
  102133:	48 89 c7             	mov    rdi,rax
  102136:	e8 8b fc ff ff       	call   101dc6 <terminal::write(char const*)>
  10213b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  10213f:	48 8d 35 95 7f 00 00 	lea    rsi,[rip+0x7f95]        # 10a0db <terminal::vga_entry(unsigned char, unsigned char)+0x1085>
  102146:	48 89 c7             	mov    rdi,rax
  102149:	e8 78 fc ff ff       	call   101dc6 <terminal::write(char const*)>
  10214e:	90                   	nop
  10214f:	c9                   	leave  
  102150:	c3                   	ret    
  102151:	90                   	nop

0000000000102152 <terminal::instance()>:
  102152:	55                   	push   rbp
  102153:	48 89 e5             	mov    rbp,rsp
  102156:	48 8d 05 2b bf 00 00 	lea    rax,[rip+0xbf2b]        # 10e088 <guard variable for terminal::instance()::instance>
  10215d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  102160:	84 c0                	test   al,al
  102162:	75 16                	jne    10217a <terminal::instance()+0x28>
  102164:	48 8d 3d f5 be 00 00 	lea    rdi,[rip+0xbef5]        # 10e060 <terminal::instance()::instance>
  10216b:	e8 b6 f1 ff ff       	call   101326 <terminal::terminal()>
  102170:	48 8d 05 11 bf 00 00 	lea    rax,[rip+0xbf11]        # 10e088 <guard variable for terminal::instance()::instance>
  102177:	c6 00 01             	mov    BYTE PTR [rax],0x1
  10217a:	48 8d 05 df be 00 00 	lea    rax,[rip+0xbedf]        # 10e060 <terminal::instance()::instance>
  102181:	5d                   	pop    rbp
  102182:	c3                   	ret    
  102183:	90                   	nop

0000000000102184 <terminal::get_optimal_size(gfx::shapes::s_dimensions)>:
  102184:	55                   	push   rbp
  102185:	48 89 e5             	mov    rbp,rsp
  102188:	48 83 ec 18          	sub    rsp,0x18
  10218c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  102190:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  102193:	c1 e8 03             	shr    eax,0x3
  102196:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
  102199:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  10219c:	89 c0                	mov    eax,eax
  10219e:	48 69 c0 39 8e e3 38 	imul   rax,rax,0x38e38e39
  1021a5:	48 c1 e8 20          	shr    rax,0x20
  1021a9:	d1 e8                	shr    eax,1
  1021ab:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
  1021ae:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1021b2:	c9                   	leave  
  1021b3:	c3                   	ret    

00000000001021b4 <puts>:
  1021b4:	55                   	push   rbp
  1021b5:	48 89 e5             	mov    rbp,rsp
  1021b8:	48 83 ec 10          	sub    rsp,0x10
  1021bc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  1021c0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1021c4:	48 89 c6             	mov    rsi,rax
  1021c7:	48 8d 3d 0f 7f 00 00 	lea    rdi,[rip+0x7f0f]        # 10a0dd <terminal::vga_entry(unsigned char, unsigned char)+0x1087>
  1021ce:	b8 00 00 00 00       	mov    eax,0x0
  1021d3:	e8 1e 24 00 00       	call   1045f6 <printf>
  1021d8:	90                   	nop
  1021d9:	c9                   	leave  
  1021da:	c3                   	ret    

00000000001021db <gfx::screen::plot_pixel(gfx::shapes::s_pos_point, unsigned int)>:
  1021db:	55                   	push   rbp
  1021dc:	48 89 e5             	mov    rbp,rsp
  1021df:	48 83 ec 10          	sub    rsp,0x10
  1021e3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  1021e7:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
  1021ea:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  1021f1:	0f b7 40 0a          	movzx  eax,WORD PTR [rax+0xa]
  1021f5:	0f b7 d0             	movzx  edx,ax
  1021f8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  1021fb:	0f af d0             	imul   edx,eax
  1021fe:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  102201:	01 d0                	add    eax,edx
  102203:	89 c0                	mov    eax,eax
  102205:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
  10220c:	00 
  10220d:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  102214:	48 8b 00             	mov    rax,QWORD PTR [rax]
  102217:	48 01 d0             	add    rax,rdx
  10221a:	48 89 c2             	mov    rdx,rax
  10221d:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  102220:	89 02                	mov    DWORD PTR [rdx],eax
  102222:	90                   	nop
  102223:	c9                   	leave  
  102224:	c3                   	ret    

0000000000102225 <gfx::screen::plot_pixel_buffer(gfx::shapes::s_pos_point, unsigned int)>:
  102225:	55                   	push   rbp
  102226:	48 89 e5             	mov    rbp,rsp
  102229:	48 83 ec 10          	sub    rsp,0x10
  10222d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  102231:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
  102234:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  10223b:	0f b7 40 0a          	movzx  eax,WORD PTR [rax+0xa]
  10223f:	0f b7 d0             	movzx  edx,ax
  102242:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  102245:	0f af d0             	imul   edx,eax
  102248:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  10224b:	01 d0                	add    eax,edx
  10224d:	89 c0                	mov    eax,eax
  10224f:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
  102256:	00 
  102257:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  10225e:	48 8b 00             	mov    rax,QWORD PTR [rax]
  102261:	48 01 d0             	add    rax,rdx
  102264:	48 89 c2             	mov    rdx,rax
  102267:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  10226a:	89 02                	mov    DWORD PTR [rdx],eax
  10226c:	90                   	nop
  10226d:	c9                   	leave  
  10226e:	c3                   	ret    

000000000010226f <gfx::shapes::pos(unsigned int, unsigned int)>:
  10226f:	55                   	push   rbp
  102270:	48 89 e5             	mov    rbp,rsp
  102273:	48 83 ec 18          	sub    rsp,0x18
  102277:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
  10227a:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
  10227d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  102280:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
  102283:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  102286:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
  102289:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  10228d:	c9                   	leave  
  10228e:	c3                   	ret    

000000000010228f <gfx::shapes::dims(unsigned int, unsigned int)>:
  10228f:	55                   	push   rbp
  102290:	48 89 e5             	mov    rbp,rsp
  102293:	48 83 ec 18          	sub    rsp,0x18
  102297:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
  10229a:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
  10229d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  1022a0:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
  1022a3:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  1022a6:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
  1022a9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1022ad:	c9                   	leave  
  1022ae:	c3                   	ret    

00000000001022af <gfx::shapes::rect(gfx::shapes::s_pos_point, gfx::shapes::s_dimensions, unsigned int)>:
  1022af:	55                   	push   rbp
  1022b0:	48 89 e5             	mov    rbp,rsp
  1022b3:	53                   	push   rbx
  1022b4:	48 83 ec 48          	sub    rsp,0x48
  1022b8:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  1022bc:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  1022c0:	89 55 bc             	mov    DWORD PTR [rbp-0x44],edx
  1022c3:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
  1022c6:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
  1022c9:	89 d6                	mov    esi,edx
  1022cb:	89 c7                	mov    edi,eax
  1022cd:	e8 9d ff ff ff       	call   10226f <gfx::shapes::pos(unsigned int, unsigned int)>
  1022d2:	48 89 c3             	mov    rbx,rax
  1022d5:	be 00 00 00 00       	mov    esi,0x0
  1022da:	bf 00 00 00 00       	mov    edi,0x0
  1022df:	e8 8b ff ff ff       	call   10226f <gfx::shapes::pos(unsigned int, unsigned int)>
  1022e4:	48 89 de             	mov    rsi,rbx
  1022e7:	48 89 c7             	mov    rdi,rax
  1022ea:	e8 8e 02 00 00       	call   10257d <gfx::shapes::rect_center(gfx::shapes::s_pos_point, gfx::shapes::s_pos_point)>
  1022ef:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  1022f3:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  1022f6:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
  1022f9:	29 d0                	sub    eax,edx
  1022fb:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
  1022fe:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  102301:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  102304:	29 d0                	sub    eax,edx
  102306:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
  102309:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
  10230c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  10230f:	01 c2                	add    edx,eax
  102311:	8b 4d c8             	mov    ecx,DWORD PTR [rbp-0x38]
  102314:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  102317:	01 c8                	add    eax,ecx
  102319:	89 d6                	mov    esi,edx
  10231b:	89 c7                	mov    edi,eax
  10231d:	e8 4d ff ff ff       	call   10226f <gfx::shapes::pos(unsigned int, unsigned int)>
  102322:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  102326:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
  102329:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
  10232c:	d1 ea                	shr    edx,1
  10232e:	29 d0                	sub    eax,edx
  102330:	89 c0                	mov    eax,eax
  102332:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  102336:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
  102339:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
  10233c:	d1 e8                	shr    eax,1
  10233e:	01 d0                	add    eax,edx
  102340:	89 c0                	mov    eax,eax
  102342:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
  102346:	77 7e                	ja     1023c6 <gfx::shapes::rect(gfx::shapes::s_pos_point, gfx::shapes::s_dimensions, unsigned int)+0x117>
  102348:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  10234f:	0f b7 40 0a          	movzx  eax,WORD PTR [rax+0xa]
  102353:	0f b7 c0             	movzx  eax,ax
  102356:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
  10235a:	73 6a                	jae    1023c6 <gfx::shapes::rect(gfx::shapes::s_pos_point, gfx::shapes::s_dimensions, unsigned int)+0x117>
  10235c:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  10235f:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
  102362:	d1 ea                	shr    edx,1
  102364:	29 d0                	sub    eax,edx
  102366:	89 c0                	mov    eax,eax
  102368:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  10236c:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
  10236f:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  102372:	d1 e8                	shr    eax,1
  102374:	01 d0                	add    eax,edx
  102376:	89 c0                	mov    eax,eax
  102378:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
  10237c:	77 3e                	ja     1023bc <gfx::shapes::rect(gfx::shapes::s_pos_point, gfx::shapes::s_dimensions, unsigned int)+0x10d>
  10237e:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  102385:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  102389:	0f b7 c0             	movzx  eax,ax
  10238c:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
  102390:	73 2a                	jae    1023bc <gfx::shapes::rect(gfx::shapes::s_pos_point, gfx::shapes::s_dimensions, unsigned int)+0x10d>
  102392:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  102396:	89 c2                	mov    edx,eax
  102398:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  10239c:	89 d6                	mov    esi,edx
  10239e:	89 c7                	mov    edi,eax
  1023a0:	e8 ca fe ff ff       	call   10226f <gfx::shapes::pos(unsigned int, unsigned int)>
  1023a5:	48 89 c2             	mov    rdx,rax
  1023a8:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  1023ab:	89 c6                	mov    esi,eax
  1023ad:	48 89 d7             	mov    rdi,rdx
  1023b0:	e8 26 fe ff ff       	call   1021db <gfx::screen::plot_pixel(gfx::shapes::s_pos_point, unsigned int)>
  1023b5:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
  1023ba:	eb b0                	jmp    10236c <gfx::shapes::rect(gfx::shapes::s_pos_point, gfx::shapes::s_dimensions, unsigned int)+0xbd>
  1023bc:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
  1023c1:	e9 70 ff ff ff       	jmp    102336 <gfx::shapes::rect(gfx::shapes::s_pos_point, gfx::shapes::s_dimensions, unsigned int)+0x87>
  1023c6:	e8 07 00 00 00       	call   1023d2 <gfx::screen::buff()>
  1023cb:	90                   	nop
  1023cc:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
  1023d0:	c9                   	leave  
  1023d1:	c3                   	ret    

00000000001023d2 <gfx::screen::buff()>:
  1023d2:	55                   	push   rbp
  1023d3:	48 89 e5             	mov    rbp,rsp
  1023d6:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  1023dd:	0f b7 40 0a          	movzx  eax,WORD PTR [rax+0xa]
  1023e1:	0f b7 d0             	movzx  edx,ax
  1023e4:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  1023eb:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  1023ef:	0f b7 c0             	movzx  eax,ax
  1023f2:	0f af c2             	imul   eax,edx
  1023f5:	c1 e0 02             	shl    eax,0x2
  1023f8:	48 63 d0             	movsxd rdx,eax
  1023fb:	48 c7 c0 a0 e0 10 00 	mov    rax,0x10e0a0
  102402:	48 8b 00             	mov    rax,QWORD PTR [rax]
  102405:	48 c7 c1 90 e0 10 00 	mov    rcx,0x10e090
  10240c:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  10240f:	48 89 c6             	mov    rsi,rax
  102412:	48 89 cf             	mov    rdi,rcx
  102415:	e8 05 46 00 00       	call   106a1f <memory::operations::memcpy(void*, void const*, unsigned long)>
  10241a:	90                   	nop
  10241b:	5d                   	pop    rbp
  10241c:	c3                   	ret    

000000000010241d <gfx::screen::save_screen()>:
  10241d:	55                   	push   rbp
  10241e:	48 89 e5             	mov    rbp,rsp
  102421:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  102428:	0f b7 40 0a          	movzx  eax,WORD PTR [rax+0xa]
  10242c:	0f b7 d0             	movzx  edx,ax
  10242f:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  102436:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  10243a:	0f b7 c0             	movzx  eax,ax
  10243d:	0f af c2             	imul   eax,edx
  102440:	c1 e0 02             	shl    eax,0x2
  102443:	48 63 d0             	movsxd rdx,eax
  102446:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  10244d:	48 8b 00             	mov    rax,QWORD PTR [rax]
  102450:	48 89 c1             	mov    rcx,rax
  102453:	48 c7 c0 a0 e0 10 00 	mov    rax,0x10e0a0
  10245a:	48 8b 00             	mov    rax,QWORD PTR [rax]
  10245d:	48 89 ce             	mov    rsi,rcx
  102460:	48 89 c7             	mov    rdi,rax
  102463:	e8 b7 45 00 00       	call   106a1f <memory::operations::memcpy(void*, void const*, unsigned long)>
  102468:	90                   	nop
  102469:	5d                   	pop    rbp
  10246a:	c3                   	ret    

000000000010246b <gfx::screen::restore_screen()>:
  10246b:	55                   	push   rbp
  10246c:	48 89 e5             	mov    rbp,rsp
  10246f:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  102476:	0f b7 40 0a          	movzx  eax,WORD PTR [rax+0xa]
  10247a:	0f b7 d0             	movzx  edx,ax
  10247d:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  102484:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  102488:	0f b7 c0             	movzx  eax,ax
  10248b:	0f af c2             	imul   eax,edx
  10248e:	c1 e0 02             	shl    eax,0x2
  102491:	48 63 d0             	movsxd rdx,eax
  102494:	48 c7 c0 a0 e0 10 00 	mov    rax,0x10e0a0
  10249b:	48 8b 00             	mov    rax,QWORD PTR [rax]
  10249e:	48 c7 c1 90 e0 10 00 	mov    rcx,0x10e090
  1024a5:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
  1024a8:	48 89 c6             	mov    rsi,rax
  1024ab:	48 89 cf             	mov    rdi,rcx
  1024ae:	e8 6c 45 00 00       	call   106a1f <memory::operations::memcpy(void*, void const*, unsigned long)>
  1024b3:	90                   	nop
  1024b4:	5d                   	pop    rbp
  1024b5:	c3                   	ret    

00000000001024b6 <gfx::subif::render_image(gfx::subif::s_subif_file*, gfx::shapes::s_pos_point)>:
  1024b6:	55                   	push   rbp
  1024b7:	48 89 e5             	mov    rbp,rsp
  1024ba:	48 83 ec 20          	sub    rsp,0x20
  1024be:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  1024c2:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  1024c6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  1024ca:	48 8b 00             	mov    rax,QWORD PTR [rax]
  1024cd:	8b 00                	mov    eax,DWORD PTR [rax]
  1024cf:	3d 87 54 00 00       	cmp    eax,0x5487
  1024d4:	74 0a                	je     1024e0 <gfx::subif::render_image(gfx::subif::s_subif_file*, gfx::shapes::s_pos_point)+0x2a>
  1024d6:	b8 ad fe ad 0b       	mov    eax,0xbadfead
  1024db:	e9 9b 00 00 00       	jmp    10257b <gfx::subif::render_image(gfx::subif::s_subif_file*, gfx::shapes::s_pos_point)+0xc5>
  1024e0:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  1024e7:	00 
  1024e8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  1024ec:	48 8b 00             	mov    rax,QWORD PTR [rax]
  1024ef:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
  1024f2:	89 c0                	mov    eax,eax
  1024f4:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
  1024f8:	73 77                	jae    102571 <gfx::subif::render_image(gfx::subif::s_subif_file*, gfx::shapes::s_pos_point)+0xbb>
  1024fa:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  102501:	00 
  102502:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  102506:	48 8b 00             	mov    rax,QWORD PTR [rax]
  102509:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  10250c:	89 c0                	mov    eax,eax
  10250e:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
  102512:	73 4a                	jae    10255e <gfx::subif::render_image(gfx::subif::s_subif_file*, gfx::shapes::s_pos_point)+0xa8>
  102514:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  102518:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  10251c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  102520:	48 8b 00             	mov    rax,QWORD PTR [rax]
  102523:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
  102526:	89 c0                	mov    eax,eax
  102528:	48 0f af 45 f0       	imul   rax,QWORD PTR [rbp-0x10]
  10252d:	48 89 c1             	mov    rcx,rax
  102530:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  102534:	48 01 c8             	add    rax,rcx
  102537:	48 c1 e0 02          	shl    rax,0x2
  10253b:	48 01 d0             	add    rax,rdx
  10253e:	8b 10                	mov    edx,DWORD PTR [rax]
  102540:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  102544:	89 d6                	mov    esi,edx
  102546:	48 89 c7             	mov    rdi,rax
  102549:	e8 d7 fc ff ff       	call   102225 <gfx::screen::plot_pixel_buffer(gfx::shapes::s_pos_point, unsigned int)>
  10254e:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
  102553:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  102556:	83 c0 01             	add    eax,0x1
  102559:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
  10255c:	eb a4                	jmp    102502 <gfx::subif::render_image(gfx::subif::s_subif_file*, gfx::shapes::s_pos_point)+0x4c>
  10255e:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
  102563:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  102566:	83 c0 01             	add    eax,0x1
  102569:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
  10256c:	e9 77 ff ff ff       	jmp    1024e8 <gfx::subif::render_image(gfx::subif::s_subif_file*, gfx::shapes::s_pos_point)+0x32>
  102571:	e8 5c fe ff ff       	call   1023d2 <gfx::screen::buff()>
  102576:	b8 0d 60 00 00       	mov    eax,0x600d
  10257b:	c9                   	leave  
  10257c:	c3                   	ret    

000000000010257d <gfx::shapes::rect_center(gfx::shapes::s_pos_point, gfx::shapes::s_pos_point)>:
  10257d:	55                   	push   rbp
  10257e:	48 89 e5             	mov    rbp,rsp
  102581:	48 83 ec 10          	sub    rsp,0x10
  102585:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  102589:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  10258d:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
  102590:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  102593:	01 d0                	add    eax,edx
  102595:	d1 e8                	shr    eax,1
  102597:	89 c2                	mov    edx,eax
  102599:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
  10259c:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  10259f:	01 c8                	add    eax,ecx
  1025a1:	d1 e8                	shr    eax,1
  1025a3:	89 d6                	mov    esi,edx
  1025a5:	89 c7                	mov    edi,eax
  1025a7:	e8 c3 fc ff ff       	call   10226f <gfx::shapes::pos(unsigned int, unsigned int)>
  1025ac:	c9                   	leave  
  1025ad:	c3                   	ret    

00000000001025ae <gfx::fonts::get_character_font(char)>:
  1025ae:	55                   	push   rbp
  1025af:	48 89 e5             	mov    rbp,rsp
  1025b2:	48 83 ec 08          	sub    rsp,0x8
  1025b6:	89 f8                	mov    eax,edi
  1025b8:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
  1025bb:	0f be 45 fc          	movsx  eax,BYTE PTR [rbp-0x4]
  1025bf:	48 98                	cdqe   
  1025c1:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  1025c8:	00 
  1025c9:	48 8d 05 30 7b 00 00 	lea    rax,[rip+0x7b30]        # 10a100 <kernel_font>
  1025d0:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
  1025d4:	c9                   	leave  
  1025d5:	c3                   	ret    

00000000001025d6 <io::outb(unsigned short, unsigned char)>:
  1025d6:	55                   	push   rbp
  1025d7:	48 89 e5             	mov    rbp,rsp
  1025da:	48 83 ec 08          	sub    rsp,0x8
  1025de:	89 f8                	mov    eax,edi
  1025e0:	89 f2                	mov    edx,esi
  1025e2:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  1025e6:	89 d0                	mov    eax,edx
  1025e8:	88 45 f8             	mov    BYTE PTR [rbp-0x8],al
  1025eb:	0f b6 45 f8          	movzx  eax,BYTE PTR [rbp-0x8]
  1025ef:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
  1025f3:	ee                   	out    dx,al
  1025f4:	90                   	nop
  1025f5:	c9                   	leave  
  1025f6:	c3                   	ret    

00000000001025f7 <io::inb(unsigned short)>:
  1025f7:	55                   	push   rbp
  1025f8:	48 89 e5             	mov    rbp,rsp
  1025fb:	48 83 ec 18          	sub    rsp,0x18
  1025ff:	89 f8                	mov    eax,edi
  102601:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
  102605:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
  102609:	89 c2                	mov    edx,eax
  10260b:	ec                   	in     al,dx
  10260c:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
  10260f:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
  102613:	c9                   	leave  
  102614:	c3                   	ret    

0000000000102615 <sys::audio::pcspk::init()>:
  102615:	55                   	push   rbp
  102616:	48 89 e5             	mov    rbp,rsp
  102619:	bf 61 00 00 00       	mov    edi,0x61
  10261e:	e8 d4 ff ff ff       	call   1025f7 <io::inb(unsigned short)>
  102623:	83 c8 01             	or     eax,0x1
  102626:	0f b6 c0             	movzx  eax,al
  102629:	89 c6                	mov    esi,eax
  10262b:	bf 61 00 00 00       	mov    edi,0x61
  102630:	e8 a1 ff ff ff       	call   1025d6 <io::outb(unsigned short, unsigned char)>
  102635:	90                   	nop
  102636:	5d                   	pop    rbp
  102637:	c3                   	ret    

0000000000102638 <sys::audio::pcspk::play_sound(unsigned int)>:
  102638:	55                   	push   rbp
  102639:	48 89 e5             	mov    rbp,rsp
  10263c:	48 83 ec 20          	sub    rsp,0x20
  102640:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
  102643:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  102646:	89 c7                	mov    edi,eax
  102648:	e8 55 58 00 00       	call   107ea2 <io::pit::set_c2_frequency(unsigned int)>
  10264d:	bf 61 00 00 00       	mov    edi,0x61
  102652:	e8 a0 ff ff ff       	call   1025f7 <io::inb(unsigned short)>
  102657:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
  10265a:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
  10265e:	83 c8 03             	or     eax,0x3
  102661:	38 45 ff             	cmp    BYTE PTR [rbp-0x1],al
  102664:	74 16                	je     10267c <sys::audio::pcspk::play_sound(unsigned int)+0x44>
  102666:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
  10266a:	83 c8 03             	or     eax,0x3
  10266d:	0f b6 c0             	movzx  eax,al
  102670:	89 c6                	mov    esi,eax
  102672:	bf 61 00 00 00       	mov    edi,0x61
  102677:	e8 5a ff ff ff       	call   1025d6 <io::outb(unsigned short, unsigned char)>
  10267c:	90                   	nop
  10267d:	c9                   	leave  
  10267e:	c3                   	ret    

000000000010267f <sys::audio::pcspk::stop_sound()>:
  10267f:	55                   	push   rbp
  102680:	48 89 e5             	mov    rbp,rsp
  102683:	48 83 ec 10          	sub    rsp,0x10
  102687:	bf 61 00 00 00       	mov    edi,0x61
  10268c:	e8 66 ff ff ff       	call   1025f7 <io::inb(unsigned short)>
  102691:	83 e0 fc             	and    eax,0xfffffffc
  102694:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
  102697:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
  10269b:	89 c6                	mov    esi,eax
  10269d:	bf 61 00 00 00       	mov    edi,0x61
  1026a2:	e8 2f ff ff ff       	call   1025d6 <io::outb(unsigned short, unsigned char)>
  1026a7:	90                   	nop
  1026a8:	c9                   	leave  
  1026a9:	c3                   	ret    

00000000001026aa <sys::audio::pcspk::beep()>:
  1026aa:	55                   	push   rbp
  1026ab:	48 89 e5             	mov    rbp,rsp
  1026ae:	bf e8 03 00 00       	mov    edi,0x3e8
  1026b3:	e8 80 ff ff ff       	call   102638 <sys::audio::pcspk::play_sound(unsigned int)>
  1026b8:	bf 0a 00 00 00       	mov    edi,0xa
  1026bd:	e8 fe 5c 00 00       	call   1083c0 <sleep>
  1026c2:	e8 b8 ff ff ff       	call   10267f <sys::audio::pcspk::stop_sound()>
  1026c7:	bf 01 00 00 00       	mov    edi,0x1
  1026cc:	e8 d1 57 00 00       	call   107ea2 <io::pit::set_c2_frequency(unsigned int)>
  1026d1:	90                   	nop
  1026d2:	5d                   	pop    rbp
  1026d3:	c3                   	ret    

00000000001026d4 <sys::audio::pcspk::beep(unsigned int, unsigned int)>:
  1026d4:	55                   	push   rbp
  1026d5:	48 89 e5             	mov    rbp,rsp
  1026d8:	48 83 ec 10          	sub    rsp,0x10
  1026dc:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  1026df:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
  1026e2:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  1026e5:	89 c7                	mov    edi,eax
  1026e7:	e8 4c ff ff ff       	call   102638 <sys::audio::pcspk::play_sound(unsigned int)>
  1026ec:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  1026ef:	48 89 c7             	mov    rdi,rax
  1026f2:	e8 c9 5c 00 00       	call   1083c0 <sleep>
  1026f7:	e8 83 ff ff ff       	call   10267f <sys::audio::pcspk::stop_sound()>
  1026fc:	bf 01 00 00 00       	mov    edi,0x1
  102701:	e8 9c 57 00 00       	call   107ea2 <io::pit::set_c2_frequency(unsigned int)>
  102706:	90                   	nop
  102707:	c9                   	leave  
  102708:	c3                   	ret    

0000000000102709 <__int_str(long, char*, int, bool, bool, int, bool, bool)>:
  102709:	55                   	push   rbp
  10270a:	48 89 e5             	mov    rbp,rsp
  10270d:	53                   	push   rbx
  10270e:	48 81 ec 78 01 00 00 	sub    rsp,0x178
  102715:	48 89 bd a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rdi
  10271c:	48 89 b5 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rsi
  102723:	89 95 9c fe ff ff    	mov    DWORD PTR [rbp-0x164],edx
  102729:	89 c8                	mov    eax,ecx
  10272b:	44 89 c6             	mov    esi,r8d
  10272e:	44 89 8d 90 fe ff ff 	mov    DWORD PTR [rbp-0x170],r9d
  102735:	8b 4d 10             	mov    ecx,DWORD PTR [rbp+0x10]
  102738:	8b 55 18             	mov    edx,DWORD PTR [rbp+0x18]
  10273b:	88 85 98 fe ff ff    	mov    BYTE PTR [rbp-0x168],al
  102741:	89 f0                	mov    eax,esi
  102743:	88 85 94 fe ff ff    	mov    BYTE PTR [rbp-0x16c],al
  102749:	89 c8                	mov    eax,ecx
  10274b:	88 85 8c fe ff ff    	mov    BYTE PTR [rbp-0x174],al
  102751:	89 d0                	mov    eax,edx
  102753:	88 85 88 fe ff ff    	mov    BYTE PTR [rbp-0x178],al
  102759:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
  102760:	00 
  102761:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
  102768:	00 
  102769:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  102770:	00 
  102771:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
  102778:	00 
  102779:	48 8d 45 b0          	lea    rax,[rbp-0x50]
  10277d:	ba 20 00 00 00       	mov    edx,0x20
  102782:	be 00 00 00 00       	mov    esi,0x0
  102787:	48 89 c7             	mov    rdi,rax
  10278a:	e8 d1 42 00 00       	call   106a60 <memory::operations::memset(void*, unsigned char, unsigned long)>
  10278f:	48 8d 45 b0          	lea    rax,[rbp-0x50]
  102793:	48 8d 35 66 81 00 00 	lea    rsi,[rip+0x8166]        # 10a900 <kernel_font+0x800>
  10279a:	48 89 c7             	mov    rdi,rax
  10279d:	e8 ab 45 00 00       	call   106d4d <util::strcpy(char*, char const*)>
  1027a2:	83 bd 9c fe ff ff 10 	cmp    DWORD PTR [rbp-0x164],0x10
  1027a9:	75 15                	jne    1027c0 <__int_str(long, char*, int, bool, bool, int, bool, bool)+0xb7>
  1027ab:	48 8d 45 b0          	lea    rax,[rbp-0x50]
  1027af:	48 8d 35 55 81 00 00 	lea    rsi,[rip+0x8155]        # 10a90b <kernel_font+0x80b>
  1027b6:	48 89 c7             	mov    rdi,rax
  1027b9:	e8 34 45 00 00       	call   106cf2 <util::strcat(char*, char const*)>
  1027be:	eb 26                	jmp    1027e6 <__int_str(long, char*, int, bool, bool, int, bool, bool)+0xdd>
  1027c0:	83 bd 9c fe ff ff 11 	cmp    DWORD PTR [rbp-0x164],0x11
  1027c7:	75 1d                	jne    1027e6 <__int_str(long, char*, int, bool, bool, int, bool, bool)+0xdd>
  1027c9:	48 8d 45 b0          	lea    rax,[rbp-0x50]
  1027cd:	48 8d 35 3e 81 00 00 	lea    rsi,[rip+0x813e]        # 10a912 <kernel_font+0x812>
  1027d4:	48 89 c7             	mov    rdi,rax
  1027d7:	e8 16 45 00 00       	call   106cf2 <util::strcat(char*, char const*)>
  1027dc:	c7 85 9c fe ff ff 10 	mov    DWORD PTR [rbp-0x164],0x10
  1027e3:	00 00 00 
  1027e6:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  1027ed:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  1027f1:	48 83 bd a8 fe ff ff 	cmp    QWORD PTR [rbp-0x158],0x0
  1027f8:	00 
  1027f9:	79 18                	jns    102813 <__int_str(long, char*, int, bool, bool, int, bool, bool)+0x10a>
  1027fb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  1027ff:	48 8d 50 01          	lea    rdx,[rax+0x1]
  102803:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  102807:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
  10280a:	48 f7 9d a8 fe ff ff 	neg    QWORD PTR [rbp-0x158]
  102811:	eb 40                	jmp    102853 <__int_str(long, char*, int, bool, bool, int, bool, bool)+0x14a>
  102813:	80 bd 98 fe ff ff 00 	cmp    BYTE PTR [rbp-0x168],0x0
  10281a:	74 11                	je     10282d <__int_str(long, char*, int, bool, bool, int, bool, bool)+0x124>
  10281c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  102820:	48 8d 50 01          	lea    rdx,[rax+0x1]
  102824:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  102828:	c6 00 2b             	mov    BYTE PTR [rax],0x2b
  10282b:	eb 26                	jmp    102853 <__int_str(long, char*, int, bool, bool, int, bool, bool)+0x14a>
  10282d:	0f b6 85 98 fe ff ff 	movzx  eax,BYTE PTR [rbp-0x168]
  102834:	83 f0 01             	xor    eax,0x1
  102837:	84 c0                	test   al,al
  102839:	74 18                	je     102853 <__int_str(long, char*, int, bool, bool, int, bool, bool)+0x14a>
  10283b:	80 bd 94 fe ff ff 00 	cmp    BYTE PTR [rbp-0x16c],0x0
  102842:	74 0f                	je     102853 <__int_str(long, char*, int, bool, bool, int, bool, bool)+0x14a>
  102844:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  102848:	48 8d 50 01          	lea    rdx,[rax+0x1]
  10284c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  102850:	c6 00 20             	mov    BYTE PTR [rax],0x20
  102853:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
  10285a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  10285e:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
  102863:	8b 85 9c fe ff ff    	mov    eax,DWORD PTR [rbp-0x164]
  102869:	48 63 d8             	movsxd rbx,eax
  10286c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  102870:	48 99                	cqo    
  102872:	48 f7 fb             	idiv   rbx
  102875:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  102879:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
  10287e:	74 02                	je     102882 <__int_str(long, char*, int, bool, bool, int, bool, bool)+0x179>
  102880:	eb dc                	jmp    10285e <__int_str(long, char*, int, bool, bool, int, bool, bool)+0x155>
  102882:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  102886:	c6 00 00             	mov    BYTE PTR [rax],0x0
  102889:	8b 85 9c fe ff ff    	mov    eax,DWORD PTR [rbp-0x164]
  10288f:	48 63 c8             	movsxd rcx,eax
  102892:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
  102899:	48 99                	cqo    
  10289b:	48 f7 f9             	idiv   rcx
  10289e:	48 89 d0             	mov    rax,rdx
  1028a1:	0f b6 54 05 b0       	movzx  edx,BYTE PTR [rbp+rax*1-0x50]
  1028a6:	48 83 6d e8 01       	sub    QWORD PTR [rbp-0x18],0x1
  1028ab:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  1028af:	88 10                	mov    BYTE PTR [rax],dl
  1028b1:	8b 85 9c fe ff ff    	mov    eax,DWORD PTR [rbp-0x164]
  1028b7:	48 63 c8             	movsxd rcx,eax
  1028ba:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
  1028c1:	48 99                	cqo    
  1028c3:	48 f7 f9             	idiv   rcx
  1028c6:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
  1028cd:	48 83 bd a8 fe ff ff 	cmp    QWORD PTR [rbp-0x158],0x0
  1028d4:	00 
  1028d5:	74 02                	je     1028d9 <__int_str(long, char*, int, bool, bool, int, bool, bool)+0x1d0>
  1028d7:	eb b0                	jmp    102889 <__int_str(long, char*, int, bool, bool, int, bool, bool)+0x180>
  1028d9:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  1028e0:	48 89 c7             	mov    rdi,rax
  1028e3:	e8 c5 43 00 00       	call   106cad <util::strlen(char const*)>
  1028e8:	89 c2                	mov    edx,eax
  1028ea:	8b 85 90 fe ff ff    	mov    eax,DWORD PTR [rbp-0x170]
  1028f0:	29 d0                	sub    eax,edx
  1028f2:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
  1028f5:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  1028f9:	79 07                	jns    102902 <__int_str(long, char*, int, bool, bool, int, bool, bool)+0x1f9>
  1028fb:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
  102902:	80 bd 8c fe ff ff 00 	cmp    BYTE PTR [rbp-0x174],0x0
  102909:	74 5b                	je     102966 <__int_str(long, char*, int, bool, bool, int, bool, bool)+0x25d>
  10290b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  10290e:	8d 50 ff             	lea    edx,[rax-0x1]
  102911:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
  102914:	85 c0                	test   eax,eax
  102916:	0f 95 c0             	setne  al
  102919:	84 c0                	test   al,al
  10291b:	0f 84 12 02 00 00    	je     102b33 <__int_str(long, char*, int, bool, bool, int, bool, bool)+0x42a>
  102921:	80 bd 88 fe ff ff 00 	cmp    BYTE PTR [rbp-0x178],0x0
  102928:	74 1e                	je     102948 <__int_str(long, char*, int, bool, bool, int, bool, bool)+0x23f>
  10292a:	48 8b 9d a0 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x160]
  102931:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  102938:	48 89 c7             	mov    rdi,rax
  10293b:	e8 6d 43 00 00       	call   106cad <util::strlen(char const*)>
  102940:	48 01 d8             	add    rax,rbx
  102943:	c6 00 30             	mov    BYTE PTR [rax],0x30
  102946:	eb c3                	jmp    10290b <__int_str(long, char*, int, bool, bool, int, bool, bool)+0x202>
  102948:	48 8b 9d a0 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x160]
  10294f:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  102956:	48 89 c7             	mov    rdi,rax
  102959:	e8 4f 43 00 00       	call   106cad <util::strlen(char const*)>
  10295e:	48 01 d8             	add    rax,rbx
  102961:	c6 00 20             	mov    BYTE PTR [rax],0x20
  102964:	eb a5                	jmp    10290b <__int_str(long, char*, int, bool, bool, int, bool, bool)+0x202>
  102966:	48 c7 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],0x0
  10296d:	00 00 00 00 
  102971:	48 c7 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],0x0
  102978:	00 00 00 00 
  10297c:	48 c7 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],0x0
  102983:	00 00 00 00 
  102987:	48 c7 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],0x0
  10298e:	00 00 00 00 
  102992:	48 c7 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],0x0
  102999:	00 00 00 00 
  10299d:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
  1029a4:	00 00 00 00 
  1029a8:	48 c7 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],0x0
  1029af:	00 00 00 00 
  1029b3:	48 c7 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],0x0
  1029ba:	00 00 00 00 
  1029be:	48 c7 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],0x0
  1029c5:	00 00 00 00 
  1029c9:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  1029d0:	00 00 00 00 
  1029d4:	48 c7 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],0x0
  1029db:	00 00 00 00 
  1029df:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x0
  1029e6:	00 00 00 00 
  1029ea:	48 c7 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],0x0
  1029f1:	00 00 00 00 
  1029f5:	48 c7 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],0x0
  1029fc:	00 00 00 00 
  102a00:	48 c7 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],0x0
  102a07:	00 00 00 00 
  102a0b:	48 c7 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],0x0
  102a12:	00 00 00 00 
  102a16:	48 c7 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],0x0
  102a1d:	00 00 00 00 
  102a21:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  102a28:	00 00 00 00 
  102a2c:	48 c7 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],0x0
  102a33:	00 00 00 00 
  102a37:	48 c7 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],0x0
  102a3e:	00 00 00 00 
  102a42:	48 c7 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],0x0
  102a49:	00 00 00 00 
  102a4d:	48 c7 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],0x0
  102a54:	00 00 00 00 
  102a58:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x0
  102a5f:	00 00 00 00 
  102a63:	48 c7 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],0x0
  102a6a:	00 00 00 00 
  102a6e:	48 c7 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],0x0
  102a75:	00 00 00 00 
  102a79:	48 c7 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],0x0
  102a80:	00 00 00 00 
  102a84:	48 c7 45 80 00 00 00 	mov    QWORD PTR [rbp-0x80],0x0
  102a8b:	00 
  102a8c:	48 c7 45 88 00 00 00 	mov    QWORD PTR [rbp-0x78],0x0
  102a93:	00 
  102a94:	48 c7 45 90 00 00 00 	mov    QWORD PTR [rbp-0x70],0x0
  102a9b:	00 
  102a9c:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
  102aa3:	00 
  102aa4:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
  102aab:	00 
  102aac:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
  102ab3:	00 
  102ab4:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  102ab7:	8d 50 ff             	lea    edx,[rax-0x1]
  102aba:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
  102abd:	85 c0                	test   eax,eax
  102abf:	0f 95 c0             	setne  al
  102ac2:	84 c0                	test   al,al
  102ac4:	74 3b                	je     102b01 <__int_str(long, char*, int, bool, bool, int, bool, bool)+0x3f8>
  102ac6:	80 bd 88 fe ff ff 00 	cmp    BYTE PTR [rbp-0x178],0x0
  102acd:	74 19                	je     102ae8 <__int_str(long, char*, int, bool, bool, int, bool, bool)+0x3df>
  102acf:	48 8d 85 b0 fe ff ff 	lea    rax,[rbp-0x150]
  102ad6:	48 89 c7             	mov    rdi,rax
  102ad9:	e8 cf 41 00 00       	call   106cad <util::strlen(char const*)>
  102ade:	c6 84 05 b0 fe ff ff 	mov    BYTE PTR [rbp+rax*1-0x150],0x30
  102ae5:	30 
  102ae6:	eb cc                	jmp    102ab4 <__int_str(long, char*, int, bool, bool, int, bool, bool)+0x3ab>
  102ae8:	48 8d 85 b0 fe ff ff 	lea    rax,[rbp-0x150]
  102aef:	48 89 c7             	mov    rdi,rax
  102af2:	e8 b6 41 00 00       	call   106cad <util::strlen(char const*)>
  102af7:	c6 84 05 b0 fe ff ff 	mov    BYTE PTR [rbp+rax*1-0x150],0x20
  102afe:	20 
  102aff:	eb b3                	jmp    102ab4 <__int_str(long, char*, int, bool, bool, int, bool, bool)+0x3ab>
  102b01:	48 8b 95 a0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x160]
  102b08:	48 8d 85 b0 fe ff ff 	lea    rax,[rbp-0x150]
  102b0f:	48 89 d6             	mov    rsi,rdx
  102b12:	48 89 c7             	mov    rdi,rax
  102b15:	e8 d8 41 00 00       	call   106cf2 <util::strcat(char*, char const*)>
  102b1a:	48 8d 95 b0 fe ff ff 	lea    rdx,[rbp-0x150]
  102b21:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  102b28:	48 89 d6             	mov    rsi,rdx
  102b2b:	48 89 c7             	mov    rdi,rax
  102b2e:	e8 1a 42 00 00       	call   106d4d <util::strcpy(char*, char const*)>
  102b33:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
  102b3a:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
  102b3e:	c9                   	leave  
  102b3f:	c3                   	ret    

0000000000102b40 <displayCharacter(char, int*)>:
  102b40:	55                   	push   rbp
  102b41:	48 89 e5             	mov    rbp,rsp
  102b44:	48 83 ec 10          	sub    rsp,0x10
  102b48:	89 f8                	mov    eax,edi
  102b4a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  102b4e:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
  102b51:	e8 fc f5 ff ff       	call   102152 <terminal::instance()>
  102b56:	48 89 c1             	mov    rcx,rax
  102b59:	0f be 45 fc          	movsx  eax,BYTE PTR [rbp-0x4]
  102b5d:	ba 0f 00 00 00       	mov    edx,0xf
  102b62:	89 c6                	mov    esi,eax
  102b64:	48 89 cf             	mov    rdi,rcx
  102b67:	e8 a4 f0 ff ff       	call   101c10 <terminal::put_char(char, unsigned char)>
  102b6c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  102b70:	8b 00                	mov    eax,DWORD PTR [rax]
  102b72:	8d 50 01             	lea    edx,[rax+0x1]
  102b75:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  102b79:	89 10                	mov    DWORD PTR [rax],edx
  102b7b:	90                   	nop
  102b7c:	c9                   	leave  
  102b7d:	c3                   	ret    

0000000000102b7e <displayString(char const*, int*)>:
  102b7e:	55                   	push   rbp
  102b7f:	48 89 e5             	mov    rbp,rsp
  102b82:	48 83 ec 20          	sub    rsp,0x20
  102b86:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  102b8a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  102b8e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  102b95:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  102b98:	48 63 d0             	movsxd rdx,eax
  102b9b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  102b9f:	48 01 d0             	add    rax,rdx
  102ba2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  102ba5:	84 c0                	test   al,al
  102ba7:	74 27                	je     102bd0 <displayString(char const*, int*)+0x52>
  102ba9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  102bac:	48 63 d0             	movsxd rdx,eax
  102baf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  102bb3:	48 01 d0             	add    rax,rdx
  102bb6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  102bb9:	0f be c0             	movsx  eax,al
  102bbc:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  102bc0:	48 89 d6             	mov    rsi,rdx
  102bc3:	89 c7                	mov    edi,eax
  102bc5:	e8 76 ff ff ff       	call   102b40 <displayCharacter(char, int*)>
  102bca:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
  102bce:	eb c5                	jmp    102b95 <displayString(char const*, int*)+0x17>
  102bd0:	90                   	nop
  102bd1:	c9                   	leave  
  102bd2:	c3                   	ret    

0000000000102bd3 <vprintf(char const*, __va_list_tag*)>:
  102bd3:	55                   	push   rbp
  102bd4:	48 89 e5             	mov    rbp,rsp
  102bd7:	48 81 ec d0 01 00 00 	sub    rsp,0x1d0
  102bde:	48 89 bd 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],rdi
  102be5:	48 89 b5 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rsi
  102bec:	c7 85 4c ff ff ff 00 	mov    DWORD PTR [rbp-0xb4],0x0
  102bf3:	00 00 00 
  102bf6:	48 c7 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],0x0
  102bfd:	00 00 00 00 
  102c01:	48 c7 85 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],0x0
  102c08:	00 00 00 00 
  102c0c:	48 c7 85 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],0x0
  102c13:	00 00 00 00 
  102c17:	48 c7 85 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],0x0
  102c1e:	00 00 00 00 
  102c22:	48 c7 85 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],0x0
  102c29:	00 00 00 00 
  102c2d:	48 c7 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],0x0
  102c34:	00 00 00 00 
  102c38:	48 c7 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],0x0
  102c3f:	00 00 00 00 
  102c43:	48 c7 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],0x0
  102c4a:	00 00 00 00 
  102c4e:	48 c7 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],0x0
  102c55:	00 00 00 00 
  102c59:	48 c7 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],0x0
  102c60:	00 00 00 00 
  102c64:	48 c7 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],0x0
  102c6b:	00 00 00 00 
  102c6f:	48 c7 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],0x0
  102c76:	00 00 00 00 
  102c7a:	48 c7 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],0x0
  102c81:	00 00 00 00 
  102c85:	48 c7 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],0x0
  102c8c:	00 00 00 00 
  102c90:	48 c7 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],0x0
  102c97:	00 00 00 00 
  102c9b:	48 c7 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],0x0
  102ca2:	00 00 00 00 
  102ca6:	48 c7 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],0x0
  102cad:	00 00 00 00 
  102cb1:	48 c7 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],0x0
  102cb8:	00 00 00 00 
  102cbc:	48 c7 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],0x0
  102cc3:	00 00 00 00 
  102cc7:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0x0
  102cce:	00 00 00 00 
  102cd2:	48 c7 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],0x0
  102cd9:	00 00 00 00 
  102cdd:	48 c7 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],0x0
  102ce4:	00 00 00 00 
  102ce8:	48 c7 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],0x0
  102cef:	00 00 00 00 
  102cf3:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0x0
  102cfa:	00 00 00 00 
  102cfe:	48 c7 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],0x0
  102d05:	00 00 00 00 
  102d09:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x0
  102d10:	00 00 00 00 
  102d14:	48 c7 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],0x0
  102d1b:	00 00 00 00 
  102d1f:	48 c7 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],0x0
  102d26:	00 00 00 00 
  102d2a:	48 c7 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],0x0
  102d31:	00 00 00 00 
  102d35:	48 c7 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],0x0
  102d3c:	00 00 00 00 
  102d40:	48 c7 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],0x0
  102d47:	00 00 00 00 
  102d4b:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
  102d52:	00 00 00 00 
  102d56:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  102d5d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  102d60:	48 63 d0             	movsxd rdx,eax
  102d63:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  102d6a:	48 01 d0             	add    rax,rdx
  102d6d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  102d70:	84 c0                	test   al,al
  102d72:	0f 84 76 18 00 00    	je     1045ee <vprintf(char const*, __va_list_tag*)+0x1a1b>
  102d78:	c6 45 fb 00          	mov    BYTE PTR [rbp-0x5],0x0
  102d7c:	c6 45 fa 00          	mov    BYTE PTR [rbp-0x6],0x0
  102d80:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
  102d87:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
  102d8e:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
  102d92:	c6 45 ee 00          	mov    BYTE PTR [rbp-0x12],0x0
  102d96:	c6 45 ed 00          	mov    BYTE PTR [rbp-0x13],0x0
  102d9a:	c6 45 ec 00          	mov    BYTE PTR [rbp-0x14],0x0
  102d9e:	c6 45 eb 00          	mov    BYTE PTR [rbp-0x15],0x0
  102da2:	c6 45 c7 00          	mov    BYTE PTR [rbp-0x39],0x0
  102da6:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
  102dad:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  102db0:	48 63 d0             	movsxd rdx,eax
  102db3:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  102dba:	48 01 d0             	add    rax,rdx
  102dbd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  102dc0:	3c 25                	cmp    al,0x25
  102dc2:	0f 85 f6 17 00 00    	jne    1045be <vprintf(char const*, __va_list_tag*)+0x19eb>
  102dc8:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
  102dcc:	c6 45 e3 00          	mov    BYTE PTR [rbp-0x1d],0x0
  102dd0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  102dd3:	48 63 d0             	movsxd rdx,eax
  102dd6:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  102ddd:	48 01 d0             	add    rax,rdx
  102de0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  102de3:	0f be c0             	movsx  eax,al
  102de6:	83 e8 20             	sub    eax,0x20
  102de9:	83 f8 10             	cmp    eax,0x10
  102dec:	77 54                	ja     102e42 <vprintf(char const*, __va_list_tag*)+0x26f>
  102dee:	89 c0                	mov    eax,eax
  102df0:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
  102df7:	00 
  102df8:	48 8d 05 25 7b 00 00 	lea    rax,[rip+0x7b25]        # 10a924 <kernel_font+0x824>
  102dff:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
  102e02:	48 98                	cdqe   
  102e04:	48 8d 15 19 7b 00 00 	lea    rdx,[rip+0x7b19]        # 10a924 <kernel_font+0x824>
  102e0b:	48 01 d0             	add    rax,rdx
  102e0e:	ff e0                	jmp    rax
  102e10:	c6 45 ef 01          	mov    BYTE PTR [rbp-0x11],0x1
  102e14:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
  102e18:	eb 2d                	jmp    102e47 <vprintf(char const*, __va_list_tag*)+0x274>
  102e1a:	c6 45 eb 01          	mov    BYTE PTR [rbp-0x15],0x1
  102e1e:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
  102e22:	eb 23                	jmp    102e47 <vprintf(char const*, __va_list_tag*)+0x274>
  102e24:	c6 45 ec 01          	mov    BYTE PTR [rbp-0x14],0x1
  102e28:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
  102e2c:	eb 19                	jmp    102e47 <vprintf(char const*, __va_list_tag*)+0x274>
  102e2e:	c6 45 ed 01          	mov    BYTE PTR [rbp-0x13],0x1
  102e32:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
  102e36:	eb 0f                	jmp    102e47 <vprintf(char const*, __va_list_tag*)+0x274>
  102e38:	c6 45 ee 01          	mov    BYTE PTR [rbp-0x12],0x1
  102e3c:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
  102e40:	eb 05                	jmp    102e47 <vprintf(char const*, __va_list_tag*)+0x274>
  102e42:	c6 45 e3 01          	mov    BYTE PTR [rbp-0x1d],0x1
  102e46:	90                   	nop
  102e47:	80 7d e3 00          	cmp    BYTE PTR [rbp-0x1d],0x0
  102e4b:	74 83                	je     102dd0 <vprintf(char const*, __va_list_tag*)+0x1fd>
  102e4d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  102e50:	48 63 d0             	movsxd rdx,eax
  102e53:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  102e5a:	48 01 d0             	add    rax,rdx
  102e5d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  102e60:	0f be c0             	movsx  eax,al
  102e63:	89 c7                	mov    edi,eax
  102e65:	e8 2a 3f 00 00       	call   106d94 <util::isdigit(char)>
  102e6a:	85 c0                	test   eax,eax
  102e6c:	0f 95 c0             	setne  al
  102e6f:	84 c0                	test   al,al
  102e71:	74 31                	je     102ea4 <vprintf(char const*, __va_list_tag*)+0x2d1>
  102e73:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
  102e76:	89 d0                	mov    eax,edx
  102e78:	c1 e0 02             	shl    eax,0x2
  102e7b:	01 d0                	add    eax,edx
  102e7d:	01 c0                	add    eax,eax
  102e7f:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
  102e82:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  102e85:	48 63 d0             	movsxd rdx,eax
  102e88:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  102e8f:	48 01 d0             	add    rax,rdx
  102e92:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  102e95:	0f be c0             	movsx  eax,al
  102e98:	83 e8 30             	sub    eax,0x30
  102e9b:	01 45 f4             	add    DWORD PTR [rbp-0xc],eax
  102e9e:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
  102ea2:	eb a9                	jmp    102e4d <vprintf(char const*, __va_list_tag*)+0x27a>
  102ea4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  102ea7:	48 63 d0             	movsxd rdx,eax
  102eaa:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  102eb1:	48 01 d0             	add    rax,rdx
  102eb4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  102eb7:	3c 2a                	cmp    al,0x2a
  102eb9:	75 61                	jne    102f1c <vprintf(char const*, __va_list_tag*)+0x349>
  102ebb:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  102ec2:	8b 00                	mov    eax,DWORD PTR [rax]
  102ec4:	83 f8 2f             	cmp    eax,0x2f
  102ec7:	77 30                	ja     102ef9 <vprintf(char const*, __va_list_tag*)+0x326>
  102ec9:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  102ed0:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  102ed4:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  102edb:	8b 00                	mov    eax,DWORD PTR [rax]
  102edd:	89 c0                	mov    eax,eax
  102edf:	48 01 d0             	add    rax,rdx
  102ee2:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  102ee9:	8b 12                	mov    edx,DWORD PTR [rdx]
  102eeb:	8d 4a 08             	lea    ecx,[rdx+0x8]
  102eee:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  102ef5:	89 0a                	mov    DWORD PTR [rdx],ecx
  102ef7:	eb 1a                	jmp    102f13 <vprintf(char const*, __va_list_tag*)+0x340>
  102ef9:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  102f00:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  102f04:	48 8d 48 08          	lea    rcx,[rax+0x8]
  102f08:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  102f0f:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  102f13:	8b 00                	mov    eax,DWORD PTR [rax]
  102f15:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
  102f18:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
  102f1c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  102f1f:	48 63 d0             	movsxd rdx,eax
  102f22:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  102f29:	48 01 d0             	add    rax,rdx
  102f2c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  102f2f:	3c 2e                	cmp    al,0x2e
  102f31:	0f 85 d5 00 00 00    	jne    10300c <vprintf(char const*, __va_list_tag*)+0x439>
  102f37:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
  102f3b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  102f3e:	48 63 d0             	movsxd rdx,eax
  102f41:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  102f48:	48 01 d0             	add    rax,rdx
  102f4b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  102f4e:	0f be c0             	movsx  eax,al
  102f51:	89 c7                	mov    edi,eax
  102f53:	e8 3c 3e 00 00       	call   106d94 <util::isdigit(char)>
  102f58:	85 c0                	test   eax,eax
  102f5a:	0f 95 c0             	setne  al
  102f5d:	84 c0                	test   al,al
  102f5f:	74 31                	je     102f92 <vprintf(char const*, __va_list_tag*)+0x3bf>
  102f61:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
  102f64:	89 d0                	mov    eax,edx
  102f66:	c1 e0 02             	shl    eax,0x2
  102f69:	01 d0                	add    eax,edx
  102f6b:	01 c0                	add    eax,eax
  102f6d:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
  102f70:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  102f73:	48 63 d0             	movsxd rdx,eax
  102f76:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  102f7d:	48 01 d0             	add    rax,rdx
  102f80:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  102f83:	0f be c0             	movsx  eax,al
  102f86:	83 e8 30             	sub    eax,0x30
  102f89:	01 45 f0             	add    DWORD PTR [rbp-0x10],eax
  102f8c:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
  102f90:	eb a9                	jmp    102f3b <vprintf(char const*, __va_list_tag*)+0x368>
  102f92:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  102f95:	48 63 d0             	movsxd rdx,eax
  102f98:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  102f9f:	48 01 d0             	add    rax,rdx
  102fa2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  102fa5:	3c 2a                	cmp    al,0x2a
  102fa7:	75 6a                	jne    103013 <vprintf(char const*, __va_list_tag*)+0x440>
  102fa9:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  102fb0:	8b 00                	mov    eax,DWORD PTR [rax]
  102fb2:	83 f8 2f             	cmp    eax,0x2f
  102fb5:	77 30                	ja     102fe7 <vprintf(char const*, __va_list_tag*)+0x414>
  102fb7:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  102fbe:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  102fc2:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  102fc9:	8b 00                	mov    eax,DWORD PTR [rax]
  102fcb:	89 c0                	mov    eax,eax
  102fcd:	48 01 d0             	add    rax,rdx
  102fd0:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  102fd7:	8b 12                	mov    edx,DWORD PTR [rdx]
  102fd9:	8d 4a 08             	lea    ecx,[rdx+0x8]
  102fdc:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  102fe3:	89 0a                	mov    DWORD PTR [rdx],ecx
  102fe5:	eb 1a                	jmp    103001 <vprintf(char const*, __va_list_tag*)+0x42e>
  102fe7:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  102fee:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  102ff2:	48 8d 48 08          	lea    rcx,[rax+0x8]
  102ff6:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  102ffd:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  103001:	8b 00                	mov    eax,DWORD PTR [rax]
  103003:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
  103006:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
  10300a:	eb 07                	jmp    103013 <vprintf(char const*, __va_list_tag*)+0x440>
  10300c:	c7 45 f0 06 00 00 00 	mov    DWORD PTR [rbp-0x10],0x6
  103013:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  103016:	48 63 d0             	movsxd rdx,eax
  103019:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  103020:	48 01 d0             	add    rax,rdx
  103023:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  103026:	3c 68                	cmp    al,0x68
  103028:	74 73                	je     10309d <vprintf(char const*, __va_list_tag*)+0x4ca>
  10302a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  10302d:	48 63 d0             	movsxd rdx,eax
  103030:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  103037:	48 01 d0             	add    rax,rdx
  10303a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  10303d:	3c 6c                	cmp    al,0x6c
  10303f:	74 5c                	je     10309d <vprintf(char const*, __va_list_tag*)+0x4ca>
  103041:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  103044:	48 63 d0             	movsxd rdx,eax
  103047:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  10304e:	48 01 d0             	add    rax,rdx
  103051:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  103054:	3c 6a                	cmp    al,0x6a
  103056:	74 45                	je     10309d <vprintf(char const*, __va_list_tag*)+0x4ca>
  103058:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  10305b:	48 63 d0             	movsxd rdx,eax
  10305e:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  103065:	48 01 d0             	add    rax,rdx
  103068:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  10306b:	3c 7a                	cmp    al,0x7a
  10306d:	74 2e                	je     10309d <vprintf(char const*, __va_list_tag*)+0x4ca>
  10306f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  103072:	48 63 d0             	movsxd rdx,eax
  103075:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  10307c:	48 01 d0             	add    rax,rdx
  10307f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  103082:	3c 74                	cmp    al,0x74
  103084:	74 17                	je     10309d <vprintf(char const*, __va_list_tag*)+0x4ca>
  103086:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  103089:	48 63 d0             	movsxd rdx,eax
  10308c:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  103093:	48 01 d0             	add    rax,rdx
  103096:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  103099:	3c 4c                	cmp    al,0x4c
  10309b:	75 56                	jne    1030f3 <vprintf(char const*, __va_list_tag*)+0x520>
  10309d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  1030a0:	48 63 d0             	movsxd rdx,eax
  1030a3:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  1030aa:	48 01 d0             	add    rax,rdx
  1030ad:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  1030b0:	88 45 fa             	mov    BYTE PTR [rbp-0x6],al
  1030b3:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
  1030b7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  1030ba:	48 63 d0             	movsxd rdx,eax
  1030bd:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  1030c4:	48 01 d0             	add    rax,rdx
  1030c7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  1030ca:	3c 68                	cmp    al,0x68
  1030cc:	75 06                	jne    1030d4 <vprintf(char const*, __va_list_tag*)+0x501>
  1030ce:	c6 45 fa 48          	mov    BYTE PTR [rbp-0x6],0x48
  1030d2:	eb 1f                	jmp    1030f3 <vprintf(char const*, __va_list_tag*)+0x520>
  1030d4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  1030d7:	48 63 d0             	movsxd rdx,eax
  1030da:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  1030e1:	48 01 d0             	add    rax,rdx
  1030e4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  1030e7:	3c 6c                	cmp    al,0x6c
  1030e9:	75 08                	jne    1030f3 <vprintf(char const*, __va_list_tag*)+0x520>
  1030eb:	c6 45 fa 71          	mov    BYTE PTR [rbp-0x6],0x71
  1030ef:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
  1030f3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  1030f6:	48 63 d0             	movsxd rdx,eax
  1030f9:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  103100:	48 01 d0             	add    rax,rdx
  103103:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  103106:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
  103109:	48 8d 85 40 fe ff ff 	lea    rax,[rbp-0x1c0]
  103110:	ba 00 01 00 00       	mov    edx,0x100
  103115:	be 00 00 00 00       	mov    esi,0x0
  10311a:	48 89 c7             	mov    rdi,rax
  10311d:	e8 3e 39 00 00       	call   106a60 <memory::operations::memset(void*, unsigned char, unsigned long)>
  103122:	c7 45 dc 0a 00 00 00 	mov    DWORD PTR [rbp-0x24],0xa
  103129:	80 7d fb 6f          	cmp    BYTE PTR [rbp-0x5],0x6f
  10312d:	75 27                	jne    103156 <vprintf(char const*, __va_list_tag*)+0x583>
  10312f:	c7 45 dc 08 00 00 00 	mov    DWORD PTR [rbp-0x24],0x8
  103136:	c6 45 fb 75          	mov    BYTE PTR [rbp-0x5],0x75
  10313a:	80 7d ec 00          	cmp    BYTE PTR [rbp-0x14],0x0
  10313e:	74 16                	je     103156 <vprintf(char const*, __va_list_tag*)+0x583>
  103140:	48 8d 85 4c ff ff ff 	lea    rax,[rbp-0xb4]
  103147:	48 89 c6             	mov    rsi,rax
  10314a:	48 8d 3d c8 77 00 00 	lea    rdi,[rip+0x77c8]        # 10a919 <kernel_font+0x819>
  103151:	e8 28 fa ff ff       	call   102b7e <displayString(char const*, int*)>
  103156:	80 7d fb 70          	cmp    BYTE PTR [rbp-0x5],0x70
  10315a:	75 0f                	jne    10316b <vprintf(char const*, __va_list_tag*)+0x598>
  10315c:	c7 45 dc 10 00 00 00 	mov    DWORD PTR [rbp-0x24],0x10
  103163:	c6 45 fa 7a          	mov    BYTE PTR [rbp-0x6],0x7a
  103167:	c6 45 fb 75          	mov    BYTE PTR [rbp-0x5],0x75
  10316b:	0f be 45 fb          	movsx  eax,BYTE PTR [rbp-0x5]
  10316f:	83 e8 45             	sub    eax,0x45
  103172:	83 f8 33             	cmp    eax,0x33
  103175:	0f 87 b0 13 00 00    	ja     10452b <vprintf(char const*, __va_list_tag*)+0x1958>
  10317b:	89 c0                	mov    eax,eax
  10317d:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
  103184:	00 
  103185:	48 8d 05 dc 77 00 00 	lea    rax,[rip+0x77dc]        # 10a968 <kernel_font+0x868>
  10318c:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
  10318f:	48 98                	cdqe   
  103191:	48 8d 15 d0 77 00 00 	lea    rdx,[rip+0x77d0]        # 10a968 <kernel_font+0x868>
  103198:	48 01 d0             	add    rax,rdx
  10319b:	ff e0                	jmp    rax
  10319d:	c7 45 dc 10 00 00 00 	mov    DWORD PTR [rbp-0x24],0x10
  1031a4:	e9 82 13 00 00       	jmp    10452b <vprintf(char const*, __va_list_tag*)+0x1958>
  1031a9:	83 7d dc 0a          	cmp    DWORD PTR [rbp-0x24],0xa
  1031ad:	74 05                	je     1031b4 <vprintf(char const*, __va_list_tag*)+0x5e1>
  1031af:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  1031b2:	eb 05                	jmp    1031b9 <vprintf(char const*, __va_list_tag*)+0x5e6>
  1031b4:	b8 11 00 00 00       	mov    eax,0x11
  1031b9:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
  1031bc:	80 7d ec 00          	cmp    BYTE PTR [rbp-0x14],0x0
  1031c0:	0f 84 61 13 00 00    	je     104527 <vprintf(char const*, __va_list_tag*)+0x1954>
  1031c6:	48 8d 85 4c ff ff ff 	lea    rax,[rbp-0xb4]
  1031cd:	48 89 c6             	mov    rsi,rax
  1031d0:	48 8d 3d 44 77 00 00 	lea    rdi,[rip+0x7744]        # 10a91b <kernel_font+0x81b>
  1031d7:	e8 a2 f9 ff ff       	call   102b7e <displayString(char const*, int*)>
  1031dc:	e9 46 13 00 00       	jmp    104527 <vprintf(char const*, __va_list_tag*)+0x1954>
  1031e1:	0f be 45 fa          	movsx  eax,BYTE PTR [rbp-0x6]
  1031e5:	85 c0                	test   eax,eax
  1031e7:	74 48                	je     103231 <vprintf(char const*, __va_list_tag*)+0x65e>
  1031e9:	85 c0                	test   eax,eax
  1031eb:	0f 88 cf 05 00 00    	js     1037c0 <vprintf(char const*, __va_list_tag*)+0xbed>
  1031f1:	83 f8 7a             	cmp    eax,0x7a
  1031f4:	0f 8f c6 05 00 00    	jg     1037c0 <vprintf(char const*, __va_list_tag*)+0xbed>
  1031fa:	83 f8 48             	cmp    eax,0x48
  1031fd:	0f 8c bd 05 00 00    	jl     1037c0 <vprintf(char const*, __va_list_tag*)+0xbed>
  103203:	83 e8 48             	sub    eax,0x48
  103206:	83 f8 32             	cmp    eax,0x32
  103209:	0f 87 b1 05 00 00    	ja     1037c0 <vprintf(char const*, __va_list_tag*)+0xbed>
  10320f:	89 c0                	mov    eax,eax
  103211:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
  103218:	00 
  103219:	48 8d 05 18 78 00 00 	lea    rax,[rip+0x7818]        # 10aa38 <kernel_font+0x938>
  103220:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
  103223:	48 98                	cdqe   
  103225:	48 8d 15 0c 78 00 00 	lea    rdx,[rip+0x780c]        # 10aa38 <kernel_font+0x938>
  10322c:	48 01 d0             	add    rax,rdx
  10322f:	ff e0                	jmp    rax
  103231:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103238:	8b 00                	mov    eax,DWORD PTR [rax]
  10323a:	83 f8 2f             	cmp    eax,0x2f
  10323d:	77 30                	ja     10326f <vprintf(char const*, __va_list_tag*)+0x69c>
  10323f:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103246:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  10324a:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103251:	8b 00                	mov    eax,DWORD PTR [rax]
  103253:	89 c0                	mov    eax,eax
  103255:	48 01 d0             	add    rax,rdx
  103258:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  10325f:	8b 12                	mov    edx,DWORD PTR [rdx]
  103261:	8d 4a 08             	lea    ecx,[rdx+0x8]
  103264:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  10326b:	89 0a                	mov    DWORD PTR [rdx],ecx
  10326d:	eb 1a                	jmp    103289 <vprintf(char const*, __va_list_tag*)+0x6b6>
  10326f:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103276:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  10327a:	48 8d 48 08          	lea    rcx,[rax+0x8]
  10327e:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103285:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  103289:	8b 00                	mov    eax,DWORD PTR [rax]
  10328b:	89 45 90             	mov    DWORD PTR [rbp-0x70],eax
  10328e:	44 0f b6 45 ee       	movzx  r8d,BYTE PTR [rbp-0x12]
  103293:	0f b6 7d ef          	movzx  edi,BYTE PTR [rbp-0x11]
  103297:	44 0f b6 55 ed       	movzx  r10d,BYTE PTR [rbp-0x13]
  10329c:	0f b6 4d eb          	movzx  ecx,BYTE PTR [rbp-0x15]
  1032a0:	8b 45 90             	mov    eax,DWORD PTR [rbp-0x70]
  1032a3:	44 8b 4d f4          	mov    r9d,DWORD PTR [rbp-0xc]
  1032a7:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  1032aa:	48 8d b5 40 fe ff ff 	lea    rsi,[rbp-0x1c0]
  1032b1:	41 50                	push   r8
  1032b3:	57                   	push   rdi
  1032b4:	45 89 d0             	mov    r8d,r10d
  1032b7:	48 89 c7             	mov    rdi,rax
  1032ba:	e8 4a f4 ff ff       	call   102709 <__int_str(long, char*, int, bool, bool, int, bool, bool)>
  1032bf:	48 83 c4 10          	add    rsp,0x10
  1032c3:	48 8d 95 4c ff ff ff 	lea    rdx,[rbp-0xb4]
  1032ca:	48 8d 85 40 fe ff ff 	lea    rax,[rbp-0x1c0]
  1032d1:	48 89 d6             	mov    rsi,rdx
  1032d4:	48 89 c7             	mov    rdi,rax
  1032d7:	e8 a2 f8 ff ff       	call   102b7e <displayString(char const*, int*)>
  1032dc:	e9 e0 04 00 00       	jmp    1037c1 <vprintf(char const*, __va_list_tag*)+0xbee>
  1032e1:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  1032e8:	8b 00                	mov    eax,DWORD PTR [rax]
  1032ea:	83 f8 2f             	cmp    eax,0x2f
  1032ed:	77 30                	ja     10331f <vprintf(char const*, __va_list_tag*)+0x74c>
  1032ef:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  1032f6:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  1032fa:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103301:	8b 00                	mov    eax,DWORD PTR [rax]
  103303:	89 c0                	mov    eax,eax
  103305:	48 01 d0             	add    rax,rdx
  103308:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  10330f:	8b 12                	mov    edx,DWORD PTR [rdx]
  103311:	8d 4a 08             	lea    ecx,[rdx+0x8]
  103314:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  10331b:	89 0a                	mov    DWORD PTR [rdx],ecx
  10331d:	eb 1a                	jmp    103339 <vprintf(char const*, __va_list_tag*)+0x766>
  10331f:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103326:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  10332a:	48 8d 48 08          	lea    rcx,[rax+0x8]
  10332e:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103335:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  103339:	8b 00                	mov    eax,DWORD PTR [rax]
  10333b:	88 45 95             	mov    BYTE PTR [rbp-0x6b],al
  10333e:	44 0f b6 45 ee       	movzx  r8d,BYTE PTR [rbp-0x12]
  103343:	0f b6 7d ef          	movzx  edi,BYTE PTR [rbp-0x11]
  103347:	44 0f b6 55 ed       	movzx  r10d,BYTE PTR [rbp-0x13]
  10334c:	0f b6 4d eb          	movzx  ecx,BYTE PTR [rbp-0x15]
  103350:	0f b6 45 95          	movzx  eax,BYTE PTR [rbp-0x6b]
  103354:	44 8b 4d f4          	mov    r9d,DWORD PTR [rbp-0xc]
  103358:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  10335b:	48 8d b5 40 fe ff ff 	lea    rsi,[rbp-0x1c0]
  103362:	41 50                	push   r8
  103364:	57                   	push   rdi
  103365:	45 89 d0             	mov    r8d,r10d
  103368:	48 89 c7             	mov    rdi,rax
  10336b:	e8 99 f3 ff ff       	call   102709 <__int_str(long, char*, int, bool, bool, int, bool, bool)>
  103370:	48 83 c4 10          	add    rsp,0x10
  103374:	48 8d 95 4c ff ff ff 	lea    rdx,[rbp-0xb4]
  10337b:	48 8d 85 40 fe ff ff 	lea    rax,[rbp-0x1c0]
  103382:	48 89 d6             	mov    rsi,rdx
  103385:	48 89 c7             	mov    rdi,rax
  103388:	e8 f1 f7 ff ff       	call   102b7e <displayString(char const*, int*)>
  10338d:	e9 2f 04 00 00       	jmp    1037c1 <vprintf(char const*, __va_list_tag*)+0xbee>
  103392:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103399:	8b 00                	mov    eax,DWORD PTR [rax]
  10339b:	83 f8 2f             	cmp    eax,0x2f
  10339e:	77 30                	ja     1033d0 <vprintf(char const*, __va_list_tag*)+0x7fd>
  1033a0:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  1033a7:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  1033ab:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  1033b2:	8b 00                	mov    eax,DWORD PTR [rax]
  1033b4:	89 c0                	mov    eax,eax
  1033b6:	48 01 d0             	add    rax,rdx
  1033b9:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  1033c0:	8b 12                	mov    edx,DWORD PTR [rdx]
  1033c2:	8d 4a 08             	lea    ecx,[rdx+0x8]
  1033c5:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  1033cc:	89 0a                	mov    DWORD PTR [rdx],ecx
  1033ce:	eb 1a                	jmp    1033ea <vprintf(char const*, __va_list_tag*)+0x817>
  1033d0:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  1033d7:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  1033db:	48 8d 48 08          	lea    rcx,[rax+0x8]
  1033df:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  1033e6:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  1033ea:	8b 00                	mov    eax,DWORD PTR [rax]
  1033ec:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
  1033f0:	44 0f b6 45 ee       	movzx  r8d,BYTE PTR [rbp-0x12]
  1033f5:	0f b6 7d ef          	movzx  edi,BYTE PTR [rbp-0x11]
  1033f9:	44 0f b6 55 ed       	movzx  r10d,BYTE PTR [rbp-0x13]
  1033fe:	0f b6 4d eb          	movzx  ecx,BYTE PTR [rbp-0x15]
  103402:	0f b7 45 96          	movzx  eax,WORD PTR [rbp-0x6a]
  103406:	44 8b 4d f4          	mov    r9d,DWORD PTR [rbp-0xc]
  10340a:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  10340d:	48 8d b5 40 fe ff ff 	lea    rsi,[rbp-0x1c0]
  103414:	41 50                	push   r8
  103416:	57                   	push   rdi
  103417:	45 89 d0             	mov    r8d,r10d
  10341a:	48 89 c7             	mov    rdi,rax
  10341d:	e8 e7 f2 ff ff       	call   102709 <__int_str(long, char*, int, bool, bool, int, bool, bool)>
  103422:	48 83 c4 10          	add    rsp,0x10
  103426:	48 8d 95 4c ff ff ff 	lea    rdx,[rbp-0xb4]
  10342d:	48 8d 85 40 fe ff ff 	lea    rax,[rbp-0x1c0]
  103434:	48 89 d6             	mov    rsi,rdx
  103437:	48 89 c7             	mov    rdi,rax
  10343a:	e8 3f f7 ff ff       	call   102b7e <displayString(char const*, int*)>
  10343f:	e9 7d 03 00 00       	jmp    1037c1 <vprintf(char const*, __va_list_tag*)+0xbee>
  103444:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  10344b:	8b 00                	mov    eax,DWORD PTR [rax]
  10344d:	83 f8 2f             	cmp    eax,0x2f
  103450:	77 30                	ja     103482 <vprintf(char const*, __va_list_tag*)+0x8af>
  103452:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103459:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  10345d:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103464:	8b 00                	mov    eax,DWORD PTR [rax]
  103466:	89 c0                	mov    eax,eax
  103468:	48 01 d0             	add    rax,rdx
  10346b:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103472:	8b 12                	mov    edx,DWORD PTR [rdx]
  103474:	8d 4a 08             	lea    ecx,[rdx+0x8]
  103477:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  10347e:	89 0a                	mov    DWORD PTR [rdx],ecx
  103480:	eb 1a                	jmp    10349c <vprintf(char const*, __va_list_tag*)+0x8c9>
  103482:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103489:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  10348d:	48 8d 48 08          	lea    rcx,[rax+0x8]
  103491:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103498:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  10349c:	48 8b 00             	mov    rax,QWORD PTR [rax]
  10349f:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  1034a3:	44 0f b6 45 ee       	movzx  r8d,BYTE PTR [rbp-0x12]
  1034a8:	0f b6 7d ef          	movzx  edi,BYTE PTR [rbp-0x11]
  1034ac:	44 0f b6 55 ed       	movzx  r10d,BYTE PTR [rbp-0x13]
  1034b1:	0f b6 4d eb          	movzx  ecx,BYTE PTR [rbp-0x15]
  1034b5:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  1034b9:	44 8b 4d f4          	mov    r9d,DWORD PTR [rbp-0xc]
  1034bd:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  1034c0:	48 8d b5 40 fe ff ff 	lea    rsi,[rbp-0x1c0]
  1034c7:	41 50                	push   r8
  1034c9:	57                   	push   rdi
  1034ca:	45 89 d0             	mov    r8d,r10d
  1034cd:	48 89 c7             	mov    rdi,rax
  1034d0:	e8 34 f2 ff ff       	call   102709 <__int_str(long, char*, int, bool, bool, int, bool, bool)>
  1034d5:	48 83 c4 10          	add    rsp,0x10
  1034d9:	48 8d 95 4c ff ff ff 	lea    rdx,[rbp-0xb4]
  1034e0:	48 8d 85 40 fe ff ff 	lea    rax,[rbp-0x1c0]
  1034e7:	48 89 d6             	mov    rsi,rdx
  1034ea:	48 89 c7             	mov    rdi,rax
  1034ed:	e8 8c f6 ff ff       	call   102b7e <displayString(char const*, int*)>
  1034f2:	e9 ca 02 00 00       	jmp    1037c1 <vprintf(char const*, __va_list_tag*)+0xbee>
  1034f7:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  1034fe:	8b 00                	mov    eax,DWORD PTR [rax]
  103500:	83 f8 2f             	cmp    eax,0x2f
  103503:	77 30                	ja     103535 <vprintf(char const*, __va_list_tag*)+0x962>
  103505:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  10350c:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  103510:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103517:	8b 00                	mov    eax,DWORD PTR [rax]
  103519:	89 c0                	mov    eax,eax
  10351b:	48 01 d0             	add    rax,rdx
  10351e:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103525:	8b 12                	mov    edx,DWORD PTR [rdx]
  103527:	8d 4a 08             	lea    ecx,[rdx+0x8]
  10352a:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103531:	89 0a                	mov    DWORD PTR [rdx],ecx
  103533:	eb 1a                	jmp    10354f <vprintf(char const*, __va_list_tag*)+0x97c>
  103535:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  10353c:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  103540:	48 8d 48 08          	lea    rcx,[rax+0x8]
  103544:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  10354b:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  10354f:	48 8b 00             	mov    rax,QWORD PTR [rax]
  103552:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
  103556:	44 0f b6 45 ee       	movzx  r8d,BYTE PTR [rbp-0x12]
  10355b:	0f b6 7d ef          	movzx  edi,BYTE PTR [rbp-0x11]
  10355f:	44 0f b6 55 ed       	movzx  r10d,BYTE PTR [rbp-0x13]
  103564:	0f b6 4d eb          	movzx  ecx,BYTE PTR [rbp-0x15]
  103568:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  10356c:	44 8b 4d f4          	mov    r9d,DWORD PTR [rbp-0xc]
  103570:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  103573:	48 8d b5 40 fe ff ff 	lea    rsi,[rbp-0x1c0]
  10357a:	41 50                	push   r8
  10357c:	57                   	push   rdi
  10357d:	45 89 d0             	mov    r8d,r10d
  103580:	48 89 c7             	mov    rdi,rax
  103583:	e8 81 f1 ff ff       	call   102709 <__int_str(long, char*, int, bool, bool, int, bool, bool)>
  103588:	48 83 c4 10          	add    rsp,0x10
  10358c:	48 8d 95 4c ff ff ff 	lea    rdx,[rbp-0xb4]
  103593:	48 8d 85 40 fe ff ff 	lea    rax,[rbp-0x1c0]
  10359a:	48 89 d6             	mov    rsi,rdx
  10359d:	48 89 c7             	mov    rdi,rax
  1035a0:	e8 d9 f5 ff ff       	call   102b7e <displayString(char const*, int*)>
  1035a5:	e9 17 02 00 00       	jmp    1037c1 <vprintf(char const*, __va_list_tag*)+0xbee>
  1035aa:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  1035b1:	8b 00                	mov    eax,DWORD PTR [rax]
  1035b3:	83 f8 2f             	cmp    eax,0x2f
  1035b6:	77 30                	ja     1035e8 <vprintf(char const*, __va_list_tag*)+0xa15>
  1035b8:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  1035bf:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  1035c3:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  1035ca:	8b 00                	mov    eax,DWORD PTR [rax]
  1035cc:	89 c0                	mov    eax,eax
  1035ce:	48 01 d0             	add    rax,rdx
  1035d1:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  1035d8:	8b 12                	mov    edx,DWORD PTR [rdx]
  1035da:	8d 4a 08             	lea    ecx,[rdx+0x8]
  1035dd:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  1035e4:	89 0a                	mov    DWORD PTR [rdx],ecx
  1035e6:	eb 1a                	jmp    103602 <vprintf(char const*, __va_list_tag*)+0xa2f>
  1035e8:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  1035ef:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  1035f3:	48 8d 48 08          	lea    rcx,[rax+0x8]
  1035f7:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  1035fe:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  103602:	48 8b 00             	mov    rax,QWORD PTR [rax]
  103605:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
  103609:	44 0f b6 45 ee       	movzx  r8d,BYTE PTR [rbp-0x12]
  10360e:	0f b6 7d ef          	movzx  edi,BYTE PTR [rbp-0x11]
  103612:	44 0f b6 55 ed       	movzx  r10d,BYTE PTR [rbp-0x13]
  103617:	0f b6 4d eb          	movzx  ecx,BYTE PTR [rbp-0x15]
  10361b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  10361f:	44 8b 4d f4          	mov    r9d,DWORD PTR [rbp-0xc]
  103623:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  103626:	48 8d b5 40 fe ff ff 	lea    rsi,[rbp-0x1c0]
  10362d:	41 50                	push   r8
  10362f:	57                   	push   rdi
  103630:	45 89 d0             	mov    r8d,r10d
  103633:	48 89 c7             	mov    rdi,rax
  103636:	e8 ce f0 ff ff       	call   102709 <__int_str(long, char*, int, bool, bool, int, bool, bool)>
  10363b:	48 83 c4 10          	add    rsp,0x10
  10363f:	48 8d 95 4c ff ff ff 	lea    rdx,[rbp-0xb4]
  103646:	48 8d 85 40 fe ff ff 	lea    rax,[rbp-0x1c0]
  10364d:	48 89 d6             	mov    rsi,rdx
  103650:	48 89 c7             	mov    rdi,rax
  103653:	e8 26 f5 ff ff       	call   102b7e <displayString(char const*, int*)>
  103658:	e9 64 01 00 00       	jmp    1037c1 <vprintf(char const*, __va_list_tag*)+0xbee>
  10365d:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103664:	8b 00                	mov    eax,DWORD PTR [rax]
  103666:	83 f8 2f             	cmp    eax,0x2f
  103669:	77 30                	ja     10369b <vprintf(char const*, __va_list_tag*)+0xac8>
  10366b:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103672:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  103676:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  10367d:	8b 00                	mov    eax,DWORD PTR [rax]
  10367f:	89 c0                	mov    eax,eax
  103681:	48 01 d0             	add    rax,rdx
  103684:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  10368b:	8b 12                	mov    edx,DWORD PTR [rdx]
  10368d:	8d 4a 08             	lea    ecx,[rdx+0x8]
  103690:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103697:	89 0a                	mov    DWORD PTR [rdx],ecx
  103699:	eb 1a                	jmp    1036b5 <vprintf(char const*, __va_list_tag*)+0xae2>
  10369b:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  1036a2:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  1036a6:	48 8d 48 08          	lea    rcx,[rax+0x8]
  1036aa:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  1036b1:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  1036b5:	48 8b 00             	mov    rax,QWORD PTR [rax]
  1036b8:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  1036bc:	44 0f b6 45 ee       	movzx  r8d,BYTE PTR [rbp-0x12]
  1036c1:	0f b6 7d ef          	movzx  edi,BYTE PTR [rbp-0x11]
  1036c5:	44 0f b6 55 ed       	movzx  r10d,BYTE PTR [rbp-0x13]
  1036ca:	0f b6 4d eb          	movzx  ecx,BYTE PTR [rbp-0x15]
  1036ce:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  1036d2:	44 8b 4d f4          	mov    r9d,DWORD PTR [rbp-0xc]
  1036d6:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  1036d9:	48 8d b5 40 fe ff ff 	lea    rsi,[rbp-0x1c0]
  1036e0:	41 50                	push   r8
  1036e2:	57                   	push   rdi
  1036e3:	45 89 d0             	mov    r8d,r10d
  1036e6:	48 89 c7             	mov    rdi,rax
  1036e9:	e8 1b f0 ff ff       	call   102709 <__int_str(long, char*, int, bool, bool, int, bool, bool)>
  1036ee:	48 83 c4 10          	add    rsp,0x10
  1036f2:	48 8d 95 4c ff ff ff 	lea    rdx,[rbp-0xb4]
  1036f9:	48 8d 85 40 fe ff ff 	lea    rax,[rbp-0x1c0]
  103700:	48 89 d6             	mov    rsi,rdx
  103703:	48 89 c7             	mov    rdi,rax
  103706:	e8 73 f4 ff ff       	call   102b7e <displayString(char const*, int*)>
  10370b:	e9 b1 00 00 00       	jmp    1037c1 <vprintf(char const*, __va_list_tag*)+0xbee>
  103710:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103717:	8b 00                	mov    eax,DWORD PTR [rax]
  103719:	83 f8 2f             	cmp    eax,0x2f
  10371c:	77 30                	ja     10374e <vprintf(char const*, __va_list_tag*)+0xb7b>
  10371e:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103725:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  103729:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103730:	8b 00                	mov    eax,DWORD PTR [rax]
  103732:	89 c0                	mov    eax,eax
  103734:	48 01 d0             	add    rax,rdx
  103737:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  10373e:	8b 12                	mov    edx,DWORD PTR [rdx]
  103740:	8d 4a 08             	lea    ecx,[rdx+0x8]
  103743:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  10374a:	89 0a                	mov    DWORD PTR [rdx],ecx
  10374c:	eb 1a                	jmp    103768 <vprintf(char const*, __va_list_tag*)+0xb95>
  10374e:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103755:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  103759:	48 8d 48 08          	lea    rcx,[rax+0x8]
  10375d:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103764:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  103768:	48 8b 00             	mov    rax,QWORD PTR [rax]
  10376b:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  10376f:	44 0f b6 45 ee       	movzx  r8d,BYTE PTR [rbp-0x12]
  103774:	0f b6 7d ef          	movzx  edi,BYTE PTR [rbp-0x11]
  103778:	44 0f b6 55 ed       	movzx  r10d,BYTE PTR [rbp-0x13]
  10377d:	0f b6 4d eb          	movzx  ecx,BYTE PTR [rbp-0x15]
  103781:	44 8b 4d f4          	mov    r9d,DWORD PTR [rbp-0xc]
  103785:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  103788:	48 8d b5 40 fe ff ff 	lea    rsi,[rbp-0x1c0]
  10378f:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  103793:	41 50                	push   r8
  103795:	57                   	push   rdi
  103796:	45 89 d0             	mov    r8d,r10d
  103799:	48 89 c7             	mov    rdi,rax
  10379c:	e8 68 ef ff ff       	call   102709 <__int_str(long, char*, int, bool, bool, int, bool, bool)>
  1037a1:	48 83 c4 10          	add    rsp,0x10
  1037a5:	48 8d 95 4c ff ff ff 	lea    rdx,[rbp-0xb4]
  1037ac:	48 8d 85 40 fe ff ff 	lea    rax,[rbp-0x1c0]
  1037b3:	48 89 d6             	mov    rsi,rdx
  1037b6:	48 89 c7             	mov    rdi,rax
  1037b9:	e8 c0 f3 ff ff       	call   102b7e <displayString(char const*, int*)>
  1037be:	eb 01                	jmp    1037c1 <vprintf(char const*, __va_list_tag*)+0xbee>
  1037c0:	90                   	nop
  1037c1:	e9 65 0d 00 00       	jmp    10452b <vprintf(char const*, __va_list_tag*)+0x1958>
  1037c6:	0f be 45 fa          	movsx  eax,BYTE PTR [rbp-0x6]
  1037ca:	85 c0                	test   eax,eax
  1037cc:	74 48                	je     103816 <vprintf(char const*, __va_list_tag*)+0xc43>
  1037ce:	85 c0                	test   eax,eax
  1037d0:	0f 88 fd 05 00 00    	js     103dd3 <vprintf(char const*, __va_list_tag*)+0x1200>
  1037d6:	83 f8 7a             	cmp    eax,0x7a
  1037d9:	0f 8f f4 05 00 00    	jg     103dd3 <vprintf(char const*, __va_list_tag*)+0x1200>
  1037df:	83 f8 48             	cmp    eax,0x48
  1037e2:	0f 8c eb 05 00 00    	jl     103dd3 <vprintf(char const*, __va_list_tag*)+0x1200>
  1037e8:	83 e8 48             	sub    eax,0x48
  1037eb:	83 f8 32             	cmp    eax,0x32
  1037ee:	0f 87 df 05 00 00    	ja     103dd3 <vprintf(char const*, __va_list_tag*)+0x1200>
  1037f4:	89 c0                	mov    eax,eax
  1037f6:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
  1037fd:	00 
  1037fe:	48 8d 05 ff 72 00 00 	lea    rax,[rip+0x72ff]        # 10ab04 <kernel_font+0xa04>
  103805:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
  103808:	48 98                	cdqe   
  10380a:	48 8d 15 f3 72 00 00 	lea    rdx,[rip+0x72f3]        # 10ab04 <kernel_font+0xa04>
  103811:	48 01 d0             	add    rax,rdx
  103814:	ff e0                	jmp    rax
  103816:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  10381d:	8b 00                	mov    eax,DWORD PTR [rax]
  10381f:	83 f8 2f             	cmp    eax,0x2f
  103822:	77 30                	ja     103854 <vprintf(char const*, __va_list_tag*)+0xc81>
  103824:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  10382b:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  10382f:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103836:	8b 00                	mov    eax,DWORD PTR [rax]
  103838:	89 c0                	mov    eax,eax
  10383a:	48 01 d0             	add    rax,rdx
  10383d:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103844:	8b 12                	mov    edx,DWORD PTR [rdx]
  103846:	8d 4a 08             	lea    ecx,[rdx+0x8]
  103849:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103850:	89 0a                	mov    DWORD PTR [rdx],ecx
  103852:	eb 1a                	jmp    10386e <vprintf(char const*, __va_list_tag*)+0xc9b>
  103854:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  10385b:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  10385f:	48 8d 48 08          	lea    rcx,[rax+0x8]
  103863:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  10386a:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  10386e:	8b 00                	mov    eax,DWORD PTR [rax]
  103870:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
  103876:	44 0f b6 45 ee       	movzx  r8d,BYTE PTR [rbp-0x12]
  10387b:	0f b6 7d ef          	movzx  edi,BYTE PTR [rbp-0x11]
  10387f:	44 0f b6 55 ed       	movzx  r10d,BYTE PTR [rbp-0x13]
  103884:	0f b6 4d eb          	movzx  ecx,BYTE PTR [rbp-0x15]
  103888:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
  10388e:	48 98                	cdqe   
  103890:	44 8b 4d f4          	mov    r9d,DWORD PTR [rbp-0xc]
  103894:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  103897:	48 8d b5 40 fe ff ff 	lea    rsi,[rbp-0x1c0]
  10389e:	41 50                	push   r8
  1038a0:	57                   	push   rdi
  1038a1:	45 89 d0             	mov    r8d,r10d
  1038a4:	48 89 c7             	mov    rdi,rax
  1038a7:	e8 5d ee ff ff       	call   102709 <__int_str(long, char*, int, bool, bool, int, bool, bool)>
  1038ac:	48 83 c4 10          	add    rsp,0x10
  1038b0:	48 8d 95 4c ff ff ff 	lea    rdx,[rbp-0xb4]
  1038b7:	48 8d 85 40 fe ff ff 	lea    rax,[rbp-0x1c0]
  1038be:	48 89 d6             	mov    rsi,rdx
  1038c1:	48 89 c7             	mov    rdi,rax
  1038c4:	e8 b5 f2 ff ff       	call   102b7e <displayString(char const*, int*)>
  1038c9:	e9 06 05 00 00       	jmp    103dd4 <vprintf(char const*, __va_list_tag*)+0x1201>
  1038ce:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  1038d5:	8b 00                	mov    eax,DWORD PTR [rax]
  1038d7:	83 f8 2f             	cmp    eax,0x2f
  1038da:	77 30                	ja     10390c <vprintf(char const*, __va_list_tag*)+0xd39>
  1038dc:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  1038e3:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  1038e7:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  1038ee:	8b 00                	mov    eax,DWORD PTR [rax]
  1038f0:	89 c0                	mov    eax,eax
  1038f2:	48 01 d0             	add    rax,rdx
  1038f5:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  1038fc:	8b 12                	mov    edx,DWORD PTR [rdx]
  1038fe:	8d 4a 08             	lea    ecx,[rdx+0x8]
  103901:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103908:	89 0a                	mov    DWORD PTR [rdx],ecx
  10390a:	eb 1a                	jmp    103926 <vprintf(char const*, __va_list_tag*)+0xd53>
  10390c:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103913:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  103917:	48 8d 48 08          	lea    rcx,[rax+0x8]
  10391b:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103922:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  103926:	8b 00                	mov    eax,DWORD PTR [rax]
  103928:	88 85 5d ff ff ff    	mov    BYTE PTR [rbp-0xa3],al
  10392e:	44 0f b6 45 ee       	movzx  r8d,BYTE PTR [rbp-0x12]
  103933:	0f b6 7d ef          	movzx  edi,BYTE PTR [rbp-0x11]
  103937:	44 0f b6 55 ed       	movzx  r10d,BYTE PTR [rbp-0x13]
  10393c:	0f b6 4d eb          	movzx  ecx,BYTE PTR [rbp-0x15]
  103940:	48 0f be 85 5d ff ff 	movsx  rax,BYTE PTR [rbp-0xa3]
  103947:	ff 
  103948:	44 8b 4d f4          	mov    r9d,DWORD PTR [rbp-0xc]
  10394c:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  10394f:	48 8d b5 40 fe ff ff 	lea    rsi,[rbp-0x1c0]
  103956:	41 50                	push   r8
  103958:	57                   	push   rdi
  103959:	45 89 d0             	mov    r8d,r10d
  10395c:	48 89 c7             	mov    rdi,rax
  10395f:	e8 a5 ed ff ff       	call   102709 <__int_str(long, char*, int, bool, bool, int, bool, bool)>
  103964:	48 83 c4 10          	add    rsp,0x10
  103968:	48 8d 95 4c ff ff ff 	lea    rdx,[rbp-0xb4]
  10396f:	48 8d 85 40 fe ff ff 	lea    rax,[rbp-0x1c0]
  103976:	48 89 d6             	mov    rsi,rdx
  103979:	48 89 c7             	mov    rdi,rax
  10397c:	e8 fd f1 ff ff       	call   102b7e <displayString(char const*, int*)>
  103981:	e9 4e 04 00 00       	jmp    103dd4 <vprintf(char const*, __va_list_tag*)+0x1201>
  103986:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  10398d:	8b 00                	mov    eax,DWORD PTR [rax]
  10398f:	83 f8 2f             	cmp    eax,0x2f
  103992:	77 30                	ja     1039c4 <vprintf(char const*, __va_list_tag*)+0xdf1>
  103994:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  10399b:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  10399f:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  1039a6:	8b 00                	mov    eax,DWORD PTR [rax]
  1039a8:	89 c0                	mov    eax,eax
  1039aa:	48 01 d0             	add    rax,rdx
  1039ad:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  1039b4:	8b 12                	mov    edx,DWORD PTR [rdx]
  1039b6:	8d 4a 08             	lea    ecx,[rdx+0x8]
  1039b9:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  1039c0:	89 0a                	mov    DWORD PTR [rdx],ecx
  1039c2:	eb 1a                	jmp    1039de <vprintf(char const*, __va_list_tag*)+0xe0b>
  1039c4:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  1039cb:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  1039cf:	48 8d 48 08          	lea    rcx,[rax+0x8]
  1039d3:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  1039da:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  1039de:	8b 00                	mov    eax,DWORD PTR [rax]
  1039e0:	66 89 85 5e ff ff ff 	mov    WORD PTR [rbp-0xa2],ax
  1039e7:	44 0f b6 45 ee       	movzx  r8d,BYTE PTR [rbp-0x12]
  1039ec:	0f b6 7d ef          	movzx  edi,BYTE PTR [rbp-0x11]
  1039f0:	44 0f b6 55 ed       	movzx  r10d,BYTE PTR [rbp-0x13]
  1039f5:	0f b6 4d eb          	movzx  ecx,BYTE PTR [rbp-0x15]
  1039f9:	48 0f bf 85 5e ff ff 	movsx  rax,WORD PTR [rbp-0xa2]
  103a00:	ff 
  103a01:	44 8b 4d f4          	mov    r9d,DWORD PTR [rbp-0xc]
  103a05:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  103a08:	48 8d b5 40 fe ff ff 	lea    rsi,[rbp-0x1c0]
  103a0f:	41 50                	push   r8
  103a11:	57                   	push   rdi
  103a12:	45 89 d0             	mov    r8d,r10d
  103a15:	48 89 c7             	mov    rdi,rax
  103a18:	e8 ec ec ff ff       	call   102709 <__int_str(long, char*, int, bool, bool, int, bool, bool)>
  103a1d:	48 83 c4 10          	add    rsp,0x10
  103a21:	48 8d 95 4c ff ff ff 	lea    rdx,[rbp-0xb4]
  103a28:	48 8d 85 40 fe ff ff 	lea    rax,[rbp-0x1c0]
  103a2f:	48 89 d6             	mov    rsi,rdx
  103a32:	48 89 c7             	mov    rdi,rax
  103a35:	e8 44 f1 ff ff       	call   102b7e <displayString(char const*, int*)>
  103a3a:	e9 95 03 00 00       	jmp    103dd4 <vprintf(char const*, __va_list_tag*)+0x1201>
  103a3f:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103a46:	8b 00                	mov    eax,DWORD PTR [rax]
  103a48:	83 f8 2f             	cmp    eax,0x2f
  103a4b:	77 30                	ja     103a7d <vprintf(char const*, __va_list_tag*)+0xeaa>
  103a4d:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103a54:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  103a58:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103a5f:	8b 00                	mov    eax,DWORD PTR [rax]
  103a61:	89 c0                	mov    eax,eax
  103a63:	48 01 d0             	add    rax,rdx
  103a66:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103a6d:	8b 12                	mov    edx,DWORD PTR [rdx]
  103a6f:	8d 4a 08             	lea    ecx,[rdx+0x8]
  103a72:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103a79:	89 0a                	mov    DWORD PTR [rdx],ecx
  103a7b:	eb 1a                	jmp    103a97 <vprintf(char const*, __va_list_tag*)+0xec4>
  103a7d:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103a84:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  103a88:	48 8d 48 08          	lea    rcx,[rax+0x8]
  103a8c:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103a93:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  103a97:	48 8b 00             	mov    rax,QWORD PTR [rax]
  103a9a:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  103aa1:	44 0f b6 45 ee       	movzx  r8d,BYTE PTR [rbp-0x12]
  103aa6:	0f b6 7d ef          	movzx  edi,BYTE PTR [rbp-0x11]
  103aaa:	44 0f b6 55 ed       	movzx  r10d,BYTE PTR [rbp-0x13]
  103aaf:	0f b6 4d eb          	movzx  ecx,BYTE PTR [rbp-0x15]
  103ab3:	44 8b 4d f4          	mov    r9d,DWORD PTR [rbp-0xc]
  103ab7:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  103aba:	48 8d b5 40 fe ff ff 	lea    rsi,[rbp-0x1c0]
  103ac1:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  103ac8:	41 50                	push   r8
  103aca:	57                   	push   rdi
  103acb:	45 89 d0             	mov    r8d,r10d
  103ace:	48 89 c7             	mov    rdi,rax
  103ad1:	e8 33 ec ff ff       	call   102709 <__int_str(long, char*, int, bool, bool, int, bool, bool)>
  103ad6:	48 83 c4 10          	add    rsp,0x10
  103ada:	48 8d 95 4c ff ff ff 	lea    rdx,[rbp-0xb4]
  103ae1:	48 8d 85 40 fe ff ff 	lea    rax,[rbp-0x1c0]
  103ae8:	48 89 d6             	mov    rsi,rdx
  103aeb:	48 89 c7             	mov    rdi,rax
  103aee:	e8 8b f0 ff ff       	call   102b7e <displayString(char const*, int*)>
  103af3:	e9 dc 02 00 00       	jmp    103dd4 <vprintf(char const*, __va_list_tag*)+0x1201>
  103af8:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103aff:	8b 00                	mov    eax,DWORD PTR [rax]
  103b01:	83 f8 2f             	cmp    eax,0x2f
  103b04:	77 30                	ja     103b36 <vprintf(char const*, __va_list_tag*)+0xf63>
  103b06:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103b0d:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  103b11:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103b18:	8b 00                	mov    eax,DWORD PTR [rax]
  103b1a:	89 c0                	mov    eax,eax
  103b1c:	48 01 d0             	add    rax,rdx
  103b1f:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103b26:	8b 12                	mov    edx,DWORD PTR [rdx]
  103b28:	8d 4a 08             	lea    ecx,[rdx+0x8]
  103b2b:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103b32:	89 0a                	mov    DWORD PTR [rdx],ecx
  103b34:	eb 1a                	jmp    103b50 <vprintf(char const*, __va_list_tag*)+0xf7d>
  103b36:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103b3d:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  103b41:	48 8d 48 08          	lea    rcx,[rax+0x8]
  103b45:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103b4c:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  103b50:	48 8b 00             	mov    rax,QWORD PTR [rax]
  103b53:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  103b5a:	44 0f b6 45 ee       	movzx  r8d,BYTE PTR [rbp-0x12]
  103b5f:	0f b6 7d ef          	movzx  edi,BYTE PTR [rbp-0x11]
  103b63:	44 0f b6 55 ed       	movzx  r10d,BYTE PTR [rbp-0x13]
  103b68:	0f b6 4d eb          	movzx  ecx,BYTE PTR [rbp-0x15]
  103b6c:	44 8b 4d f4          	mov    r9d,DWORD PTR [rbp-0xc]
  103b70:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  103b73:	48 8d b5 40 fe ff ff 	lea    rsi,[rbp-0x1c0]
  103b7a:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  103b81:	41 50                	push   r8
  103b83:	57                   	push   rdi
  103b84:	45 89 d0             	mov    r8d,r10d
  103b87:	48 89 c7             	mov    rdi,rax
  103b8a:	e8 7a eb ff ff       	call   102709 <__int_str(long, char*, int, bool, bool, int, bool, bool)>
  103b8f:	48 83 c4 10          	add    rsp,0x10
  103b93:	48 8d 95 4c ff ff ff 	lea    rdx,[rbp-0xb4]
  103b9a:	48 8d 85 40 fe ff ff 	lea    rax,[rbp-0x1c0]
  103ba1:	48 89 d6             	mov    rsi,rdx
  103ba4:	48 89 c7             	mov    rdi,rax
  103ba7:	e8 d2 ef ff ff       	call   102b7e <displayString(char const*, int*)>
  103bac:	e9 23 02 00 00       	jmp    103dd4 <vprintf(char const*, __va_list_tag*)+0x1201>
  103bb1:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103bb8:	8b 00                	mov    eax,DWORD PTR [rax]
  103bba:	83 f8 2f             	cmp    eax,0x2f
  103bbd:	77 30                	ja     103bef <vprintf(char const*, __va_list_tag*)+0x101c>
  103bbf:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103bc6:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  103bca:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103bd1:	8b 00                	mov    eax,DWORD PTR [rax]
  103bd3:	89 c0                	mov    eax,eax
  103bd5:	48 01 d0             	add    rax,rdx
  103bd8:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103bdf:	8b 12                	mov    edx,DWORD PTR [rdx]
  103be1:	8d 4a 08             	lea    ecx,[rdx+0x8]
  103be4:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103beb:	89 0a                	mov    DWORD PTR [rdx],ecx
  103bed:	eb 1a                	jmp    103c09 <vprintf(char const*, __va_list_tag*)+0x1036>
  103bef:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103bf6:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  103bfa:	48 8d 48 08          	lea    rcx,[rax+0x8]
  103bfe:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103c05:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  103c09:	48 8b 00             	mov    rax,QWORD PTR [rax]
  103c0c:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
  103c13:	44 0f b6 45 ee       	movzx  r8d,BYTE PTR [rbp-0x12]
  103c18:	0f b6 7d ef          	movzx  edi,BYTE PTR [rbp-0x11]
  103c1c:	44 0f b6 55 ed       	movzx  r10d,BYTE PTR [rbp-0x13]
  103c21:	0f b6 4d eb          	movzx  ecx,BYTE PTR [rbp-0x15]
  103c25:	44 8b 4d f4          	mov    r9d,DWORD PTR [rbp-0xc]
  103c29:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  103c2c:	48 8d b5 40 fe ff ff 	lea    rsi,[rbp-0x1c0]
  103c33:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  103c3a:	41 50                	push   r8
  103c3c:	57                   	push   rdi
  103c3d:	45 89 d0             	mov    r8d,r10d
  103c40:	48 89 c7             	mov    rdi,rax
  103c43:	e8 c1 ea ff ff       	call   102709 <__int_str(long, char*, int, bool, bool, int, bool, bool)>
  103c48:	48 83 c4 10          	add    rsp,0x10
  103c4c:	48 8d 95 4c ff ff ff 	lea    rdx,[rbp-0xb4]
  103c53:	48 8d 85 40 fe ff ff 	lea    rax,[rbp-0x1c0]
  103c5a:	48 89 d6             	mov    rsi,rdx
  103c5d:	48 89 c7             	mov    rdi,rax
  103c60:	e8 19 ef ff ff       	call   102b7e <displayString(char const*, int*)>
  103c65:	e9 6a 01 00 00       	jmp    103dd4 <vprintf(char const*, __va_list_tag*)+0x1201>
  103c6a:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103c71:	8b 00                	mov    eax,DWORD PTR [rax]
  103c73:	83 f8 2f             	cmp    eax,0x2f
  103c76:	77 30                	ja     103ca8 <vprintf(char const*, __va_list_tag*)+0x10d5>
  103c78:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103c7f:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  103c83:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103c8a:	8b 00                	mov    eax,DWORD PTR [rax]
  103c8c:	89 c0                	mov    eax,eax
  103c8e:	48 01 d0             	add    rax,rdx
  103c91:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103c98:	8b 12                	mov    edx,DWORD PTR [rdx]
  103c9a:	8d 4a 08             	lea    ecx,[rdx+0x8]
  103c9d:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103ca4:	89 0a                	mov    DWORD PTR [rdx],ecx
  103ca6:	eb 1a                	jmp    103cc2 <vprintf(char const*, __va_list_tag*)+0x10ef>
  103ca8:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103caf:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  103cb3:	48 8d 48 08          	lea    rcx,[rax+0x8]
  103cb7:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103cbe:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  103cc2:	48 8b 00             	mov    rax,QWORD PTR [rax]
  103cc5:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  103cc9:	44 0f b6 45 ee       	movzx  r8d,BYTE PTR [rbp-0x12]
  103cce:	0f b6 7d ef          	movzx  edi,BYTE PTR [rbp-0x11]
  103cd2:	44 0f b6 55 ed       	movzx  r10d,BYTE PTR [rbp-0x13]
  103cd7:	0f b6 4d eb          	movzx  ecx,BYTE PTR [rbp-0x15]
  103cdb:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  103cdf:	44 8b 4d f4          	mov    r9d,DWORD PTR [rbp-0xc]
  103ce3:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  103ce6:	48 8d b5 40 fe ff ff 	lea    rsi,[rbp-0x1c0]
  103ced:	41 50                	push   r8
  103cef:	57                   	push   rdi
  103cf0:	45 89 d0             	mov    r8d,r10d
  103cf3:	48 89 c7             	mov    rdi,rax
  103cf6:	e8 0e ea ff ff       	call   102709 <__int_str(long, char*, int, bool, bool, int, bool, bool)>
  103cfb:	48 83 c4 10          	add    rsp,0x10
  103cff:	48 8d 95 4c ff ff ff 	lea    rdx,[rbp-0xb4]
  103d06:	48 8d 85 40 fe ff ff 	lea    rax,[rbp-0x1c0]
  103d0d:	48 89 d6             	mov    rsi,rdx
  103d10:	48 89 c7             	mov    rdi,rax
  103d13:	e8 66 ee ff ff       	call   102b7e <displayString(char const*, int*)>
  103d18:	e9 b7 00 00 00       	jmp    103dd4 <vprintf(char const*, __va_list_tag*)+0x1201>
  103d1d:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103d24:	8b 00                	mov    eax,DWORD PTR [rax]
  103d26:	83 f8 2f             	cmp    eax,0x2f
  103d29:	77 30                	ja     103d5b <vprintf(char const*, __va_list_tag*)+0x1188>
  103d2b:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103d32:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  103d36:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103d3d:	8b 00                	mov    eax,DWORD PTR [rax]
  103d3f:	89 c0                	mov    eax,eax
  103d41:	48 01 d0             	add    rax,rdx
  103d44:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103d4b:	8b 12                	mov    edx,DWORD PTR [rdx]
  103d4d:	8d 4a 08             	lea    ecx,[rdx+0x8]
  103d50:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103d57:	89 0a                	mov    DWORD PTR [rdx],ecx
  103d59:	eb 1a                	jmp    103d75 <vprintf(char const*, __va_list_tag*)+0x11a2>
  103d5b:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103d62:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  103d66:	48 8d 48 08          	lea    rcx,[rax+0x8]
  103d6a:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103d71:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  103d75:	48 8b 00             	mov    rax,QWORD PTR [rax]
  103d78:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
  103d7f:	44 0f b6 45 ee       	movzx  r8d,BYTE PTR [rbp-0x12]
  103d84:	0f b6 7d ef          	movzx  edi,BYTE PTR [rbp-0x11]
  103d88:	44 0f b6 55 ed       	movzx  r10d,BYTE PTR [rbp-0x13]
  103d8d:	0f b6 4d eb          	movzx  ecx,BYTE PTR [rbp-0x15]
  103d91:	44 8b 4d f4          	mov    r9d,DWORD PTR [rbp-0xc]
  103d95:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  103d98:	48 8d b5 40 fe ff ff 	lea    rsi,[rbp-0x1c0]
  103d9f:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  103da6:	41 50                	push   r8
  103da8:	57                   	push   rdi
  103da9:	45 89 d0             	mov    r8d,r10d
  103dac:	48 89 c7             	mov    rdi,rax
  103daf:	e8 55 e9 ff ff       	call   102709 <__int_str(long, char*, int, bool, bool, int, bool, bool)>
  103db4:	48 83 c4 10          	add    rsp,0x10
  103db8:	48 8d 95 4c ff ff ff 	lea    rdx,[rbp-0xb4]
  103dbf:	48 8d 85 40 fe ff ff 	lea    rax,[rbp-0x1c0]
  103dc6:	48 89 d6             	mov    rsi,rdx
  103dc9:	48 89 c7             	mov    rdi,rax
  103dcc:	e8 ad ed ff ff       	call   102b7e <displayString(char const*, int*)>
  103dd1:	eb 01                	jmp    103dd4 <vprintf(char const*, __va_list_tag*)+0x1201>
  103dd3:	90                   	nop
  103dd4:	e9 52 07 00 00       	jmp    10452b <vprintf(char const*, __va_list_tag*)+0x1958>
  103dd9:	80 7d fa 6c          	cmp    BYTE PTR [rbp-0x6],0x6c
  103ddd:	75 74                	jne    103e53 <vprintf(char const*, __va_list_tag*)+0x1280>
  103ddf:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103de6:	8b 00                	mov    eax,DWORD PTR [rax]
  103de8:	83 f8 2f             	cmp    eax,0x2f
  103deb:	77 30                	ja     103e1d <vprintf(char const*, __va_list_tag*)+0x124a>
  103ded:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103df4:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  103df8:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103dff:	8b 00                	mov    eax,DWORD PTR [rax]
  103e01:	89 c0                	mov    eax,eax
  103e03:	48 01 d0             	add    rax,rdx
  103e06:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103e0d:	8b 12                	mov    edx,DWORD PTR [rdx]
  103e0f:	8d 4a 08             	lea    ecx,[rdx+0x8]
  103e12:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103e19:	89 0a                	mov    DWORD PTR [rdx],ecx
  103e1b:	eb 1a                	jmp    103e37 <vprintf(char const*, __va_list_tag*)+0x1264>
  103e1d:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103e24:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  103e28:	48 8d 48 08          	lea    rcx,[rax+0x8]
  103e2c:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103e33:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  103e37:	48 8b 00             	mov    rax,QWORD PTR [rax]
  103e3a:	0f be c0             	movsx  eax,al
  103e3d:	48 8d 95 4c ff ff ff 	lea    rdx,[rbp-0xb4]
  103e44:	48 89 d6             	mov    rsi,rdx
  103e47:	89 c7                	mov    edi,eax
  103e49:	e8 f2 ec ff ff       	call   102b40 <displayCharacter(char, int*)>
  103e4e:	e9 d8 06 00 00       	jmp    10452b <vprintf(char const*, __va_list_tag*)+0x1958>
  103e53:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103e5a:	8b 00                	mov    eax,DWORD PTR [rax]
  103e5c:	83 f8 2f             	cmp    eax,0x2f
  103e5f:	77 30                	ja     103e91 <vprintf(char const*, __va_list_tag*)+0x12be>
  103e61:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103e68:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  103e6c:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103e73:	8b 00                	mov    eax,DWORD PTR [rax]
  103e75:	89 c0                	mov    eax,eax
  103e77:	48 01 d0             	add    rax,rdx
  103e7a:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103e81:	8b 12                	mov    edx,DWORD PTR [rdx]
  103e83:	8d 4a 08             	lea    ecx,[rdx+0x8]
  103e86:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103e8d:	89 0a                	mov    DWORD PTR [rdx],ecx
  103e8f:	eb 1a                	jmp    103eab <vprintf(char const*, __va_list_tag*)+0x12d8>
  103e91:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103e98:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  103e9c:	48 8d 48 08          	lea    rcx,[rax+0x8]
  103ea0:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103ea7:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  103eab:	8b 00                	mov    eax,DWORD PTR [rax]
  103ead:	0f be c0             	movsx  eax,al
  103eb0:	48 8d 95 4c ff ff ff 	lea    rdx,[rbp-0xb4]
  103eb7:	48 89 d6             	mov    rsi,rdx
  103eba:	89 c7                	mov    edi,eax
  103ebc:	e8 7f ec ff ff       	call   102b40 <displayCharacter(char, int*)>
  103ec1:	e9 65 06 00 00       	jmp    10452b <vprintf(char const*, __va_list_tag*)+0x1958>
  103ec6:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103ecd:	8b 00                	mov    eax,DWORD PTR [rax]
  103ecf:	83 f8 2f             	cmp    eax,0x2f
  103ed2:	77 30                	ja     103f04 <vprintf(char const*, __va_list_tag*)+0x1331>
  103ed4:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103edb:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  103edf:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103ee6:	8b 00                	mov    eax,DWORD PTR [rax]
  103ee8:	89 c0                	mov    eax,eax
  103eea:	48 01 d0             	add    rax,rdx
  103eed:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103ef4:	8b 12                	mov    edx,DWORD PTR [rdx]
  103ef6:	8d 4a 08             	lea    ecx,[rdx+0x8]
  103ef9:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103f00:	89 0a                	mov    DWORD PTR [rdx],ecx
  103f02:	eb 1a                	jmp    103f1e <vprintf(char const*, __va_list_tag*)+0x134b>
  103f04:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103f0b:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  103f0f:	48 8d 48 08          	lea    rcx,[rax+0x8]
  103f13:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103f1a:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  103f1e:	48 8b 00             	mov    rax,QWORD PTR [rax]
  103f21:	48 8d 95 4c ff ff ff 	lea    rdx,[rbp-0xb4]
  103f28:	48 89 d6             	mov    rsi,rdx
  103f2b:	48 89 c7             	mov    rdi,rax
  103f2e:	e8 4b ec ff ff       	call   102b7e <displayString(char const*, int*)>
  103f33:	e9 f3 05 00 00       	jmp    10452b <vprintf(char const*, __va_list_tag*)+0x1958>
  103f38:	0f be 45 fa          	movsx  eax,BYTE PTR [rbp-0x6]
  103f3c:	85 c0                	test   eax,eax
  103f3e:	0f 84 1e 01 00 00    	je     104062 <vprintf(char const*, __va_list_tag*)+0x148f>
  103f44:	85 c0                	test   eax,eax
  103f46:	0f 88 9c 03 00 00    	js     1042e8 <vprintf(char const*, __va_list_tag*)+0x1715>
  103f4c:	83 f8 7a             	cmp    eax,0x7a
  103f4f:	0f 8f 93 03 00 00    	jg     1042e8 <vprintf(char const*, __va_list_tag*)+0x1715>
  103f55:	83 f8 48             	cmp    eax,0x48
  103f58:	0f 8c 8a 03 00 00    	jl     1042e8 <vprintf(char const*, __va_list_tag*)+0x1715>
  103f5e:	83 e8 48             	sub    eax,0x48
  103f61:	83 f8 32             	cmp    eax,0x32
  103f64:	0f 87 7e 03 00 00    	ja     1042e8 <vprintf(char const*, __va_list_tag*)+0x1715>
  103f6a:	89 c0                	mov    eax,eax
  103f6c:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
  103f73:	00 
  103f74:	48 8d 05 55 6c 00 00 	lea    rax,[rip+0x6c55]        # 10abd0 <kernel_font+0xad0>
  103f7b:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
  103f7e:	48 98                	cdqe   
  103f80:	48 8d 15 49 6c 00 00 	lea    rdx,[rip+0x6c49]        # 10abd0 <kernel_font+0xad0>
  103f87:	48 01 d0             	add    rax,rdx
  103f8a:	ff e0                	jmp    rax
  103f8c:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
  103f92:	89 c6                	mov    esi,eax
  103f94:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103f9b:	8b 00                	mov    eax,DWORD PTR [rax]
  103f9d:	83 f8 2f             	cmp    eax,0x2f
  103fa0:	77 30                	ja     103fd2 <vprintf(char const*, __va_list_tag*)+0x13ff>
  103fa2:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103fa9:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  103fad:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103fb4:	8b 00                	mov    eax,DWORD PTR [rax]
  103fb6:	89 c0                	mov    eax,eax
  103fb8:	48 01 d0             	add    rax,rdx
  103fbb:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103fc2:	8b 12                	mov    edx,DWORD PTR [rdx]
  103fc4:	8d 4a 08             	lea    ecx,[rdx+0x8]
  103fc7:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103fce:	89 0a                	mov    DWORD PTR [rdx],ecx
  103fd0:	eb 1a                	jmp    103fec <vprintf(char const*, __va_list_tag*)+0x1419>
  103fd2:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  103fd9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  103fdd:	48 8d 48 08          	lea    rcx,[rax+0x8]
  103fe1:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  103fe8:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  103fec:	48 8b 00             	mov    rax,QWORD PTR [rax]
  103fef:	40 88 30             	mov    BYTE PTR [rax],sil
  103ff2:	e9 f2 02 00 00       	jmp    1042e9 <vprintf(char const*, __va_list_tag*)+0x1716>
  103ff7:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
  103ffd:	89 c6                	mov    esi,eax
  103fff:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  104006:	8b 00                	mov    eax,DWORD PTR [rax]
  104008:	83 f8 2f             	cmp    eax,0x2f
  10400b:	77 30                	ja     10403d <vprintf(char const*, __va_list_tag*)+0x146a>
  10400d:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  104014:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  104018:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  10401f:	8b 00                	mov    eax,DWORD PTR [rax]
  104021:	89 c0                	mov    eax,eax
  104023:	48 01 d0             	add    rax,rdx
  104026:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  10402d:	8b 12                	mov    edx,DWORD PTR [rdx]
  10402f:	8d 4a 08             	lea    ecx,[rdx+0x8]
  104032:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  104039:	89 0a                	mov    DWORD PTR [rdx],ecx
  10403b:	eb 1a                	jmp    104057 <vprintf(char const*, __va_list_tag*)+0x1484>
  10403d:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  104044:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  104048:	48 8d 48 08          	lea    rcx,[rax+0x8]
  10404c:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  104053:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  104057:	48 8b 00             	mov    rax,QWORD PTR [rax]
  10405a:	66 89 30             	mov    WORD PTR [rax],si
  10405d:	e9 87 02 00 00       	jmp    1042e9 <vprintf(char const*, __va_list_tag*)+0x1716>
  104062:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  104069:	8b 00                	mov    eax,DWORD PTR [rax]
  10406b:	83 f8 2f             	cmp    eax,0x2f
  10406e:	77 30                	ja     1040a0 <vprintf(char const*, __va_list_tag*)+0x14cd>
  104070:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  104077:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  10407b:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  104082:	8b 00                	mov    eax,DWORD PTR [rax]
  104084:	89 c0                	mov    eax,eax
  104086:	48 01 d0             	add    rax,rdx
  104089:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  104090:	8b 12                	mov    edx,DWORD PTR [rdx]
  104092:	8d 4a 08             	lea    ecx,[rdx+0x8]
  104095:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  10409c:	89 0a                	mov    DWORD PTR [rdx],ecx
  10409e:	eb 1a                	jmp    1040ba <vprintf(char const*, __va_list_tag*)+0x14e7>
  1040a0:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  1040a7:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  1040ab:	48 8d 48 08          	lea    rcx,[rax+0x8]
  1040af:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  1040b6:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  1040ba:	48 8b 00             	mov    rax,QWORD PTR [rax]
  1040bd:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  1040c1:	8b 95 4c ff ff ff    	mov    edx,DWORD PTR [rbp-0xb4]
  1040c7:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  1040cb:	89 10                	mov    DWORD PTR [rax],edx
  1040cd:	e9 17 02 00 00       	jmp    1042e9 <vprintf(char const*, __va_list_tag*)+0x1716>
  1040d2:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
  1040d8:	48 63 d0             	movsxd rdx,eax
  1040db:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  1040e2:	8b 00                	mov    eax,DWORD PTR [rax]
  1040e4:	83 f8 2f             	cmp    eax,0x2f
  1040e7:	77 30                	ja     104119 <vprintf(char const*, __va_list_tag*)+0x1546>
  1040e9:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  1040f0:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
  1040f4:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  1040fb:	8b 00                	mov    eax,DWORD PTR [rax]
  1040fd:	89 c0                	mov    eax,eax
  1040ff:	48 01 c8             	add    rax,rcx
  104102:	48 8b 8d 30 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d0]
  104109:	8b 09                	mov    ecx,DWORD PTR [rcx]
  10410b:	8d 71 08             	lea    esi,[rcx+0x8]
  10410e:	48 8b 8d 30 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d0]
  104115:	89 31                	mov    DWORD PTR [rcx],esi
  104117:	eb 1a                	jmp    104133 <vprintf(char const*, __va_list_tag*)+0x1560>
  104119:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  104120:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  104124:	48 8d 70 08          	lea    rsi,[rax+0x8]
  104128:	48 8b 8d 30 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d0]
  10412f:	48 89 71 08          	mov    QWORD PTR [rcx+0x8],rsi
  104133:	48 8b 00             	mov    rax,QWORD PTR [rax]
  104136:	48 89 10             	mov    QWORD PTR [rax],rdx
  104139:	e9 ab 01 00 00       	jmp    1042e9 <vprintf(char const*, __va_list_tag*)+0x1716>
  10413e:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
  104144:	48 63 d0             	movsxd rdx,eax
  104147:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  10414e:	8b 00                	mov    eax,DWORD PTR [rax]
  104150:	83 f8 2f             	cmp    eax,0x2f
  104153:	77 30                	ja     104185 <vprintf(char const*, __va_list_tag*)+0x15b2>
  104155:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  10415c:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
  104160:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  104167:	8b 00                	mov    eax,DWORD PTR [rax]
  104169:	89 c0                	mov    eax,eax
  10416b:	48 01 c8             	add    rax,rcx
  10416e:	48 8b 8d 30 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d0]
  104175:	8b 09                	mov    ecx,DWORD PTR [rcx]
  104177:	8d 71 08             	lea    esi,[rcx+0x8]
  10417a:	48 8b 8d 30 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d0]
  104181:	89 31                	mov    DWORD PTR [rcx],esi
  104183:	eb 1a                	jmp    10419f <vprintf(char const*, __va_list_tag*)+0x15cc>
  104185:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  10418c:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  104190:	48 8d 70 08          	lea    rsi,[rax+0x8]
  104194:	48 8b 8d 30 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d0]
  10419b:	48 89 71 08          	mov    QWORD PTR [rcx+0x8],rsi
  10419f:	48 8b 00             	mov    rax,QWORD PTR [rax]
  1041a2:	48 89 10             	mov    QWORD PTR [rax],rdx
  1041a5:	e9 3f 01 00 00       	jmp    1042e9 <vprintf(char const*, __va_list_tag*)+0x1716>
  1041aa:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
  1041b0:	48 63 d0             	movsxd rdx,eax
  1041b3:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  1041ba:	8b 00                	mov    eax,DWORD PTR [rax]
  1041bc:	83 f8 2f             	cmp    eax,0x2f
  1041bf:	77 30                	ja     1041f1 <vprintf(char const*, __va_list_tag*)+0x161e>
  1041c1:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  1041c8:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
  1041cc:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  1041d3:	8b 00                	mov    eax,DWORD PTR [rax]
  1041d5:	89 c0                	mov    eax,eax
  1041d7:	48 01 c8             	add    rax,rcx
  1041da:	48 8b 8d 30 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d0]
  1041e1:	8b 09                	mov    ecx,DWORD PTR [rcx]
  1041e3:	8d 71 08             	lea    esi,[rcx+0x8]
  1041e6:	48 8b 8d 30 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d0]
  1041ed:	89 31                	mov    DWORD PTR [rcx],esi
  1041ef:	eb 1a                	jmp    10420b <vprintf(char const*, __va_list_tag*)+0x1638>
  1041f1:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  1041f8:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  1041fc:	48 8d 70 08          	lea    rsi,[rax+0x8]
  104200:	48 8b 8d 30 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d0]
  104207:	48 89 71 08          	mov    QWORD PTR [rcx+0x8],rsi
  10420b:	48 8b 00             	mov    rax,QWORD PTR [rax]
  10420e:	48 89 10             	mov    QWORD PTR [rax],rdx
  104211:	e9 d3 00 00 00       	jmp    1042e9 <vprintf(char const*, __va_list_tag*)+0x1716>
  104216:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
  10421c:	48 63 d0             	movsxd rdx,eax
  10421f:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  104226:	8b 00                	mov    eax,DWORD PTR [rax]
  104228:	83 f8 2f             	cmp    eax,0x2f
  10422b:	77 30                	ja     10425d <vprintf(char const*, __va_list_tag*)+0x168a>
  10422d:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  104234:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
  104238:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  10423f:	8b 00                	mov    eax,DWORD PTR [rax]
  104241:	89 c0                	mov    eax,eax
  104243:	48 01 c8             	add    rax,rcx
  104246:	48 8b 8d 30 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d0]
  10424d:	8b 09                	mov    ecx,DWORD PTR [rcx]
  10424f:	8d 71 08             	lea    esi,[rcx+0x8]
  104252:	48 8b 8d 30 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d0]
  104259:	89 31                	mov    DWORD PTR [rcx],esi
  10425b:	eb 1a                	jmp    104277 <vprintf(char const*, __va_list_tag*)+0x16a4>
  10425d:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  104264:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  104268:	48 8d 70 08          	lea    rsi,[rax+0x8]
  10426c:	48 8b 8d 30 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d0]
  104273:	48 89 71 08          	mov    QWORD PTR [rcx+0x8],rsi
  104277:	48 8b 00             	mov    rax,QWORD PTR [rax]
  10427a:	48 89 10             	mov    QWORD PTR [rax],rdx
  10427d:	eb 6a                	jmp    1042e9 <vprintf(char const*, __va_list_tag*)+0x1716>
  10427f:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
  104285:	48 63 d0             	movsxd rdx,eax
  104288:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  10428f:	8b 00                	mov    eax,DWORD PTR [rax]
  104291:	83 f8 2f             	cmp    eax,0x2f
  104294:	77 30                	ja     1042c6 <vprintf(char const*, __va_list_tag*)+0x16f3>
  104296:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  10429d:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
  1042a1:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  1042a8:	8b 00                	mov    eax,DWORD PTR [rax]
  1042aa:	89 c0                	mov    eax,eax
  1042ac:	48 01 c8             	add    rax,rcx
  1042af:	48 8b 8d 30 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d0]
  1042b6:	8b 09                	mov    ecx,DWORD PTR [rcx]
  1042b8:	8d 71 08             	lea    esi,[rcx+0x8]
  1042bb:	48 8b 8d 30 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d0]
  1042c2:	89 31                	mov    DWORD PTR [rcx],esi
  1042c4:	eb 1a                	jmp    1042e0 <vprintf(char const*, __va_list_tag*)+0x170d>
  1042c6:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  1042cd:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  1042d1:	48 8d 70 08          	lea    rsi,[rax+0x8]
  1042d5:	48 8b 8d 30 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d0]
  1042dc:	48 89 71 08          	mov    QWORD PTR [rcx+0x8],rsi
  1042e0:	48 8b 00             	mov    rax,QWORD PTR [rax]
  1042e3:	48 89 10             	mov    QWORD PTR [rax],rdx
  1042e6:	eb 01                	jmp    1042e9 <vprintf(char const*, __va_list_tag*)+0x1716>
  1042e8:	90                   	nop
  1042e9:	e9 3d 02 00 00       	jmp    10452b <vprintf(char const*, __va_list_tag*)+0x1958>
  1042ee:	c6 45 c7 01          	mov    BYTE PTR [rbp-0x39],0x1
  1042f2:	e9 34 02 00 00       	jmp    10452b <vprintf(char const*, __va_list_tag*)+0x1958>
  1042f7:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  1042fe:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
  104301:	3d af 00 00 00       	cmp    eax,0xaf
  104306:	77 33                	ja     10433b <vprintf(char const*, __va_list_tag*)+0x1768>
  104308:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  10430f:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  104313:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  10431a:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
  10431d:	89 c0                	mov    eax,eax
  10431f:	48 01 d0             	add    rax,rdx
  104322:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  104329:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
  10432c:	8d 4a 10             	lea    ecx,[rdx+0x10]
  10432f:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  104336:	89 4a 04             	mov    DWORD PTR [rdx+0x4],ecx
  104339:	eb 1a                	jmp    104355 <vprintf(char const*, __va_list_tag*)+0x1782>
  10433b:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
  104342:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  104346:	48 8d 48 08          	lea    rcx,[rax+0x8]
  10434a:	48 8b 95 30 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1d0]
  104351:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
  104355:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
  104359:	f2 0f 11 45 d0       	movsd  QWORD PTR [rbp-0x30],xmm0
  10435e:	0f b6 45 c7          	movzx  eax,BYTE PTR [rbp-0x39]
  104362:	83 f0 01             	xor    eax,0x1
  104365:	84 c0                	test   al,al
  104367:	75 33                	jne    10439c <vprintf(char const*, __va_list_tag*)+0x17c9>
  104369:	f2 0f 10 45 d0       	movsd  xmm0,QWORD PTR [rbp-0x30]
  10436e:	66 0f 2f 05 2a 69 00 	comisd xmm0,QWORD PTR [rip+0x692a]        # 10aca0 <kernel_font+0xba0>
  104375:	00 
  104376:	0f 93 c0             	setae  al
  104379:	83 f0 01             	xor    eax,0x1
  10437c:	84 c0                	test   al,al
  10437e:	75 1c                	jne    10439c <vprintf(char const*, __va_list_tag*)+0x17c9>
  104380:	f2 0f 10 45 d0       	movsd  xmm0,QWORD PTR [rbp-0x30]
  104385:	f2 0f 10 0d 13 69 00 	movsd  xmm1,QWORD PTR [rip+0x6913]        # 10aca0 <kernel_font+0xba0>
  10438c:	00 
  10438d:	f2 0f 5e c1          	divsd  xmm0,xmm1
  104391:	f2 0f 11 45 d0       	movsd  QWORD PTR [rbp-0x30],xmm0
  104396:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
  10439a:	eb c2                	jmp    10435e <vprintf(char const*, __va_list_tag*)+0x178b>
  10439c:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  10439f:	2b 45 f0             	sub    eax,DWORD PTR [rbp-0x10]
  1043a2:	2b 45 e4             	sub    eax,DWORD PTR [rbp-0x1c]
  1043a5:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
  1043a9:	75 06                	jne    1043b1 <vprintf(char const*, __va_list_tag*)+0x17de>
  1043ab:	80 7d ec 00          	cmp    BYTE PTR [rbp-0x14],0x0
  1043af:	74 07                	je     1043b8 <vprintf(char const*, __va_list_tag*)+0x17e5>
  1043b1:	ba 01 00 00 00       	mov    edx,0x1
  1043b6:	eb 05                	jmp    1043bd <vprintf(char const*, __va_list_tag*)+0x17ea>
  1043b8:	ba 00 00 00 00       	mov    edx,0x0
  1043bd:	29 d0                	sub    eax,edx
  1043bf:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
  1043c2:	80 7d c7 00          	cmp    BYTE PTR [rbp-0x39],0x0
  1043c6:	74 04                	je     1043cc <vprintf(char const*, __va_list_tag*)+0x17f9>
  1043c8:	83 6d cc 04          	sub    DWORD PTR [rbp-0x34],0x4
  1043cc:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
  1043d0:	79 07                	jns    1043d9 <vprintf(char const*, __va_list_tag*)+0x1806>
  1043d2:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
  1043d9:	44 0f b6 45 ee       	movzx  r8d,BYTE PTR [rbp-0x12]
  1043de:	0f b6 7d ef          	movzx  edi,BYTE PTR [rbp-0x11]
  1043e2:	44 0f b6 55 ed       	movzx  r10d,BYTE PTR [rbp-0x13]
  1043e7:	0f b6 4d eb          	movzx  ecx,BYTE PTR [rbp-0x15]
  1043eb:	f2 0f 10 45 d0       	movsd  xmm0,QWORD PTR [rbp-0x30]
  1043f0:	f2 48 0f 2c c0       	cvttsd2si rax,xmm0
  1043f5:	44 8b 4d cc          	mov    r9d,DWORD PTR [rbp-0x34]
  1043f9:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  1043fc:	48 8d b5 40 fe ff ff 	lea    rsi,[rbp-0x1c0]
  104403:	41 50                	push   r8
  104405:	57                   	push   rdi
  104406:	45 89 d0             	mov    r8d,r10d
  104409:	48 89 c7             	mov    rdi,rax
  10440c:	e8 f8 e2 ff ff       	call   102709 <__int_str(long, char*, int, bool, bool, int, bool, bool)>
  104411:	48 83 c4 10          	add    rsp,0x10
  104415:	48 8d 95 4c ff ff ff 	lea    rdx,[rbp-0xb4]
  10441c:	48 8d 85 40 fe ff ff 	lea    rax,[rbp-0x1c0]
  104423:	48 89 d6             	mov    rsi,rdx
  104426:	48 89 c7             	mov    rdi,rax
  104429:	e8 50 e7 ff ff       	call   102b7e <displayString(char const*, int*)>
  10442e:	f2 0f 10 45 d0       	movsd  xmm0,QWORD PTR [rbp-0x30]
  104433:	f2 0f 2c c0          	cvttsd2si eax,xmm0
  104437:	66 0f ef c9          	pxor   xmm1,xmm1
  10443b:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
  10443f:	f2 0f 10 45 d0       	movsd  xmm0,QWORD PTR [rbp-0x30]
  104444:	f2 0f 5c c1          	subsd  xmm0,xmm1
  104448:	f2 0f 11 45 d0       	movsd  QWORD PTR [rbp-0x30],xmm0
  10444d:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [rbp-0x38],0x0
  104454:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  104457:	3b 45 f0             	cmp    eax,DWORD PTR [rbp-0x10]
  10445a:	7d 1c                	jge    104478 <vprintf(char const*, __va_list_tag*)+0x18a5>
  10445c:	f2 0f 10 4d d0       	movsd  xmm1,QWORD PTR [rbp-0x30]
  104461:	f2 0f 10 05 37 68 00 	movsd  xmm0,QWORD PTR [rip+0x6837]        # 10aca0 <kernel_font+0xba0>
  104468:	00 
  104469:	f2 0f 59 c1          	mulsd  xmm0,xmm1
  10446d:	f2 0f 11 45 d0       	movsd  QWORD PTR [rbp-0x30],xmm0
  104472:	83 45 c8 01          	add    DWORD PTR [rbp-0x38],0x1
  104476:	eb dc                	jmp    104454 <vprintf(char const*, __va_list_tag*)+0x1881>
  104478:	f2 0f 10 4d d0       	movsd  xmm1,QWORD PTR [rbp-0x30]
  10447d:	f2 0f 10 05 23 68 00 	movsd  xmm0,QWORD PTR [rip+0x6823]        # 10aca8 <kernel_font+0xba8>
  104484:	00 
  104485:	f2 0f 58 c1          	addsd  xmm0,xmm1
  104489:	f2 48 0f 2c c0       	cvttsd2si rax,xmm0
  10448e:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
  104495:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
  104499:	74 70                	je     10450b <vprintf(char const*, __va_list_tag*)+0x1938>
  10449b:	48 8d 85 4c ff ff ff 	lea    rax,[rbp-0xb4]
  1044a2:	48 89 c6             	mov    rsi,rax
  1044a5:	bf 2e 00 00 00       	mov    edi,0x2e
  1044aa:	e8 91 e6 ff ff       	call   102b40 <displayCharacter(char, int*)>
  1044af:	48 8d b5 40 fe ff ff 	lea    rsi,[rbp-0x1c0]
  1044b6:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
  1044bd:	6a 00                	push   0x0
  1044bf:	6a 00                	push   0x0
  1044c1:	41 b9 00 00 00 00    	mov    r9d,0x0
  1044c7:	41 b8 00 00 00 00    	mov    r8d,0x0
  1044cd:	b9 00 00 00 00       	mov    ecx,0x0
  1044d2:	ba 0a 00 00 00       	mov    edx,0xa
  1044d7:	48 89 c7             	mov    rdi,rax
  1044da:	e8 2a e2 ff ff       	call   102709 <__int_str(long, char*, int, bool, bool, int, bool, bool)>
  1044df:	48 83 c4 10          	add    rsp,0x10
  1044e3:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  1044e6:	48 98                	cdqe   
  1044e8:	c6 84 05 40 fe ff ff 	mov    BYTE PTR [rbp+rax*1-0x1c0],0x0
  1044ef:	00 
  1044f0:	48 8d 95 4c ff ff ff 	lea    rdx,[rbp-0xb4]
  1044f7:	48 8d 85 40 fe ff ff 	lea    rax,[rbp-0x1c0]
  1044fe:	48 89 d6             	mov    rsi,rdx
  104501:	48 89 c7             	mov    rdi,rax
  104504:	e8 75 e6 ff ff       	call   102b7e <displayString(char const*, int*)>
  104509:	eb 1f                	jmp    10452a <vprintf(char const*, __va_list_tag*)+0x1957>
  10450b:	80 7d ec 00          	cmp    BYTE PTR [rbp-0x14],0x0
  10450f:	74 19                	je     10452a <vprintf(char const*, __va_list_tag*)+0x1957>
  104511:	48 8d 85 4c ff ff ff 	lea    rax,[rbp-0xb4]
  104518:	48 89 c6             	mov    rsi,rax
  10451b:	bf 2e 00 00 00       	mov    edi,0x2e
  104520:	e8 1b e6 ff ff       	call   102b40 <displayCharacter(char, int*)>
  104525:	eb 03                	jmp    10452a <vprintf(char const*, __va_list_tag*)+0x1957>
  104527:	90                   	nop
  104528:	eb 01                	jmp    10452b <vprintf(char const*, __va_list_tag*)+0x1958>
  10452a:	90                   	nop
  10452b:	80 7d fb 65          	cmp    BYTE PTR [rbp-0x5],0x65
  10452f:	75 18                	jne    104549 <vprintf(char const*, __va_list_tag*)+0x1976>
  104531:	48 8d 85 4c ff ff ff 	lea    rax,[rbp-0xb4]
  104538:	48 89 c6             	mov    rsi,rax
  10453b:	48 8d 3d dc 63 00 00 	lea    rdi,[rip+0x63dc]        # 10a91e <kernel_font+0x81e>
  104542:	e8 37 e6 ff ff       	call   102b7e <displayString(char const*, int*)>
  104547:	eb 1c                	jmp    104565 <vprintf(char const*, __va_list_tag*)+0x1992>
  104549:	80 7d fb 45          	cmp    BYTE PTR [rbp-0x5],0x45
  10454d:	75 16                	jne    104565 <vprintf(char const*, __va_list_tag*)+0x1992>
  10454f:	48 8d 85 4c ff ff ff 	lea    rax,[rbp-0xb4]
  104556:	48 89 c6             	mov    rsi,rax
  104559:	48 8d 3d c1 63 00 00 	lea    rdi,[rip+0x63c1]        # 10a921 <kernel_font+0x821>
  104560:	e8 19 e6 ff ff       	call   102b7e <displayString(char const*, int*)>
  104565:	80 7d fb 65          	cmp    BYTE PTR [rbp-0x5],0x65
  104569:	74 06                	je     104571 <vprintf(char const*, __va_list_tag*)+0x199e>
  10456b:	80 7d fb 45          	cmp    BYTE PTR [rbp-0x5],0x45
  10456f:	75 74                	jne    1045e5 <vprintf(char const*, __va_list_tag*)+0x1a12>
  104571:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  104574:	48 98                	cdqe   
  104576:	48 8d b5 40 fe ff ff 	lea    rsi,[rbp-0x1c0]
  10457d:	6a 01                	push   0x1
  10457f:	6a 00                	push   0x0
  104581:	41 b9 02 00 00 00    	mov    r9d,0x2
  104587:	41 b8 00 00 00 00    	mov    r8d,0x0
  10458d:	b9 00 00 00 00       	mov    ecx,0x0
  104592:	ba 0a 00 00 00       	mov    edx,0xa
  104597:	48 89 c7             	mov    rdi,rax
  10459a:	e8 6a e1 ff ff       	call   102709 <__int_str(long, char*, int, bool, bool, int, bool, bool)>
  10459f:	48 83 c4 10          	add    rsp,0x10
  1045a3:	48 8d 95 4c ff ff ff 	lea    rdx,[rbp-0xb4]
  1045aa:	48 8d 85 40 fe ff ff 	lea    rax,[rbp-0x1c0]
  1045b1:	48 89 d6             	mov    rsi,rdx
  1045b4:	48 89 c7             	mov    rdi,rax
  1045b7:	e8 c2 e5 ff ff       	call   102b7e <displayString(char const*, int*)>
  1045bc:	eb 27                	jmp    1045e5 <vprintf(char const*, __va_list_tag*)+0x1a12>
  1045be:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  1045c1:	48 63 d0             	movsxd rdx,eax
  1045c4:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
  1045cb:	48 01 d0             	add    rax,rdx
  1045ce:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  1045d1:	0f be c0             	movsx  eax,al
  1045d4:	48 8d 95 4c ff ff ff 	lea    rdx,[rbp-0xb4]
  1045db:	48 89 d6             	mov    rsi,rdx
  1045de:	89 c7                	mov    edi,eax
  1045e0:	e8 5b e5 ff ff       	call   102b40 <displayCharacter(char, int*)>
  1045e5:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
  1045e9:	e9 6f e7 ff ff       	jmp    102d5d <vprintf(char const*, __va_list_tag*)+0x18a>
  1045ee:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
  1045f4:	c9                   	leave  
  1045f5:	c3                   	ret    

00000000001045f6 <printf>:
  1045f6:	55                   	push   rbp
  1045f7:	48 89 e5             	mov    rbp,rsp
  1045fa:	48 81 ec e0 00 00 00 	sub    rsp,0xe0
  104601:	48 89 bd 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdi
  104608:	48 89 b5 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rsi
  10460f:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
  104616:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  10461d:	4c 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r8
  104624:	4c 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r9
  10462b:	84 c0                	test   al,al
  10462d:	74 20                	je     10464f <printf+0x59>
  10462f:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
  104633:	0f 29 4d 90          	movaps XMMWORD PTR [rbp-0x70],xmm1
  104637:	0f 29 55 a0          	movaps XMMWORD PTR [rbp-0x60],xmm2
  10463b:	0f 29 5d b0          	movaps XMMWORD PTR [rbp-0x50],xmm3
  10463f:	0f 29 65 c0          	movaps XMMWORD PTR [rbp-0x40],xmm4
  104643:	0f 29 6d d0          	movaps XMMWORD PTR [rbp-0x30],xmm5
  104647:	0f 29 75 e0          	movaps XMMWORD PTR [rbp-0x20],xmm6
  10464b:	0f 29 7d f0          	movaps XMMWORD PTR [rbp-0x10],xmm7
  10464f:	c7 85 30 ff ff ff 08 	mov    DWORD PTR [rbp-0xd0],0x8
  104656:	00 00 00 
  104659:	c7 85 34 ff ff ff 30 	mov    DWORD PTR [rbp-0xcc],0x30
  104660:	00 00 00 
  104663:	48 8d 45 10          	lea    rax,[rbp+0x10]
  104667:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
  10466e:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
  104675:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
  10467c:	48 8d 95 30 ff ff ff 	lea    rdx,[rbp-0xd0]
  104683:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  10468a:	48 89 d6             	mov    rsi,rdx
  10468d:	48 89 c7             	mov    rdi,rax
  104690:	e8 3e e5 ff ff       	call   102bd3 <vprintf(char const*, __va_list_tag*)>
  104695:	89 85 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],eax
  10469b:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
  1046a1:	c9                   	leave  
  1046a2:	c3                   	ret    

00000000001046a3 <sys::config::setup_paging(stivale_framebuffer*)>:
  1046a3:	55                   	push   rbp
  1046a4:	48 89 e5             	mov    rbp,rsp
  1046a7:	48 83 ec 30          	sub    rsp,0x30
  1046ab:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  1046af:	e8 1d 1b 00 00       	call   1061d1 <request_page>
  1046b4:	48 c7 c2 d0 00 11 00 	mov    rdx,0x1100d0
  1046bb:	48 89 02             	mov    QWORD PTR [rdx],rax
  1046be:	48 c7 c0 d0 00 11 00 	mov    rax,0x1100d0
  1046c5:	48 8b 00             	mov    rax,QWORD PTR [rax]
  1046c8:	ba 00 10 00 00       	mov    edx,0x1000
  1046cd:	be 00 00 00 00       	mov    esi,0x0
  1046d2:	48 89 c7             	mov    rdi,rax
  1046d5:	e8 86 23 00 00       	call   106a60 <memory::operations::memset(void*, unsigned char, unsigned long)>
  1046da:	48 c7 c0 d0 00 11 00 	mov    rax,0x1100d0
  1046e1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  1046e4:	48 c7 c0 d0 00 11 00 	mov    rax,0x1100d0
  1046eb:	48 8b 00             	mov    rax,QWORD PTR [rax]
  1046ee:	48 89 d6             	mov    rsi,rdx
  1046f1:	48 89 c7             	mov    rdi,rax
  1046f4:	e8 f3 1d 00 00       	call   1064ec <memory::paging::map_memory(void*, void*)>
  1046f9:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  104700:	00 
  104701:	ba 00 00 00 00       	mov    edx,0x0
  104706:	be 00 00 00 00       	mov    esi,0x0
  10470b:	bf 00 00 00 00       	mov    edi,0x0
  104710:	e8 50 12 00 00       	call   105965 <memory::allocation::get_total_memory_size(stivale_memory_map*, unsigned long, unsigned long)>
  104715:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
  104719:	0f 92 c0             	setb   al
  10471c:	84 c0                	test   al,al
  10471e:	74 1d                	je     10473d <sys::config::setup_paging(stivale_framebuffer*)+0x9a>
  104720:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  104724:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  104728:	48 89 d6             	mov    rsi,rdx
  10472b:	48 89 c7             	mov    rdi,rax
  10472e:	e8 b9 1d 00 00       	call   1064ec <memory::paging::map_memory(void*, void*)>
  104733:	48 81 45 f8 00 10 00 	add    QWORD PTR [rbp-0x8],0x1000
  10473a:	00 
  10473b:	eb c4                	jmp    104701 <sys::config::setup_paging(stivale_framebuffer*)+0x5e>
  10473d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  104741:	48 8b 00             	mov    rax,QWORD PTR [rax]
  104744:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  104748:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  10474c:	0f b7 40 0a          	movzx  eax,WORD PTR [rax+0xa]
  104750:	0f b7 d0             	movzx  edx,ax
  104753:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  104757:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  10475b:	0f b7 c0             	movzx  eax,ax
  10475e:	48 0f af d0          	imul   rdx,rax
  104762:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  104766:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
  10476a:	66 c1 e8 03          	shr    ax,0x3
  10476e:	0f b7 c0             	movzx  eax,ax
  104771:	48 0f af c2          	imul   rax,rdx
  104775:	48 05 00 04 00 00    	add    rax,0x400
  10477b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  10477f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  104783:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  104787:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  10478b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  10478f:	48 01 d0             	add    rax,rdx
  104792:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
  104796:	73 1d                	jae    1047b5 <sys::config::setup_paging(stivale_framebuffer*)+0x112>
  104798:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  10479c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  1047a0:	48 89 d6             	mov    rsi,rdx
  1047a3:	48 89 c7             	mov    rdi,rax
  1047a6:	e8 41 1d 00 00       	call   1064ec <memory::paging::map_memory(void*, void*)>
  1047ab:	48 81 45 f0 00 10 00 	add    QWORD PTR [rbp-0x10],0x1000
  1047b2:	00 
  1047b3:	eb d2                	jmp    104787 <sys::config::setup_paging(stivale_framebuffer*)+0xe4>
  1047b5:	48 c7 c0 d0 00 11 00 	mov    rax,0x1100d0
  1047bc:	48 8b 00             	mov    rax,QWORD PTR [rax]
  1047bf:	0f 22 d8             	mov    cr3,rax
  1047c2:	90                   	nop
  1047c3:	c9                   	leave  
  1047c4:	c3                   	ret    

00000000001047c5 <sys::config::configure_memory(stivale_framebuffer*, stivale_memory_map*)>:
  1047c5:	55                   	push   rbp
  1047c6:	48 89 e5             	mov    rbp,rsp
  1047c9:	48 83 ec 20          	sub    rsp,0x20
  1047cd:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  1047d1:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  1047d5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  1047d9:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  1047dd:	48 89 d0             	mov    rax,rdx
  1047e0:	48 01 c0             	add    rax,rax
  1047e3:	48 01 d0             	add    rax,rdx
  1047e6:	48 c1 e0 03          	shl    rax,0x3
  1047ea:	48 89 c1             	mov    rcx,rax
  1047ed:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  1047f1:	ba 18 00 00 00       	mov    edx,0x18
  1047f6:	48 89 ce             	mov    rsi,rcx
  1047f9:	48 89 c7             	mov    rdi,rax
  1047fc:	e8 4b 12 00 00       	call   105a4c <memory::allocation::map_memory(stivale_memory_map*, unsigned long, unsigned long)>
  104801:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  104805:	48 89 c7             	mov    rdi,rax
  104808:	e8 96 fe ff ff       	call   1046a3 <sys::config::setup_paging(stivale_framebuffer*)>
  10480d:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  104814:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
  10481b:	7f 39                	jg     104856 <sys::config::configure_memory(stivale_framebuffer*, stivale_memory_map*)+0x91>
  10481d:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
  104824:	80 ff ff 
  104827:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  10482b:	e8 a1 19 00 00       	call   1061d1 <request_page>
  104830:	48 89 c2             	mov    rdx,rax
  104833:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  104837:	48 89 d6             	mov    rsi,rdx
  10483a:	48 89 c7             	mov    rdi,rax
  10483d:	e8 aa 1c 00 00       	call   1064ec <memory::paging::map_memory(void*, void*)>
  104842:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  104846:	48 05 00 10 00 00    	add    rax,0x1000
  10484c:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  104850:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
  104854:	eb be                	jmp    104814 <sys::config::configure_memory(stivale_framebuffer*, stivale_memory_map*)+0x4f>
  104856:	be 00 00 10 00       	mov    esi,0x100000
  10485b:	48 bf 00 00 00 00 00 	movabs rdi,0xffff800000000000
  104862:	80 ff ff 
  104865:	e8 b4 14 00 00       	call   105d1e <memory::allocation::initialize_heap(void*, unsigned long)>
  10486a:	90                   	nop
  10486b:	c9                   	leave  
  10486c:	c3                   	ret    

000000000010486d <sys::config::configure_graphics(stivale_framebuffer*)>:
  10486d:	55                   	push   rbp
  10486e:	48 89 e5             	mov    rbp,rsp
  104871:	48 83 ec 10          	sub    rsp,0x10
  104875:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  104879:	48 c7 c1 90 e0 10 00 	mov    rcx,0x10e090
  104880:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  104884:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  104888:	48 8b 00             	mov    rax,QWORD PTR [rax]
  10488b:	48 89 01             	mov    QWORD PTR [rcx],rax
  10488e:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
  104892:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  104899:	0f b7 40 0a          	movzx  eax,WORD PTR [rax+0xa]
  10489d:	0f b7 d0             	movzx  edx,ax
  1048a0:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  1048a7:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  1048ab:	0f b7 c0             	movzx  eax,ax
  1048ae:	0f af d0             	imul   edx,eax
  1048b1:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  1048b8:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
  1048bc:	66 c1 e8 03          	shr    ax,0x3
  1048c0:	0f b7 c0             	movzx  eax,ax
  1048c3:	0f af c2             	imul   eax,edx
  1048c6:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
  1048cc:	85 c0                	test   eax,eax
  1048ce:	0f 48 c2             	cmovs  eax,edx
  1048d1:	c1 f8 0c             	sar    eax,0xc
  1048d4:	83 c0 01             	add    eax,0x1
  1048d7:	48 98                	cdqe   
  1048d9:	48 89 c7             	mov    rdi,rax
  1048dc:	e8 60 19 00 00       	call   106241 <request_pages>
  1048e1:	48 c7 c2 a0 e0 10 00 	mov    rdx,0x10e0a0
  1048e8:	48 89 02             	mov    QWORD PTR [rdx],rax
  1048eb:	e8 62 d8 ff ff       	call   102152 <terminal::instance()>
  1048f0:	90                   	nop
  1048f1:	c9                   	leave  
  1048f2:	c3                   	ret    

00000000001048f3 <sys::config::calculate_kernel_size()>:
  1048f3:	55                   	push   rbp
  1048f4:	48 89 e5             	mov    rbp,rsp
  1048f7:	48 c7 c0 00 50 11 00 	mov    rax,0x115000
  1048fe:	48 89 c2             	mov    rdx,rax
  104901:	48 c7 c0 00 00 10 00 	mov    rax,0x100000
  104908:	48 29 c2             	sub    rdx,rax
  10490b:	48 c7 c0 b0 e0 10 00 	mov    rax,0x10e0b0
  104912:	48 89 10             	mov    QWORD PTR [rax],rdx
  104915:	48 c7 c0 b0 e0 10 00 	mov    rax,0x10e0b0
  10491c:	48 8b 00             	mov    rax,QWORD PTR [rax]
  10491f:	48 c1 e8 0c          	shr    rax,0xc
  104923:	48 8d 50 01          	lea    rdx,[rax+0x1]
  104927:	48 c7 c0 a8 e0 10 00 	mov    rax,0x10e0a8
  10492e:	48 89 10             	mov    QWORD PTR [rax],rdx
  104931:	90                   	nop
  104932:	5d                   	pop    rbp
  104933:	c3                   	ret    

0000000000104934 <sys::config::configure_userspace()>:
  104934:	55                   	push   rbp
  104935:	48 89 e5             	mov    rbp,rsp
  104938:	48 c7 c0 00 90 10 00 	mov    rax,0x109000
  10493f:	48 89 c7             	mov    rdi,rax
  104942:	e8 9b 1e 00 00       	call   1067e2 <donate_to_userspace>
  104947:	90                   	nop
  104948:	5d                   	pop    rbp
  104949:	c3                   	ret    

000000000010494a <io::outb(unsigned short, unsigned char)>:
  10494a:	55                   	push   rbp
  10494b:	48 89 e5             	mov    rbp,rsp
  10494e:	48 83 ec 08          	sub    rsp,0x8
  104952:	89 f8                	mov    eax,edi
  104954:	89 f2                	mov    edx,esi
  104956:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  10495a:	89 d0                	mov    eax,edx
  10495c:	88 45 f8             	mov    BYTE PTR [rbp-0x8],al
  10495f:	0f b6 45 f8          	movzx  eax,BYTE PTR [rbp-0x8]
  104963:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
  104967:	ee                   	out    dx,al
  104968:	90                   	nop
  104969:	c9                   	leave  
  10496a:	c3                   	ret    

000000000010496b <exception_handler>:
  10496b:	55                   	push   rbp
  10496c:	48 89 e5             	mov    rbp,rsp
  10496f:	48 83 ec 20          	sub    rsp,0x20
  104973:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  104977:	e8 d6 d7 ff ff       	call   102152 <terminal::instance()>
  10497c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  104980:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  104984:	48 89 c7             	mov    rdi,rax
  104987:	e8 a4 cb ff ff       	call   101530 <terminal::clear()>
  10498c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  104990:	48 8d 35 75 64 00 00 	lea    rsi,[rip+0x6475]        # 10ae0c <kernel_font+0xd0c>
  104997:	48 89 c7             	mov    rdi,rax
  10499a:	e8 27 d4 ff ff       	call   101dc6 <terminal::write(char const*)>
  10499f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  1049a3:	48 8b 50 60          	mov    rdx,QWORD PTR [rax+0x60]
  1049a7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  1049ab:	48 8b 48 60          	mov    rcx,QWORD PTR [rax+0x60]
  1049af:	48 c7 c0 00 d0 10 00 	mov    rax,0x10d000
  1049b6:	48 8b 04 c8          	mov    rax,QWORD PTR [rax+rcx*8]
  1049ba:	48 89 c6             	mov    rsi,rax
  1049bd:	48 8d 3d 64 64 00 00 	lea    rdi,[rip+0x6464]        # 10ae28 <kernel_font+0xd28>
  1049c4:	b8 00 00 00 00       	mov    eax,0x0
  1049c9:	e8 28 fc ff ff       	call   1045f6 <printf>
  1049ce:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1049d2:	48 8d 35 87 64 00 00 	lea    rsi,[rip+0x6487]        # 10ae60 <kernel_font+0xd60>
  1049d9:	48 89 c7             	mov    rdi,rax
  1049dc:	e8 e5 d3 ff ff       	call   101dc6 <terminal::write(char const*)>
  1049e1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  1049e5:	48 8b 88 88 00 00 00 	mov    rcx,QWORD PTR [rax+0x88]
  1049ec:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  1049f0:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
  1049f4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  1049f8:	48 8b 40 78          	mov    rax,QWORD PTR [rax+0x78]
  1049fc:	48 89 c6             	mov    rsi,rax
  1049ff:	48 8d 3d 90 64 00 00 	lea    rdi,[rip+0x6490]        # 10ae96 <kernel_font+0xd96>
  104a06:	b8 00 00 00 00       	mov    eax,0x0
  104a0b:	e8 e6 fb ff ff       	call   1045f6 <printf>
  104a10:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  104a14:	48 8d 35 97 64 00 00 	lea    rsi,[rip+0x6497]        # 10aeb2 <kernel_font+0xdb2>
  104a1b:	48 89 c7             	mov    rdi,rax
  104a1e:	e8 a3 d3 ff ff       	call   101dc6 <terminal::write(char const*)>
  104a23:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  104a27:	48 8b b0 80 00 00 00 	mov    rsi,QWORD PTR [rax+0x80]
  104a2e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  104a32:	4c 8b 40 70          	mov    r8,QWORD PTR [rax+0x70]
  104a36:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  104a3a:	48 8b 38             	mov    rdi,QWORD PTR [rax]
  104a3d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  104a41:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  104a45:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  104a49:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  104a4d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  104a51:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  104a55:	48 83 ec 08          	sub    rsp,0x8
  104a59:	56                   	push   rsi
  104a5a:	4d 89 c1             	mov    r9,r8
  104a5d:	49 89 f8             	mov    r8,rdi
  104a60:	48 89 c6             	mov    rsi,rax
  104a63:	48 8d 3d 5e 64 00 00 	lea    rdi,[rip+0x645e]        # 10aec8 <kernel_font+0xdc8>
  104a6a:	b8 00 00 00 00       	mov    eax,0x0
  104a6f:	e8 82 fb ff ff       	call   1045f6 <printf>
  104a74:	48 83 c4 10          	add    rsp,0x10
  104a78:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  104a7c:	48 8d 35 88 64 00 00 	lea    rsi,[rip+0x6488]        # 10af0b <kernel_font+0xe0b>
  104a83:	48 89 c7             	mov    rdi,rax
  104a86:	e8 3b d3 ff ff       	call   101dc6 <terminal::write(char const*)>
  104a8b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  104a8f:	48 8b 70 28          	mov    rsi,QWORD PTR [rax+0x28]
  104a93:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  104a97:	4c 8b 40 30          	mov    r8,QWORD PTR [rax+0x30]
  104a9b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  104a9f:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
  104aa3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  104aa7:	48 8b 48 50          	mov    rcx,QWORD PTR [rax+0x50]
  104aab:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  104aaf:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
  104ab3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  104ab7:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
  104abb:	48 83 ec 08          	sub    rsp,0x8
  104abf:	56                   	push   rsi
  104ac0:	4d 89 c1             	mov    r9,r8
  104ac3:	49 89 f8             	mov    r8,rdi
  104ac6:	48 89 c6             	mov    rsi,rax
  104ac9:	48 8d 3d 58 64 00 00 	lea    rdi,[rip+0x6458]        # 10af28 <kernel_font+0xe28>
  104ad0:	b8 00 00 00 00       	mov    eax,0x0
  104ad5:	e8 1c fb ff ff       	call   1045f6 <printf>
  104ada:	48 83 c4 10          	add    rsp,0x10
  104ade:	fa                   	cli    
  104adf:	f4                   	hlt    
  104ae0:	e8 3d c5 ff ff       	call   101022 <restart_cold>
  104ae5:	90                   	nop
  104ae6:	c9                   	leave  
  104ae7:	c3                   	ret    

0000000000104ae8 <isr_handler>:
  104ae8:	55                   	push   rbp
  104ae9:	48 89 e5             	mov    rbp,rsp
  104aec:	48 83 ec 10          	sub    rsp,0x10
  104af0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  104af4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  104af8:	48 89 c7             	mov    rdi,rax
  104afb:	e8 6b fe ff ff       	call   10496b <exception_handler>
  104b00:	90                   	nop
  104b01:	c9                   	leave  
  104b02:	c3                   	ret    

0000000000104b03 <irq_handler>:
  104b03:	55                   	push   rbp
  104b04:	48 89 e5             	mov    rbp,rsp
  104b07:	48 83 ec 10          	sub    rsp,0x10
  104b0b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  104b0f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  104b13:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
  104b17:	48 83 f8 20          	cmp    rax,0x20
  104b1b:	75 68                	jne    104b85 <irq_handler+0x82>
  104b1d:	48 c7 c0 d8 0b 11 00 	mov    rax,0x110bd8
  104b24:	48 8b 00             	mov    rax,QWORD PTR [rax]
  104b27:	48 8d 50 01          	lea    rdx,[rax+0x1]
  104b2b:	48 c7 c0 d8 0b 11 00 	mov    rax,0x110bd8
  104b32:	48 89 10             	mov    QWORD PTR [rax],rdx
  104b35:	48 c7 c0 cc f0 10 00 	mov    rax,0x10f0cc
  104b3c:	8b 00                	mov    eax,DWORD PTR [rax]
  104b3e:	8d 50 01             	lea    edx,[rax+0x1]
  104b41:	48 c7 c0 cc f0 10 00 	mov    rax,0x10f0cc
  104b48:	89 10                	mov    DWORD PTR [rax],edx
  104b4a:	48 c7 c0 cc f0 10 00 	mov    rax,0x10f0cc
  104b51:	8b 10                	mov    edx,DWORD PTR [rax]
  104b53:	48 c7 c0 cc 0b 11 00 	mov    rax,0x110bcc
  104b5a:	8b 00                	mov    eax,DWORD PTR [rax]
  104b5c:	39 c2                	cmp    edx,eax
  104b5e:	72 25                	jb     104b85 <irq_handler+0x82>
  104b60:	48 c7 c0 cc f0 10 00 	mov    rax,0x10f0cc
  104b67:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
  104b6d:	48 c7 c0 d0 f0 10 00 	mov    rax,0x10f0d0
  104b74:	48 8b 00             	mov    rax,QWORD PTR [rax]
  104b77:	48 8d 50 01          	lea    rdx,[rax+0x1]
  104b7b:	48 c7 c0 d0 f0 10 00 	mov    rax,0x10f0d0
  104b82:	48 89 10             	mov    QWORD PTR [rax],rdx
  104b85:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  104b89:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
  104b8d:	48 83 f8 21          	cmp    rax,0x21
  104b91:	75 05                	jne    104b98 <irq_handler+0x95>
  104b93:	e8 31 27 00 00       	call   1072c9 <kbd_irq_handler>
  104b98:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  104b9c:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
  104ba0:	48 83 f8 24          	cmp    rax,0x24
  104ba4:	75 05                	jne    104bab <irq_handler+0xa8>
  104ba6:	e8 2a 2b 00 00       	call   1076d5 <io::serial::console::read_character()>
  104bab:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  104baf:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
  104bb3:	48 83 f8 27          	cmp    rax,0x27
  104bb7:	76 0f                	jbe    104bc8 <irq_handler+0xc5>
  104bb9:	be 20 00 00 00       	mov    esi,0x20
  104bbe:	bf a0 00 00 00       	mov    edi,0xa0
  104bc3:	e8 82 fd ff ff       	call   10494a <io::outb(unsigned short, unsigned char)>
  104bc8:	be 20 00 00 00       	mov    esi,0x20
  104bcd:	bf 20 00 00 00       	mov    edi,0x20
  104bd2:	e8 73 fd ff ff       	call   10494a <io::outb(unsigned short, unsigned char)>
  104bd7:	90                   	nop
  104bd8:	c9                   	leave  
  104bd9:	c3                   	ret    

0000000000104bda <idt_set>:
  104bda:	55                   	push   rbp
  104bdb:	48 89 e5             	mov    rbp,rsp
  104bde:	48 83 ec 18          	sub    rsp,0x18
  104be2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  104be6:	89 d0                	mov    eax,edx
  104be8:	89 ca                	mov    edx,ecx
  104bea:	89 f9                	mov    ecx,edi
  104bec:	88 4d fc             	mov    BYTE PTR [rbp-0x4],cl
  104bef:	66 89 45 f8          	mov    WORD PTR [rbp-0x8],ax
  104bf3:	89 d0                	mov    eax,edx
  104bf5:	88 45 ec             	mov    BYTE PTR [rbp-0x14],al
  104bf8:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
  104bfc:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  104c00:	48 c7 c1 c0 e0 10 00 	mov    rcx,0x10e0c0
  104c07:	48 98                	cdqe   
  104c09:	48 c1 e0 04          	shl    rax,0x4
  104c0d:	48 01 c8             	add    rax,rcx
  104c10:	66 89 10             	mov    WORD PTR [rax],dx
  104c13:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  104c17:	48 c1 e8 10          	shr    rax,0x10
  104c1b:	48 89 c2             	mov    rdx,rax
  104c1e:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
  104c22:	48 c7 c1 c0 e0 10 00 	mov    rcx,0x10e0c0
  104c29:	48 98                	cdqe   
  104c2b:	48 c1 e0 04          	shl    rax,0x4
  104c2f:	48 01 c8             	add    rax,rcx
  104c32:	48 83 c0 06          	add    rax,0x6
  104c36:	66 89 10             	mov    WORD PTR [rax],dx
  104c39:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  104c3d:	48 c1 e8 20          	shr    rax,0x20
  104c41:	48 89 c2             	mov    rdx,rax
  104c44:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
  104c48:	48 c7 c1 c0 e0 10 00 	mov    rcx,0x10e0c0
  104c4f:	48 98                	cdqe   
  104c51:	48 c1 e0 04          	shl    rax,0x4
  104c55:	48 01 c8             	add    rax,rcx
  104c58:	48 83 c0 08          	add    rax,0x8
  104c5c:	89 10                	mov    DWORD PTR [rax],edx
  104c5e:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
  104c62:	48 c7 c2 c0 e0 10 00 	mov    rdx,0x10e0c0
  104c69:	48 98                	cdqe   
  104c6b:	48 c1 e0 04          	shl    rax,0x4
  104c6f:	48 01 d0             	add    rax,rdx
  104c72:	48 8d 50 02          	lea    rdx,[rax+0x2]
  104c76:	0f b7 45 f8          	movzx  eax,WORD PTR [rbp-0x8]
  104c7a:	66 89 02             	mov    WORD PTR [rdx],ax
  104c7d:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
  104c81:	48 c7 c2 c0 e0 10 00 	mov    rdx,0x10e0c0
  104c88:	48 98                	cdqe   
  104c8a:	48 c1 e0 04          	shl    rax,0x4
  104c8e:	48 01 d0             	add    rax,rdx
  104c91:	48 8d 50 05          	lea    rdx,[rax+0x5]
  104c95:	0f b6 45 ec          	movzx  eax,BYTE PTR [rbp-0x14]
  104c99:	88 02                	mov    BYTE PTR [rdx],al
  104c9b:	80 7d fc 1f          	cmp    BYTE PTR [rbp-0x4],0x1f
  104c9f:	77 1d                	ja     104cbe <idt_set+0xe4>
  104ca1:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
  104ca5:	48 c7 c2 c0 e0 10 00 	mov    rdx,0x10e0c0
  104cac:	48 98                	cdqe   
  104cae:	48 c1 e0 04          	shl    rax,0x4
  104cb2:	48 01 d0             	add    rax,rdx
  104cb5:	48 83 c0 04          	add    rax,0x4
  104cb9:	c6 00 01             	mov    BYTE PTR [rax],0x1
  104cbc:	eb 3e                	jmp    104cfc <idt_set+0x122>
  104cbe:	80 7d fc 2f          	cmp    BYTE PTR [rbp-0x4],0x2f
  104cc2:	77 1d                	ja     104ce1 <idt_set+0x107>
  104cc4:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
  104cc8:	48 c7 c2 c0 e0 10 00 	mov    rdx,0x10e0c0
  104ccf:	48 98                	cdqe   
  104cd1:	48 c1 e0 04          	shl    rax,0x4
  104cd5:	48 01 d0             	add    rax,rdx
  104cd8:	48 83 c0 04          	add    rax,0x4
  104cdc:	c6 00 02             	mov    BYTE PTR [rax],0x2
  104cdf:	eb 1b                	jmp    104cfc <idt_set+0x122>
  104ce1:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
  104ce5:	48 c7 c2 c0 e0 10 00 	mov    rdx,0x10e0c0
  104cec:	48 98                	cdqe   
  104cee:	48 c1 e0 04          	shl    rax,0x4
  104cf2:	48 01 d0             	add    rax,rdx
  104cf5:	48 83 c0 04          	add    rax,0x4
  104cf9:	c6 00 03             	mov    BYTE PTR [rax],0x3
  104cfc:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
  104d00:	48 c7 c2 c0 e0 10 00 	mov    rdx,0x10e0c0
  104d07:	48 98                	cdqe   
  104d09:	48 c1 e0 04          	shl    rax,0x4
  104d0d:	48 01 d0             	add    rax,rdx
  104d10:	48 83 c0 0c          	add    rax,0xc
  104d14:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
  104d1a:	90                   	nop
  104d1b:	c9                   	leave  
  104d1c:	c3                   	ret    

0000000000104d1d <load_idt>:
  104d1d:	55                   	push   rbp
  104d1e:	48 89 e5             	mov    rbp,rsp
  104d21:	48 c7 c0 c0 f0 10 00 	mov    rax,0x10f0c0
  104d28:	66 c7 00 ff 0f       	mov    WORD PTR [rax],0xfff
  104d2d:	48 c7 c0 c0 e0 10 00 	mov    rax,0x10e0c0
  104d34:	48 89 c2             	mov    rdx,rax
  104d37:	48 c7 c0 c0 f0 10 00 	mov    rax,0x10f0c0
  104d3e:	48 89 50 02          	mov    QWORD PTR [rax+0x2],rdx
  104d42:	ba 00 10 00 00       	mov    edx,0x1000
  104d47:	be 00 00 00 00       	mov    esi,0x0
  104d4c:	48 c7 c0 c0 e0 10 00 	mov    rax,0x10e0c0
  104d53:	48 89 c7             	mov    rdi,rax
  104d56:	e8 05 1d 00 00       	call   106a60 <memory::operations::memset(void*, unsigned char, unsigned long)>
  104d5b:	48 c7 c0 24 7f 10 00 	mov    rax,0x107f24
  104d62:	b9 8e 00 00 00       	mov    ecx,0x8e
  104d67:	ba 08 00 00 00       	mov    edx,0x8
  104d6c:	48 89 c6             	mov    rsi,rax
  104d6f:	bf 00 00 00 00       	mov    edi,0x0
  104d74:	e8 61 fe ff ff       	call   104bda <idt_set>
  104d79:	48 c7 c0 32 7f 10 00 	mov    rax,0x107f32
  104d80:	b9 8e 00 00 00       	mov    ecx,0x8e
  104d85:	ba 08 00 00 00       	mov    edx,0x8
  104d8a:	48 89 c6             	mov    rsi,rax
  104d8d:	bf 01 00 00 00       	mov    edi,0x1
  104d92:	e8 43 fe ff ff       	call   104bda <idt_set>
  104d97:	48 c7 c0 40 7f 10 00 	mov    rax,0x107f40
  104d9e:	b9 8e 00 00 00       	mov    ecx,0x8e
  104da3:	ba 08 00 00 00       	mov    edx,0x8
  104da8:	48 89 c6             	mov    rsi,rax
  104dab:	bf 02 00 00 00       	mov    edi,0x2
  104db0:	e8 25 fe ff ff       	call   104bda <idt_set>
  104db5:	48 c7 c0 4e 7f 10 00 	mov    rax,0x107f4e
  104dbc:	b9 8e 00 00 00       	mov    ecx,0x8e
  104dc1:	ba 08 00 00 00       	mov    edx,0x8
  104dc6:	48 89 c6             	mov    rsi,rax
  104dc9:	bf 03 00 00 00       	mov    edi,0x3
  104dce:	e8 07 fe ff ff       	call   104bda <idt_set>
  104dd3:	48 c7 c0 5c 7f 10 00 	mov    rax,0x107f5c
  104dda:	b9 8e 00 00 00       	mov    ecx,0x8e
  104ddf:	ba 08 00 00 00       	mov    edx,0x8
  104de4:	48 89 c6             	mov    rsi,rax
  104de7:	bf 04 00 00 00       	mov    edi,0x4
  104dec:	e8 e9 fd ff ff       	call   104bda <idt_set>
  104df1:	48 c7 c0 6a 7f 10 00 	mov    rax,0x107f6a
  104df8:	b9 8e 00 00 00       	mov    ecx,0x8e
  104dfd:	ba 08 00 00 00       	mov    edx,0x8
  104e02:	48 89 c6             	mov    rsi,rax
  104e05:	bf 05 00 00 00       	mov    edi,0x5
  104e0a:	e8 cb fd ff ff       	call   104bda <idt_set>
  104e0f:	48 c7 c0 78 7f 10 00 	mov    rax,0x107f78
  104e16:	b9 8e 00 00 00       	mov    ecx,0x8e
  104e1b:	ba 08 00 00 00       	mov    edx,0x8
  104e20:	48 89 c6             	mov    rsi,rax
  104e23:	bf 06 00 00 00       	mov    edi,0x6
  104e28:	e8 ad fd ff ff       	call   104bda <idt_set>
  104e2d:	48 c7 c0 86 7f 10 00 	mov    rax,0x107f86
  104e34:	b9 8e 00 00 00       	mov    ecx,0x8e
  104e39:	ba 08 00 00 00       	mov    edx,0x8
  104e3e:	48 89 c6             	mov    rsi,rax
  104e41:	bf 07 00 00 00       	mov    edi,0x7
  104e46:	e8 8f fd ff ff       	call   104bda <idt_set>
  104e4b:	48 c7 c0 94 7f 10 00 	mov    rax,0x107f94
  104e52:	b9 8e 00 00 00       	mov    ecx,0x8e
  104e57:	ba 08 00 00 00       	mov    edx,0x8
  104e5c:	48 89 c6             	mov    rsi,rax
  104e5f:	bf 08 00 00 00       	mov    edi,0x8
  104e64:	e8 71 fd ff ff       	call   104bda <idt_set>
  104e69:	48 c7 c0 a0 7f 10 00 	mov    rax,0x107fa0
  104e70:	b9 8e 00 00 00       	mov    ecx,0x8e
  104e75:	ba 08 00 00 00       	mov    edx,0x8
  104e7a:	48 89 c6             	mov    rsi,rax
  104e7d:	bf 09 00 00 00       	mov    edi,0x9
  104e82:	e8 53 fd ff ff       	call   104bda <idt_set>
  104e87:	48 c7 c0 ae 7f 10 00 	mov    rax,0x107fae
  104e8e:	b9 8e 00 00 00       	mov    ecx,0x8e
  104e93:	ba 08 00 00 00       	mov    edx,0x8
  104e98:	48 89 c6             	mov    rsi,rax
  104e9b:	bf 0a 00 00 00       	mov    edi,0xa
  104ea0:	e8 35 fd ff ff       	call   104bda <idt_set>
  104ea5:	48 c7 c0 ba 7f 10 00 	mov    rax,0x107fba
  104eac:	b9 8e 00 00 00       	mov    ecx,0x8e
  104eb1:	ba 08 00 00 00       	mov    edx,0x8
  104eb6:	48 89 c6             	mov    rsi,rax
  104eb9:	bf 0b 00 00 00       	mov    edi,0xb
  104ebe:	e8 17 fd ff ff       	call   104bda <idt_set>
  104ec3:	48 c7 c0 c6 7f 10 00 	mov    rax,0x107fc6
  104eca:	b9 8e 00 00 00       	mov    ecx,0x8e
  104ecf:	ba 08 00 00 00       	mov    edx,0x8
  104ed4:	48 89 c6             	mov    rsi,rax
  104ed7:	bf 0c 00 00 00       	mov    edi,0xc
  104edc:	e8 f9 fc ff ff       	call   104bda <idt_set>
  104ee1:	48 c7 c0 d2 7f 10 00 	mov    rax,0x107fd2
  104ee8:	b9 8e 00 00 00       	mov    ecx,0x8e
  104eed:	ba 08 00 00 00       	mov    edx,0x8
  104ef2:	48 89 c6             	mov    rsi,rax
  104ef5:	bf 0d 00 00 00       	mov    edi,0xd
  104efa:	e8 db fc ff ff       	call   104bda <idt_set>
  104eff:	48 c7 c0 de 7f 10 00 	mov    rax,0x107fde
  104f06:	b9 8e 00 00 00       	mov    ecx,0x8e
  104f0b:	ba 08 00 00 00       	mov    edx,0x8
  104f10:	48 89 c6             	mov    rsi,rax
  104f13:	bf 0e 00 00 00       	mov    edi,0xe
  104f18:	e8 bd fc ff ff       	call   104bda <idt_set>
  104f1d:	48 c7 c0 ea 7f 10 00 	mov    rax,0x107fea
  104f24:	b9 8e 00 00 00       	mov    ecx,0x8e
  104f29:	ba 08 00 00 00       	mov    edx,0x8
  104f2e:	48 89 c6             	mov    rsi,rax
  104f31:	bf 0f 00 00 00       	mov    edi,0xf
  104f36:	e8 9f fc ff ff       	call   104bda <idt_set>
  104f3b:	48 c7 c0 f8 7f 10 00 	mov    rax,0x107ff8
  104f42:	b9 8e 00 00 00       	mov    ecx,0x8e
  104f47:	ba 08 00 00 00       	mov    edx,0x8
  104f4c:	48 89 c6             	mov    rsi,rax
  104f4f:	bf 10 00 00 00       	mov    edi,0x10
  104f54:	e8 81 fc ff ff       	call   104bda <idt_set>
  104f59:	48 c7 c0 06 80 10 00 	mov    rax,0x108006
  104f60:	b9 8e 00 00 00       	mov    ecx,0x8e
  104f65:	ba 08 00 00 00       	mov    edx,0x8
  104f6a:	48 89 c6             	mov    rsi,rax
  104f6d:	bf 11 00 00 00       	mov    edi,0x11
  104f72:	e8 63 fc ff ff       	call   104bda <idt_set>
  104f77:	48 c7 c0 14 80 10 00 	mov    rax,0x108014
  104f7e:	b9 8e 00 00 00       	mov    ecx,0x8e
  104f83:	ba 08 00 00 00       	mov    edx,0x8
  104f88:	48 89 c6             	mov    rsi,rax
  104f8b:	bf 12 00 00 00       	mov    edi,0x12
  104f90:	e8 45 fc ff ff       	call   104bda <idt_set>
  104f95:	48 c7 c0 22 80 10 00 	mov    rax,0x108022
  104f9c:	b9 8e 00 00 00       	mov    ecx,0x8e
  104fa1:	ba 08 00 00 00       	mov    edx,0x8
  104fa6:	48 89 c6             	mov    rsi,rax
  104fa9:	bf 13 00 00 00       	mov    edi,0x13
  104fae:	e8 27 fc ff ff       	call   104bda <idt_set>
  104fb3:	48 c7 c0 30 80 10 00 	mov    rax,0x108030
  104fba:	b9 8e 00 00 00       	mov    ecx,0x8e
  104fbf:	ba 08 00 00 00       	mov    edx,0x8
  104fc4:	48 89 c6             	mov    rsi,rax
  104fc7:	bf 14 00 00 00       	mov    edi,0x14
  104fcc:	e8 09 fc ff ff       	call   104bda <idt_set>
  104fd1:	48 c7 c0 3e 80 10 00 	mov    rax,0x10803e
  104fd8:	b9 8e 00 00 00       	mov    ecx,0x8e
  104fdd:	ba 08 00 00 00       	mov    edx,0x8
  104fe2:	48 89 c6             	mov    rsi,rax
  104fe5:	bf 15 00 00 00       	mov    edi,0x15
  104fea:	e8 eb fb ff ff       	call   104bda <idt_set>
  104fef:	48 c7 c0 4c 80 10 00 	mov    rax,0x10804c
  104ff6:	b9 8e 00 00 00       	mov    ecx,0x8e
  104ffb:	ba 08 00 00 00       	mov    edx,0x8
  105000:	48 89 c6             	mov    rsi,rax
  105003:	bf 16 00 00 00       	mov    edi,0x16
  105008:	e8 cd fb ff ff       	call   104bda <idt_set>
  10500d:	48 c7 c0 5a 80 10 00 	mov    rax,0x10805a
  105014:	b9 8e 00 00 00       	mov    ecx,0x8e
  105019:	ba 08 00 00 00       	mov    edx,0x8
  10501e:	48 89 c6             	mov    rsi,rax
  105021:	bf 17 00 00 00       	mov    edi,0x17
  105026:	e8 af fb ff ff       	call   104bda <idt_set>
  10502b:	48 c7 c0 68 80 10 00 	mov    rax,0x108068
  105032:	b9 8e 00 00 00       	mov    ecx,0x8e
  105037:	ba 08 00 00 00       	mov    edx,0x8
  10503c:	48 89 c6             	mov    rsi,rax
  10503f:	bf 18 00 00 00       	mov    edi,0x18
  105044:	e8 91 fb ff ff       	call   104bda <idt_set>
  105049:	48 c7 c0 76 80 10 00 	mov    rax,0x108076
  105050:	b9 8e 00 00 00       	mov    ecx,0x8e
  105055:	ba 08 00 00 00       	mov    edx,0x8
  10505a:	48 89 c6             	mov    rsi,rax
  10505d:	bf 19 00 00 00       	mov    edi,0x19
  105062:	e8 73 fb ff ff       	call   104bda <idt_set>
  105067:	48 c7 c0 84 80 10 00 	mov    rax,0x108084
  10506e:	b9 8e 00 00 00       	mov    ecx,0x8e
  105073:	ba 08 00 00 00       	mov    edx,0x8
  105078:	48 89 c6             	mov    rsi,rax
  10507b:	bf 1a 00 00 00       	mov    edi,0x1a
  105080:	e8 55 fb ff ff       	call   104bda <idt_set>
  105085:	48 c7 c0 92 80 10 00 	mov    rax,0x108092
  10508c:	b9 8e 00 00 00       	mov    ecx,0x8e
  105091:	ba 08 00 00 00       	mov    edx,0x8
  105096:	48 89 c6             	mov    rsi,rax
  105099:	bf 1b 00 00 00       	mov    edi,0x1b
  10509e:	e8 37 fb ff ff       	call   104bda <idt_set>
  1050a3:	48 c7 c0 a0 80 10 00 	mov    rax,0x1080a0
  1050aa:	b9 8e 00 00 00       	mov    ecx,0x8e
  1050af:	ba 08 00 00 00       	mov    edx,0x8
  1050b4:	48 89 c6             	mov    rsi,rax
  1050b7:	bf 1c 00 00 00       	mov    edi,0x1c
  1050bc:	e8 19 fb ff ff       	call   104bda <idt_set>
  1050c1:	48 c7 c0 ae 80 10 00 	mov    rax,0x1080ae
  1050c8:	b9 8e 00 00 00       	mov    ecx,0x8e
  1050cd:	ba 08 00 00 00       	mov    edx,0x8
  1050d2:	48 89 c6             	mov    rsi,rax
  1050d5:	bf 1d 00 00 00       	mov    edi,0x1d
  1050da:	e8 fb fa ff ff       	call   104bda <idt_set>
  1050df:	48 c7 c0 bc 80 10 00 	mov    rax,0x1080bc
  1050e6:	b9 8e 00 00 00       	mov    ecx,0x8e
  1050eb:	ba 08 00 00 00       	mov    edx,0x8
  1050f0:	48 89 c6             	mov    rsi,rax
  1050f3:	bf 1e 00 00 00       	mov    edi,0x1e
  1050f8:	e8 dd fa ff ff       	call   104bda <idt_set>
  1050fd:	48 c7 c0 ca 80 10 00 	mov    rax,0x1080ca
  105104:	b9 8e 00 00 00       	mov    ecx,0x8e
  105109:	ba 08 00 00 00       	mov    edx,0x8
  10510e:	48 89 c6             	mov    rsi,rax
  105111:	bf 1f 00 00 00       	mov    edi,0x1f
  105116:	e8 bf fa ff ff       	call   104bda <idt_set>
  10511b:	48 c7 c0 d8 80 10 00 	mov    rax,0x1080d8
  105122:	b9 8e 00 00 00       	mov    ecx,0x8e
  105127:	ba 08 00 00 00       	mov    edx,0x8
  10512c:	48 89 c6             	mov    rsi,rax
  10512f:	bf 20 00 00 00       	mov    edi,0x20
  105134:	e8 a1 fa ff ff       	call   104bda <idt_set>
  105139:	48 c7 c0 e6 80 10 00 	mov    rax,0x1080e6
  105140:	b9 8e 00 00 00       	mov    ecx,0x8e
  105145:	ba 08 00 00 00       	mov    edx,0x8
  10514a:	48 89 c6             	mov    rsi,rax
  10514d:	bf 21 00 00 00       	mov    edi,0x21
  105152:	e8 83 fa ff ff       	call   104bda <idt_set>
  105157:	48 c7 c0 f4 80 10 00 	mov    rax,0x1080f4
  10515e:	b9 8e 00 00 00       	mov    ecx,0x8e
  105163:	ba 08 00 00 00       	mov    edx,0x8
  105168:	48 89 c6             	mov    rsi,rax
  10516b:	bf 22 00 00 00       	mov    edi,0x22
  105170:	e8 65 fa ff ff       	call   104bda <idt_set>
  105175:	48 c7 c0 02 81 10 00 	mov    rax,0x108102
  10517c:	b9 8e 00 00 00       	mov    ecx,0x8e
  105181:	ba 08 00 00 00       	mov    edx,0x8
  105186:	48 89 c6             	mov    rsi,rax
  105189:	bf 23 00 00 00       	mov    edi,0x23
  10518e:	e8 47 fa ff ff       	call   104bda <idt_set>
  105193:	48 c7 c0 10 81 10 00 	mov    rax,0x108110
  10519a:	b9 8e 00 00 00       	mov    ecx,0x8e
  10519f:	ba 08 00 00 00       	mov    edx,0x8
  1051a4:	48 89 c6             	mov    rsi,rax
  1051a7:	bf 24 00 00 00       	mov    edi,0x24
  1051ac:	e8 29 fa ff ff       	call   104bda <idt_set>
  1051b1:	48 c7 c0 1e 81 10 00 	mov    rax,0x10811e
  1051b8:	b9 8e 00 00 00       	mov    ecx,0x8e
  1051bd:	ba 08 00 00 00       	mov    edx,0x8
  1051c2:	48 89 c6             	mov    rsi,rax
  1051c5:	bf 25 00 00 00       	mov    edi,0x25
  1051ca:	e8 0b fa ff ff       	call   104bda <idt_set>
  1051cf:	48 c7 c0 2c 81 10 00 	mov    rax,0x10812c
  1051d6:	b9 8e 00 00 00       	mov    ecx,0x8e
  1051db:	ba 08 00 00 00       	mov    edx,0x8
  1051e0:	48 89 c6             	mov    rsi,rax
  1051e3:	bf 26 00 00 00       	mov    edi,0x26
  1051e8:	e8 ed f9 ff ff       	call   104bda <idt_set>
  1051ed:	48 c7 c0 3a 81 10 00 	mov    rax,0x10813a
  1051f4:	b9 8e 00 00 00       	mov    ecx,0x8e
  1051f9:	ba 08 00 00 00       	mov    edx,0x8
  1051fe:	48 89 c6             	mov    rsi,rax
  105201:	bf 27 00 00 00       	mov    edi,0x27
  105206:	e8 cf f9 ff ff       	call   104bda <idt_set>
  10520b:	48 c7 c0 48 81 10 00 	mov    rax,0x108148
  105212:	b9 8e 00 00 00       	mov    ecx,0x8e
  105217:	ba 08 00 00 00       	mov    edx,0x8
  10521c:	48 89 c6             	mov    rsi,rax
  10521f:	bf 28 00 00 00       	mov    edi,0x28
  105224:	e8 b1 f9 ff ff       	call   104bda <idt_set>
  105229:	48 c7 c0 56 81 10 00 	mov    rax,0x108156
  105230:	b9 8e 00 00 00       	mov    ecx,0x8e
  105235:	ba 08 00 00 00       	mov    edx,0x8
  10523a:	48 89 c6             	mov    rsi,rax
  10523d:	bf 29 00 00 00       	mov    edi,0x29
  105242:	e8 93 f9 ff ff       	call   104bda <idt_set>
  105247:	48 c7 c0 64 81 10 00 	mov    rax,0x108164
  10524e:	b9 8e 00 00 00       	mov    ecx,0x8e
  105253:	ba 08 00 00 00       	mov    edx,0x8
  105258:	48 89 c6             	mov    rsi,rax
  10525b:	bf 2a 00 00 00       	mov    edi,0x2a
  105260:	e8 75 f9 ff ff       	call   104bda <idt_set>
  105265:	48 c7 c0 72 81 10 00 	mov    rax,0x108172
  10526c:	b9 8e 00 00 00       	mov    ecx,0x8e
  105271:	ba 08 00 00 00       	mov    edx,0x8
  105276:	48 89 c6             	mov    rsi,rax
  105279:	bf 2b 00 00 00       	mov    edi,0x2b
  10527e:	e8 57 f9 ff ff       	call   104bda <idt_set>
  105283:	48 c7 c0 80 81 10 00 	mov    rax,0x108180
  10528a:	b9 8e 00 00 00       	mov    ecx,0x8e
  10528f:	ba 08 00 00 00       	mov    edx,0x8
  105294:	48 89 c6             	mov    rsi,rax
  105297:	bf 2c 00 00 00       	mov    edi,0x2c
  10529c:	e8 39 f9 ff ff       	call   104bda <idt_set>
  1052a1:	48 c7 c0 8e 81 10 00 	mov    rax,0x10818e
  1052a8:	b9 8e 00 00 00       	mov    ecx,0x8e
  1052ad:	ba 08 00 00 00       	mov    edx,0x8
  1052b2:	48 89 c6             	mov    rsi,rax
  1052b5:	bf 2d 00 00 00       	mov    edi,0x2d
  1052ba:	e8 1b f9 ff ff       	call   104bda <idt_set>
  1052bf:	48 c7 c0 9c 81 10 00 	mov    rax,0x10819c
  1052c6:	b9 8e 00 00 00       	mov    ecx,0x8e
  1052cb:	ba 08 00 00 00       	mov    edx,0x8
  1052d0:	48 89 c6             	mov    rsi,rax
  1052d3:	bf 2e 00 00 00       	mov    edi,0x2e
  1052d8:	e8 fd f8 ff ff       	call   104bda <idt_set>
  1052dd:	48 c7 c0 aa 81 10 00 	mov    rax,0x1081aa
  1052e4:	b9 8e 00 00 00       	mov    ecx,0x8e
  1052e9:	ba 08 00 00 00       	mov    edx,0x8
  1052ee:	48 89 c6             	mov    rsi,rax
  1052f1:	bf 2f 00 00 00       	mov    edi,0x2f
  1052f6:	e8 df f8 ff ff       	call   104bda <idt_set>
  1052fb:	48 c7 c0 c0 f0 10 00 	mov    rax,0x10f0c0
  105302:	48 89 c7             	mov    rdi,rax
  105305:	e8 16 2c 00 00       	call   107f20 <lidt>
  10530a:	90                   	nop
  10530b:	5d                   	pop    rbp
  10530c:	c3                   	ret    

000000000010530d <cpu::tss::tss_init()>:
  10530d:	55                   	push   rbp
  10530e:	48 89 e5             	mov    rbp,rsp
  105311:	ba 68 00 00 00       	mov    edx,0x68
  105316:	be 00 00 00 00       	mov    esi,0x0
  10531b:	48 8d 3d be 9d 00 00 	lea    rdi,[rip+0x9dbe]        # 10f0e0 <s_tss_descriptors>
  105322:	e8 39 17 00 00       	call   106a60 <memory::operations::memset(void*, unsigned char, unsigned long)>
  105327:	90                   	nop
  105328:	5d                   	pop    rbp
  105329:	c3                   	ret    

000000000010532a <tss_install>:
  10532a:	55                   	push   rbp
  10532b:	48 89 e5             	mov    rbp,rsp
  10532e:	48 83 ec 20          	sub    rsp,0x20
  105332:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
  105335:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  105339:	e8 93 0e 00 00       	call   1061d1 <request_page>
  10533e:	48 05 00 10 00 00    	add    rax,0x1000
  105344:	48 89 05 fd 9d 00 00 	mov    QWORD PTR [rip+0x9dfd],rax        # 10f148 <isr_stack>
  10534b:	e8 81 0e 00 00       	call   1061d1 <request_page>
  105350:	48 05 00 10 00 00    	add    rax,0x1000
  105356:	48 89 05 f3 9d 00 00 	mov    QWORD PTR [rip+0x9df3],rax        # 10f150 <irq_stack>
  10535d:	e8 6f 0e 00 00       	call   1061d1 <request_page>
  105362:	48 05 00 10 00 00    	add    rax,0x1000
  105368:	48 89 05 e9 9d 00 00 	mov    QWORD PTR [rip+0x9de9],rax        # 10f158 <sgi_stack>
  10536f:	48 8b 05 d2 9d 00 00 	mov    rax,QWORD PTR [rip+0x9dd2]        # 10f148 <isr_stack>
  105376:	48 2d 00 10 00 00    	sub    rax,0x1000
  10537c:	48 89 c2             	mov    rdx,rax
  10537f:	48 8b 05 c2 9d 00 00 	mov    rax,QWORD PTR [rip+0x9dc2]        # 10f148 <isr_stack>
  105386:	48 2d 00 10 00 00    	sub    rax,0x1000
  10538c:	48 89 d6             	mov    rsi,rdx
  10538f:	48 89 c7             	mov    rdi,rax
  105392:	e8 55 11 00 00       	call   1064ec <memory::paging::map_memory(void*, void*)>
  105397:	48 8b 05 b2 9d 00 00 	mov    rax,QWORD PTR [rip+0x9db2]        # 10f150 <irq_stack>
  10539e:	48 2d 00 10 00 00    	sub    rax,0x1000
  1053a4:	48 89 c2             	mov    rdx,rax
  1053a7:	48 8b 05 a2 9d 00 00 	mov    rax,QWORD PTR [rip+0x9da2]        # 10f150 <irq_stack>
  1053ae:	48 2d 00 10 00 00    	sub    rax,0x1000
  1053b4:	48 89 d6             	mov    rsi,rdx
  1053b7:	48 89 c7             	mov    rdi,rax
  1053ba:	e8 2d 11 00 00       	call   1064ec <memory::paging::map_memory(void*, void*)>
  1053bf:	48 8b 05 92 9d 00 00 	mov    rax,QWORD PTR [rip+0x9d92]        # 10f158 <sgi_stack>
  1053c6:	48 2d 00 10 00 00    	sub    rax,0x1000
  1053cc:	48 89 c2             	mov    rdx,rax
  1053cf:	48 8b 05 82 9d 00 00 	mov    rax,QWORD PTR [rip+0x9d82]        # 10f158 <sgi_stack>
  1053d6:	48 2d 00 10 00 00    	sub    rax,0x1000
  1053dc:	48 89 d6             	mov    rsi,rdx
  1053df:	48 89 c7             	mov    rdi,rax
  1053e2:	e8 05 11 00 00       	call   1064ec <memory::paging::map_memory(void*, void*)>
  1053e7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  1053ea:	48 63 d0             	movsxd rdx,eax
  1053ed:	48 89 d0             	mov    rax,rdx
  1053f0:	48 01 c0             	add    rax,rax
  1053f3:	48 01 d0             	add    rax,rdx
  1053f6:	48 c1 e0 02          	shl    rax,0x2
  1053fa:	48 01 d0             	add    rax,rdx
  1053fd:	48 c1 e0 03          	shl    rax,0x3
  105401:	48 8d 15 d8 9c 00 00 	lea    rdx,[rip+0x9cd8]        # 10f0e0 <s_tss_descriptors>
  105408:	48 01 d0             	add    rax,rdx
  10540b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  10540f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105413:	ba 68 00 00 00       	mov    edx,0x68
  105418:	be 00 00 00 00       	mov    esi,0x0
  10541d:	48 89 c7             	mov    rdi,rax
  105420:	e8 3b 16 00 00       	call   106a60 <memory::operations::memset(void*, unsigned char, unsigned long)>
  105425:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105429:	be 68 00 00 00       	mov    esi,0x68
  10542e:	48 89 c7             	mov    rdi,rax
  105431:	e8 6d 03 00 00       	call   1057a3 <cpu::gdt::gdt_install_tss(unsigned long, unsigned long)>
  105436:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  105439:	48 63 d0             	movsxd rdx,eax
  10543c:	48 89 d0             	mov    rax,rdx
  10543f:	48 01 c0             	add    rax,rax
  105442:	48 01 d0             	add    rax,rdx
  105445:	48 c1 e0 02          	shl    rax,0x2
  105449:	48 01 d0             	add    rax,rdx
  10544c:	48 c1 e0 03          	shl    rax,0x3
  105450:	48 89 c1             	mov    rcx,rax
  105453:	48 8d 15 86 9c 00 00 	lea    rdx,[rip+0x9c86]        # 10f0e0 <s_tss_descriptors>
  10545a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  10545e:	48 89 44 11 04       	mov    QWORD PTR [rcx+rdx*1+0x4],rax
  105463:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  105466:	48 63 d0             	movsxd rdx,eax
  105469:	48 89 d0             	mov    rax,rdx
  10546c:	48 01 c0             	add    rax,rax
  10546f:	48 01 d0             	add    rax,rdx
  105472:	48 c1 e0 02          	shl    rax,0x2
  105476:	48 01 d0             	add    rax,rdx
  105479:	48 c1 e0 03          	shl    rax,0x3
  10547d:	48 89 c2             	mov    rdx,rax
  105480:	48 8d 05 bf 9c 00 00 	lea    rax,[rip+0x9cbf]        # 10f146 <s_tss_descriptors+0x66>
  105487:	66 c7 04 02 68 00    	mov    WORD PTR [rdx+rax*1],0x68
  10548d:	48 8b 05 b4 9c 00 00 	mov    rax,QWORD PTR [rip+0x9cb4]        # 10f148 <isr_stack>
  105494:	48 89 c1             	mov    rcx,rax
  105497:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  10549a:	48 63 d0             	movsxd rdx,eax
  10549d:	48 89 d0             	mov    rax,rdx
  1054a0:	48 01 c0             	add    rax,rax
  1054a3:	48 01 d0             	add    rax,rdx
  1054a6:	48 c1 e0 02          	shl    rax,0x2
  1054aa:	48 01 d0             	add    rax,rdx
  1054ad:	48 c1 e0 03          	shl    rax,0x3
  1054b1:	48 89 c2             	mov    rdx,rax
  1054b4:	48 8d 05 45 9c 00 00 	lea    rax,[rip+0x9c45]        # 10f100 <s_tss_descriptors+0x20>
  1054bb:	48 89 4c 02 04       	mov    QWORD PTR [rdx+rax*1+0x4],rcx
  1054c0:	48 8b 05 89 9c 00 00 	mov    rax,QWORD PTR [rip+0x9c89]        # 10f150 <irq_stack>
  1054c7:	48 89 c1             	mov    rcx,rax
  1054ca:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  1054cd:	48 63 d0             	movsxd rdx,eax
  1054d0:	48 89 d0             	mov    rax,rdx
  1054d3:	48 01 c0             	add    rax,rax
  1054d6:	48 01 d0             	add    rax,rdx
  1054d9:	48 c1 e0 02          	shl    rax,0x2
  1054dd:	48 01 d0             	add    rax,rdx
  1054e0:	48 c1 e0 03          	shl    rax,0x3
  1054e4:	48 89 c2             	mov    rdx,rax
  1054e7:	48 8d 05 1a 9c 00 00 	lea    rax,[rip+0x9c1a]        # 10f108 <s_tss_descriptors+0x28>
  1054ee:	48 89 4c 02 04       	mov    QWORD PTR [rdx+rax*1+0x4],rcx
  1054f3:	48 8b 05 5e 9c 00 00 	mov    rax,QWORD PTR [rip+0x9c5e]        # 10f158 <sgi_stack>
  1054fa:	48 89 c1             	mov    rcx,rax
  1054fd:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  105500:	48 63 d0             	movsxd rdx,eax
  105503:	48 89 d0             	mov    rax,rdx
  105506:	48 01 c0             	add    rax,rax
  105509:	48 01 d0             	add    rax,rdx
  10550c:	48 c1 e0 02          	shl    rax,0x2
  105510:	48 01 d0             	add    rax,rdx
  105513:	48 c1 e0 03          	shl    rax,0x3
  105517:	48 89 c2             	mov    rdx,rax
  10551a:	48 8d 05 ef 9b 00 00 	lea    rax,[rip+0x9bef]        # 10f110 <s_tss_descriptors+0x30>
  105521:	48 89 4c 02 04       	mov    QWORD PTR [rdx+rax*1+0x4],rcx
  105526:	bf 28 00 00 00       	mov    edi,0x28
  10552b:	e8 4b 2d 00 00       	call   10827b <load_tss>
  105530:	90                   	nop
  105531:	c9                   	leave  
  105532:	c3                   	ret    

0000000000105533 <cpu::tss::tss_setstack(int, unsigned long)>:
  105533:	55                   	push   rbp
  105534:	48 89 e5             	mov    rbp,rsp
  105537:	48 83 ec 10          	sub    rsp,0x10
  10553b:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  10553e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  105542:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  105545:	48 63 d0             	movsxd rdx,eax
  105548:	48 89 d0             	mov    rax,rdx
  10554b:	48 01 c0             	add    rax,rax
  10554e:	48 01 d0             	add    rax,rdx
  105551:	48 c1 e0 02          	shl    rax,0x2
  105555:	48 01 d0             	add    rax,rdx
  105558:	48 c1 e0 03          	shl    rax,0x3
  10555c:	48 89 c1             	mov    rcx,rax
  10555f:	48 8d 15 7a 9b 00 00 	lea    rdx,[rip+0x9b7a]        # 10f0e0 <s_tss_descriptors>
  105566:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  10556a:	48 89 44 11 04       	mov    QWORD PTR [rcx+rdx*1+0x4],rax
  10556f:	90                   	nop
  105570:	c9                   	leave  
  105571:	c3                   	ret    

0000000000105572 <tss_get>:
  105572:	55                   	push   rbp
  105573:	48 89 e5             	mov    rbp,rsp
  105576:	48 83 ec 08          	sub    rsp,0x8
  10557a:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  10557d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  105580:	48 63 d0             	movsxd rdx,eax
  105583:	48 89 d0             	mov    rax,rdx
  105586:	48 01 c0             	add    rax,rax
  105589:	48 01 d0             	add    rax,rdx
  10558c:	48 c1 e0 02          	shl    rax,0x2
  105590:	48 01 d0             	add    rax,rdx
  105593:	48 c1 e0 03          	shl    rax,0x3
  105597:	48 8d 15 42 9b 00 00 	lea    rdx,[rip+0x9b42]        # 10f0e0 <s_tss_descriptors>
  10559e:	48 01 d0             	add    rax,rdx
  1055a1:	c9                   	leave  
  1055a2:	c3                   	ret    

00000000001055a3 <userspace_debug_catch>:
  1055a3:	55                   	push   rbp
  1055a4:	48 89 e5             	mov    rbp,rsp
  1055a7:	90                   	nop
  1055a8:	5d                   	pop    rbp
  1055a9:	c3                   	ret    

00000000001055aa <gdt_init>:
  1055aa:	55                   	push   rbp
  1055ab:	48 89 e5             	mov    rbp,rsp
  1055ae:	66 c7 05 c9 aa 00 00 	mov    WORD PTR [rip+0xaac9],0x7f        # 110080 <s_gdt>
  1055b5:	7f 00 
  1055b7:	48 8d 05 42 aa 00 00 	lea    rax,[rip+0xaa42]        # 110000 <s_gdt_descriptors>
  1055be:	48 89 05 bd aa 00 00 	mov    QWORD PTR [rip+0xaabd],rax        # 110082 <s_gdt+0x2>
  1055c5:	b9 00 00 00 00       	mov    ecx,0x0
  1055ca:	ba 00 00 00 00       	mov    edx,0x0
  1055cf:	be 00 00 00 00       	mov    esi,0x0
  1055d4:	bf 00 00 00 00       	mov    edi,0x0
  1055d9:	e8 73 00 00 00       	call   105651 <cpu::gdt::gdt_install_descriptor(unsigned long, unsigned long, unsigned char, unsigned char)>
  1055de:	b9 a0 00 00 00       	mov    ecx,0xa0
  1055e3:	ba 9a 00 00 00       	mov    edx,0x9a
  1055e8:	be 00 00 00 00       	mov    esi,0x0
  1055ed:	bf 00 00 00 00       	mov    edi,0x0
  1055f2:	e8 5a 00 00 00       	call   105651 <cpu::gdt::gdt_install_descriptor(unsigned long, unsigned long, unsigned char, unsigned char)>
  1055f7:	b9 a0 00 00 00       	mov    ecx,0xa0
  1055fc:	ba 92 00 00 00       	mov    edx,0x92
  105601:	be 00 00 00 00       	mov    esi,0x0
  105606:	bf 00 00 00 00       	mov    edi,0x0
  10560b:	e8 41 00 00 00       	call   105651 <cpu::gdt::gdt_install_descriptor(unsigned long, unsigned long, unsigned char, unsigned char)>
  105610:	b9 a0 00 00 00       	mov    ecx,0xa0
  105615:	ba f2 00 00 00       	mov    edx,0xf2
  10561a:	be 00 00 00 00       	mov    esi,0x0
  10561f:	bf 00 00 00 00       	mov    edi,0x0
  105624:	e8 28 00 00 00       	call   105651 <cpu::gdt::gdt_install_descriptor(unsigned long, unsigned long, unsigned char, unsigned char)>
  105629:	b9 a0 00 00 00       	mov    ecx,0xa0
  10562e:	ba fa 00 00 00       	mov    edx,0xfa
  105633:	be 00 00 00 00       	mov    esi,0x0
  105638:	bf 00 00 00 00       	mov    edi,0x0
  10563d:	e8 0f 00 00 00       	call   105651 <cpu::gdt::gdt_install_descriptor(unsigned long, unsigned long, unsigned char, unsigned char)>
  105642:	48 8d 3d 37 aa 00 00 	lea    rdi,[rip+0xaa37]        # 110080 <s_gdt>
  105649:	e8 12 2c 00 00       	call   108260 <load_gdt>
  10564e:	90                   	nop
  10564f:	5d                   	pop    rbp
  105650:	c3                   	ret    

0000000000105651 <cpu::gdt::gdt_install_descriptor(unsigned long, unsigned long, unsigned char, unsigned char)>:
  105651:	55                   	push   rbp
  105652:	48 89 e5             	mov    rbp,rsp
  105655:	48 83 ec 18          	sub    rsp,0x18
  105659:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  10565d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  105661:	89 c8                	mov    eax,ecx
  105663:	88 55 ec             	mov    BYTE PTR [rbp-0x14],dl
  105666:	88 45 e8             	mov    BYTE PTR [rbp-0x18],al
  105669:	8b 05 1d aa 00 00    	mov    eax,DWORD PTR [rip+0xaa1d]        # 11008c <s_gdt_index>
  10566f:	83 f8 0f             	cmp    eax,0xf
  105672:	0f 87 28 01 00 00    	ja     1057a0 <cpu::gdt::gdt_install_descriptor(unsigned long, unsigned long, unsigned char, unsigned char)+0x14f>
  105678:	8b 15 0e aa 00 00    	mov    edx,DWORD PTR [rip+0xaa0e]        # 11008c <s_gdt_index>
  10567e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105682:	89 c1                	mov    ecx,eax
  105684:	89 d0                	mov    eax,edx
  105686:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  10568d:	00 
  10568e:	48 8d 05 6d a9 00 00 	lea    rax,[rip+0xa96d]        # 110002 <s_gdt_descriptors+0x2>
  105695:	66 89 0c 02          	mov    WORD PTR [rdx+rax*1],cx
  105699:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  10569d:	48 c1 e8 10          	shr    rax,0x10
  1056a1:	48 89 c2             	mov    rdx,rax
  1056a4:	8b 05 e2 a9 00 00    	mov    eax,DWORD PTR [rip+0xa9e2]        # 11008c <s_gdt_index>
  1056aa:	89 d1                	mov    ecx,edx
  1056ac:	89 c0                	mov    eax,eax
  1056ae:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  1056b5:	00 
  1056b6:	48 8d 05 47 a9 00 00 	lea    rax,[rip+0xa947]        # 110004 <s_gdt_descriptors+0x4>
  1056bd:	88 0c 02             	mov    BYTE PTR [rdx+rax*1],cl
  1056c0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1056c4:	48 c1 e8 18          	shr    rax,0x18
  1056c8:	48 89 c2             	mov    rdx,rax
  1056cb:	8b 05 bb a9 00 00    	mov    eax,DWORD PTR [rip+0xa9bb]        # 11008c <s_gdt_index>
  1056d1:	89 d1                	mov    ecx,edx
  1056d3:	89 c0                	mov    eax,eax
  1056d5:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  1056dc:	00 
  1056dd:	48 8d 05 23 a9 00 00 	lea    rax,[rip+0xa923]        # 110007 <s_gdt_descriptors+0x7>
  1056e4:	88 0c 02             	mov    BYTE PTR [rdx+rax*1],cl
  1056e7:	8b 15 9f a9 00 00    	mov    edx,DWORD PTR [rip+0xa99f]        # 11008c <s_gdt_index>
  1056ed:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  1056f1:	89 c1                	mov    ecx,eax
  1056f3:	89 d0                	mov    eax,edx
  1056f5:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  1056fc:	00 
  1056fd:	48 8d 05 fc a8 00 00 	lea    rax,[rip+0xa8fc]        # 110000 <s_gdt_descriptors>
  105704:	66 89 0c 02          	mov    WORD PTR [rdx+rax*1],cx
  105708:	8b 05 7e a9 00 00    	mov    eax,DWORD PTR [rip+0xa97e]        # 11008c <s_gdt_index>
  10570e:	89 c0                	mov    eax,eax
  105710:	48 8d 0c c5 00 00 00 	lea    rcx,[rax*8+0x0]
  105717:	00 
  105718:	48 8d 15 e6 a8 00 00 	lea    rdx,[rip+0xa8e6]        # 110005 <s_gdt_descriptors+0x5>
  10571f:	0f b6 45 ec          	movzx  eax,BYTE PTR [rbp-0x14]
  105723:	88 04 11             	mov    BYTE PTR [rcx+rdx*1],al
  105726:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  10572a:	48 c1 e8 10          	shr    rax,0x10
  10572e:	89 c2                	mov    edx,eax
  105730:	8b 05 56 a9 00 00    	mov    eax,DWORD PTR [rip+0xa956]        # 11008c <s_gdt_index>
  105736:	89 d1                	mov    ecx,edx
  105738:	83 e1 0f             	and    ecx,0xf
  10573b:	89 c0                	mov    eax,eax
  10573d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  105744:	00 
  105745:	48 8d 05 ba a8 00 00 	lea    rax,[rip+0xa8ba]        # 110006 <s_gdt_descriptors+0x6>
  10574c:	88 0c 02             	mov    BYTE PTR [rdx+rax*1],cl
  10574f:	8b 05 37 a9 00 00    	mov    eax,DWORD PTR [rip+0xa937]        # 11008c <s_gdt_index>
  105755:	89 c0                	mov    eax,eax
  105757:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  10575e:	00 
  10575f:	48 8d 05 a0 a8 00 00 	lea    rax,[rip+0xa8a0]        # 110006 <s_gdt_descriptors+0x6>
  105766:	0f b6 14 02          	movzx  edx,BYTE PTR [rdx+rax*1]
  10576a:	0f b6 45 e8          	movzx  eax,BYTE PTR [rbp-0x18]
  10576e:	83 e0 f0             	and    eax,0xfffffff0
  105771:	89 c1                	mov    ecx,eax
  105773:	8b 05 13 a9 00 00    	mov    eax,DWORD PTR [rip+0xa913]        # 11008c <s_gdt_index>
  105779:	09 d1                	or     ecx,edx
  10577b:	89 c0                	mov    eax,eax
  10577d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  105784:	00 
  105785:	48 8d 05 7a a8 00 00 	lea    rax,[rip+0xa87a]        # 110006 <s_gdt_descriptors+0x6>
  10578c:	88 0c 02             	mov    BYTE PTR [rdx+rax*1],cl
  10578f:	8b 05 f7 a8 00 00    	mov    eax,DWORD PTR [rip+0xa8f7]        # 11008c <s_gdt_index>
  105795:	83 c0 01             	add    eax,0x1
  105798:	89 05 ee a8 00 00    	mov    DWORD PTR [rip+0xa8ee],eax        # 11008c <s_gdt_index>
  10579e:	eb 01                	jmp    1057a1 <cpu::gdt::gdt_install_descriptor(unsigned long, unsigned long, unsigned char, unsigned char)+0x150>
  1057a0:	90                   	nop
  1057a1:	c9                   	leave  
  1057a2:	c3                   	ret    

00000000001057a3 <cpu::gdt::gdt_install_tss(unsigned long, unsigned long)>:
  1057a3:	55                   	push   rbp
  1057a4:	48 89 e5             	mov    rbp,rsp
  1057a7:	48 83 ec 20          	sub    rsp,0x20
  1057ab:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  1057af:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  1057b3:	66 c7 45 fe 89 00    	mov    WORD PTR [rbp-0x2],0x89
  1057b9:	8b 05 cd a8 00 00    	mov    eax,DWORD PTR [rip+0xa8cd]        # 11008c <s_gdt_index>
  1057bf:	89 c0                	mov    eax,eax
  1057c1:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  1057c8:	00 
  1057c9:	48 8d 05 30 a8 00 00 	lea    rax,[rip+0xa830]        # 110000 <s_gdt_descriptors>
  1057d0:	48 01 d0             	add    rax,rdx
  1057d3:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  1057d7:	8b 05 af a8 00 00    	mov    eax,DWORD PTR [rip+0xa8af]        # 11008c <s_gdt_index>
  1057dd:	83 f8 0f             	cmp    eax,0xf
  1057e0:	0f 87 8b 00 00 00    	ja     105871 <cpu::gdt::gdt_install_tss(unsigned long, unsigned long)+0xce>
  1057e6:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  1057ea:	89 c2                	mov    edx,eax
  1057ec:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  1057f0:	88 50 05             	mov    BYTE PTR [rax+0x5],dl
  1057f3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  1057f7:	89 c2                	mov    edx,eax
  1057f9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  1057fd:	66 89 50 02          	mov    WORD PTR [rax+0x2],dx
  105801:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  105805:	48 c1 e8 10          	shr    rax,0x10
  105809:	89 c2                	mov    edx,eax
  10580b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  10580f:	88 50 04             	mov    BYTE PTR [rax+0x4],dl
  105812:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  105816:	48 c1 e8 18          	shr    rax,0x18
  10581a:	89 c2                	mov    edx,eax
  10581c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  105820:	88 50 07             	mov    BYTE PTR [rax+0x7],dl
  105823:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  105827:	48 c1 e8 20          	shr    rax,0x20
  10582b:	89 c2                	mov    edx,eax
  10582d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  105831:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
  105834:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  105838:	89 c2                	mov    edx,eax
  10583a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  10583e:	66 89 10             	mov    WORD PTR [rax],dx
  105841:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  105845:	48 c1 e8 10          	shr    rax,0x10
  105849:	83 e0 0f             	and    eax,0xf
  10584c:	89 c2                	mov    edx,eax
  10584e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  105852:	88 50 06             	mov    BYTE PTR [rax+0x6],dl
  105855:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  105859:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
  105860:	8b 05 26 a8 00 00    	mov    eax,DWORD PTR [rip+0xa826]        # 11008c <s_gdt_index>
  105866:	83 c0 02             	add    eax,0x2
  105869:	89 05 1d a8 00 00    	mov    DWORD PTR [rip+0xa81d],eax        # 11008c <s_gdt_index>
  10586f:	eb 01                	jmp    105872 <cpu::gdt::gdt_install_tss(unsigned long, unsigned long)+0xcf>
  105871:	90                   	nop
  105872:	c9                   	leave  
  105873:	c3                   	ret    

0000000000105874 <memory_types(unsigned short)>:
  105874:	55                   	push   rbp
  105875:	48 89 e5             	mov    rbp,rsp
  105878:	48 83 ec 08          	sub    rsp,0x8
  10587c:	89 f8                	mov    eax,edi
  10587e:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  105882:	0f b7 45 fc          	movzx  eax,WORD PTR [rbp-0x4]
  105886:	83 f8 0a             	cmp    eax,0xa
  105889:	7f 2b                	jg     1058b6 <memory_types(unsigned short)+0x42>
  10588b:	85 c0                	test   eax,eax
  10588d:	7e 6f                	jle    1058fe <memory_types(unsigned short)+0x8a>
  10588f:	83 f8 0a             	cmp    eax,0xa
  105892:	77 6a                	ja     1058fe <memory_types(unsigned short)+0x8a>
  105894:	89 c0                	mov    eax,eax
  105896:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
  10589d:	00 
  10589e:	48 8d 05 83 57 00 00 	lea    rax,[rip+0x5783]        # 10b028 <BASE_GRAN+0x9f>
  1058a5:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
  1058a8:	48 98                	cdqe   
  1058aa:	48 8d 15 77 57 00 00 	lea    rdx,[rip+0x5777]        # 10b028 <BASE_GRAN+0x9f>
  1058b1:	48 01 d0             	add    rax,rdx
  1058b4:	ff e0                	jmp    rax
  1058b6:	3d 00 10 00 00       	cmp    eax,0x1000
  1058bb:	74 38                	je     1058f5 <memory_types(unsigned short)+0x81>
  1058bd:	eb 3f                	jmp    1058fe <memory_types(unsigned short)+0x8a>
  1058bf:	48 8d 05 c6 56 00 00 	lea    rax,[rip+0x56c6]        # 10af8c <BASE_GRAN+0x3>
  1058c6:	eb 3d                	jmp    105905 <memory_types(unsigned short)+0x91>
  1058c8:	48 8d 05 d1 56 00 00 	lea    rax,[rip+0x56d1]        # 10afa0 <BASE_GRAN+0x17>
  1058cf:	eb 34                	jmp    105905 <memory_types(unsigned short)+0x91>
  1058d1:	48 8d 05 d8 56 00 00 	lea    rax,[rip+0x56d8]        # 10afb0 <BASE_GRAN+0x27>
  1058d8:	eb 2b                	jmp    105905 <memory_types(unsigned short)+0x91>
  1058da:	48 8d 05 e7 56 00 00 	lea    rax,[rip+0x56e7]        # 10afc8 <BASE_GRAN+0x3f>
  1058e1:	eb 22                	jmp    105905 <memory_types(unsigned short)+0x91>
  1058e3:	48 8d 05 ee 56 00 00 	lea    rax,[rip+0x56ee]        # 10afd8 <BASE_GRAN+0x4f>
  1058ea:	eb 19                	jmp    105905 <memory_types(unsigned short)+0x91>
  1058ec:	48 8d 05 f3 56 00 00 	lea    rax,[rip+0x56f3]        # 10afe6 <BASE_GRAN+0x5d>
  1058f3:	eb 10                	jmp    105905 <memory_types(unsigned short)+0x91>
  1058f5:	48 8d 05 f8 56 00 00 	lea    rax,[rip+0x56f8]        # 10aff4 <BASE_GRAN+0x6b>
  1058fc:	eb 07                	jmp    105905 <memory_types(unsigned short)+0x91>
  1058fe:	48 8d 05 0d 57 00 00 	lea    rax,[rip+0x570d]        # 10b012 <BASE_GRAN+0x89>
  105905:	c9                   	leave  
  105906:	c3                   	ret    

0000000000105907 <init_bitmap(unsigned long, void*)>:
  105907:	55                   	push   rbp
  105908:	48 89 e5             	mov    rbp,rsp
  10590b:	48 83 ec 20          	sub    rsp,0x20
  10590f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  105913:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  105917:	48 c7 c0 b0 00 11 00 	mov    rax,0x1100b0
  10591e:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  105922:	48 89 10             	mov    QWORD PTR [rax],rdx
  105925:	48 c7 c0 b0 00 11 00 	mov    rax,0x1100b0
  10592c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  105930:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
  105934:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  10593b:	00 
  10593c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105940:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
  105944:	73 1c                	jae    105962 <init_bitmap(unsigned long, void*)+0x5b>
  105946:	48 c7 c0 b0 00 11 00 	mov    rax,0x1100b0
  10594d:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  105951:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105955:	48 01 d0             	add    rax,rdx
  105958:	c6 00 00             	mov    BYTE PTR [rax],0x0
  10595b:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
  105960:	eb da                	jmp    10593c <init_bitmap(unsigned long, void*)+0x35>
  105962:	90                   	nop
  105963:	c9                   	leave  
  105964:	c3                   	ret    

0000000000105965 <memory::allocation::get_total_memory_size(stivale_memory_map*, unsigned long, unsigned long)>:
  105965:	55                   	push   rbp
  105966:	48 89 e5             	mov    rbp,rsp
  105969:	48 83 ec 38          	sub    rsp,0x38
  10596d:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  105971:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  105975:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
  105979:	48 8b 05 70 a7 00 00 	mov    rax,QWORD PTR [rip+0xa770]        # 1100f0 <memory::allocation::get_total_memory_size(stivale_memory_map*, unsigned long, unsigned long)::memory_size_bytes>
  105980:	48 85 c0             	test   rax,rax
  105983:	74 0c                	je     105991 <memory::allocation::get_total_memory_size(stivale_memory_map*, unsigned long, unsigned long)+0x2c>
  105985:	48 8b 05 64 a7 00 00 	mov    rax,QWORD PTR [rip+0xa764]        # 1100f0 <memory::allocation::get_total_memory_size(stivale_memory_map*, unsigned long, unsigned long)::memory_size_bytes>
  10598c:	e9 b9 00 00 00       	jmp    105a4a <memory::allocation::get_total_memory_size(stivale_memory_map*, unsigned long, unsigned long)+0xe5>
  105991:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  105995:	ba 00 00 00 00       	mov    edx,0x0
  10599a:	48 f7 75 c8          	div    QWORD PTR [rbp-0x38]
  10599e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  1059a2:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  1059a9:	00 
  1059aa:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  1059b1:	00 
  1059b2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  1059b6:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
  1059ba:	73 40                	jae    1059fc <memory::allocation::get_total_memory_size(stivale_memory_map*, unsigned long, unsigned long)+0x97>
  1059bc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  1059c0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  1059c3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  1059c7:	48 0f af 45 c8       	imul   rax,QWORD PTR [rbp-0x38]
  1059cc:	48 01 d0             	add    rax,rdx
  1059cf:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  1059d3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  1059d7:	48 8b 00             	mov    rax,QWORD PTR [rax]
  1059da:	48 3d ff ff 0f 00    	cmp    rax,0xfffff
  1059e0:	76 12                	jbe    1059f4 <memory::allocation::get_total_memory_size(stivale_memory_map*, unsigned long, unsigned long)+0x8f>
  1059e2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  1059e6:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  1059ea:	48 c1 e8 0c          	shr    rax,0xc
  1059ee:	48 01 45 f8          	add    QWORD PTR [rbp-0x8],rax
  1059f2:	eb 01                	jmp    1059f5 <memory::allocation::get_total_memory_size(stivale_memory_map*, unsigned long, unsigned long)+0x90>
  1059f4:	90                   	nop
  1059f5:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
  1059fa:	eb b6                	jmp    1059b2 <memory::allocation::get_total_memory_size(stivale_memory_map*, unsigned long, unsigned long)+0x4d>
  1059fc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105a00:	48 c1 e0 0c          	shl    rax,0xc
  105a04:	48 89 05 e5 a6 00 00 	mov    QWORD PTR [rip+0xa6e5],rax        # 1100f0 <memory::allocation::get_total_memory_size(stivale_memory_map*, unsigned long, unsigned long)::memory_size_bytes>
  105a0b:	48 8b 05 de a6 00 00 	mov    rax,QWORD PTR [rip+0xa6de]        # 1100f0 <memory::allocation::get_total_memory_size(stivale_memory_map*, unsigned long, unsigned long)::memory_size_bytes>
  105a12:	48 05 00 00 10 00    	add    rax,0x100000
  105a18:	48 89 05 d1 a6 00 00 	mov    QWORD PTR [rip+0xa6d1],rax        # 1100f0 <memory::allocation::get_total_memory_size(stivale_memory_map*, unsigned long, unsigned long)::memory_size_bytes>
  105a1f:	48 8b 05 ca a6 00 00 	mov    rax,QWORD PTR [rip+0xa6ca]        # 1100f0 <memory::allocation::get_total_memory_size(stivale_memory_map*, unsigned long, unsigned long)::memory_size_bytes>
  105a26:	48 c1 e8 14          	shr    rax,0x14
  105a2a:	48 89 05 bf a6 00 00 	mov    QWORD PTR [rip+0xa6bf],rax        # 1100f0 <memory::allocation::get_total_memory_size(stivale_memory_map*, unsigned long, unsigned long)::memory_size_bytes>
  105a31:	48 8b 05 b8 a6 00 00 	mov    rax,QWORD PTR [rip+0xa6b8]        # 1100f0 <memory::allocation::get_total_memory_size(stivale_memory_map*, unsigned long, unsigned long)::memory_size_bytes>
  105a38:	48 c1 e0 14          	shl    rax,0x14
  105a3c:	48 89 05 ad a6 00 00 	mov    QWORD PTR [rip+0xa6ad],rax        # 1100f0 <memory::allocation::get_total_memory_size(stivale_memory_map*, unsigned long, unsigned long)::memory_size_bytes>
  105a43:	48 8b 05 a6 a6 00 00 	mov    rax,QWORD PTR [rip+0xa6a6]        # 1100f0 <memory::allocation::get_total_memory_size(stivale_memory_map*, unsigned long, unsigned long)::memory_size_bytes>
  105a4a:	c9                   	leave  
  105a4b:	c3                   	ret    

0000000000105a4c <memory::allocation::map_memory(stivale_memory_map*, unsigned long, unsigned long)>:
  105a4c:	55                   	push   rbp
  105a4d:	48 89 e5             	mov    rbp,rsp
  105a50:	48 83 ec 70          	sub    rsp,0x70
  105a54:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  105a58:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  105a5c:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  105a60:	48 c7 c0 c0 00 11 00 	mov    rax,0x1100c0
  105a67:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  105a6a:	84 c0                	test   al,al
  105a6c:	0f 85 a9 02 00 00    	jne    105d1b <memory::allocation::map_memory(stivale_memory_map*, unsigned long, unsigned long)+0x2cf>
  105a72:	48 c7 c0 c0 00 11 00 	mov    rax,0x1100c0
  105a79:	c6 00 01             	mov    BYTE PTR [rax],0x1
  105a7c:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  105a80:	ba 00 00 00 00       	mov    edx,0x0
  105a85:	48 f7 75 98          	div    QWORD PTR [rbp-0x68]
  105a89:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  105a8d:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  105a94:	00 
  105a95:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  105a9c:	00 
  105a9d:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  105aa4:	00 
  105aa5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  105aa9:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
  105aad:	0f 83 86 00 00 00    	jae    105b39 <memory::allocation::map_memory(stivale_memory_map*, unsigned long, unsigned long)+0xed>
  105ab3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  105ab7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  105aba:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  105abe:	48 0f af 45 98       	imul   rax,QWORD PTR [rbp-0x68]
  105ac3:	48 01 d0             	add    rax,rdx
  105ac6:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  105aca:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  105ace:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
  105ad1:	83 f8 01             	cmp    eax,0x1
  105ad4:	74 28                	je     105afe <memory::allocation::map_memory(stivale_memory_map*, unsigned long, unsigned long)+0xb2>
  105ad6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  105ada:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
  105add:	83 f8 03             	cmp    eax,0x3
  105ae0:	74 1c                	je     105afe <memory::allocation::map_memory(stivale_memory_map*, unsigned long, unsigned long)+0xb2>
  105ae2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  105ae6:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
  105ae9:	3d 00 10 00 00       	cmp    eax,0x1000
  105aee:	74 0e                	je     105afe <memory::allocation::map_memory(stivale_memory_map*, unsigned long, unsigned long)+0xb2>
  105af0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  105af4:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
  105af7:	3d 01 10 00 00       	cmp    eax,0x1001
  105afc:	75 31                	jne    105b2f <memory::allocation::map_memory(stivale_memory_map*, unsigned long, unsigned long)+0xe3>
  105afe:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  105b02:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  105b06:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
  105b0c:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
  105b10:	73 1d                	jae    105b2f <memory::allocation::map_memory(stivale_memory_map*, unsigned long, unsigned long)+0xe3>
  105b12:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  105b16:	48 8b 00             	mov    rax,QWORD PTR [rax]
  105b19:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  105b1d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  105b21:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  105b25:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
  105b2b:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  105b2f:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
  105b34:	e9 6c ff ff ff       	jmp    105aa5 <memory::allocation::map_memory(stivale_memory_map*, unsigned long, unsigned long)+0x59>
  105b39:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  105b3d:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
  105b41:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  105b45:	48 89 ce             	mov    rsi,rcx
  105b48:	48 89 c7             	mov    rdi,rax
  105b4b:	e8 15 fe ff ff       	call   105965 <memory::allocation::get_total_memory_size(stivale_memory_map*, unsigned long, unsigned long)>
  105b50:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  105b54:	48 c7 c0 90 00 11 00 	mov    rax,0x110090
  105b5b:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  105b5f:	48 89 10             	mov    QWORD PTR [rax],rdx
  105b62:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  105b66:	48 c1 e8 0f          	shr    rax,0xf
  105b6a:	48 83 c0 01          	add    rax,0x1
  105b6e:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  105b72:	48 8d 3d db 54 00 00 	lea    rdi,[rip+0x54db]        # 10b054 <BASE_GRAN+0xcb>
  105b79:	e8 98 1a 00 00       	call   107616 <serial_msg>
  105b7e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  105b82:	48 c1 e8 14          	shr    rax,0x14
  105b86:	be 0a 00 00 00       	mov    esi,0xa
  105b8b:	48 89 c7             	mov    rdi,rax
  105b8e:	e8 56 10 00 00       	call   106be9 <util::itoa(long, int)>
  105b93:	48 89 c7             	mov    rdi,rax
  105b96:	e8 7b 1a 00 00       	call   107616 <serial_msg>
  105b9b:	48 8d 3d c6 54 00 00 	lea    rdi,[rip+0x54c6]        # 10b068 <BASE_GRAN+0xdf>
  105ba2:	e8 6f 1a 00 00       	call   107616 <serial_msg>
  105ba7:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  105bab:	be 0a 00 00 00       	mov    esi,0xa
  105bb0:	48 89 c7             	mov    rdi,rax
  105bb3:	e8 31 10 00 00       	call   106be9 <util::itoa(long, int)>
  105bb8:	48 89 c7             	mov    rdi,rax
  105bbb:	e8 56 1a 00 00       	call   107616 <serial_msg>
  105bc0:	48 8d 3d b4 54 00 00 	lea    rdi,[rip+0x54b4]        # 10b07b <BASE_GRAN+0xf2>
  105bc7:	e8 4a 1a 00 00       	call   107616 <serial_msg>
  105bcc:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  105bd0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  105bd4:	48 89 d6             	mov    rsi,rdx
  105bd7:	48 89 c7             	mov    rdi,rax
  105bda:	e8 28 fd ff ff       	call   105907 <init_bitmap(unsigned long, void*)>
  105bdf:	48 c7 c0 b0 00 11 00 	mov    rax,0x1100b0
  105be6:	48 8b 00             	mov    rax,QWORD PTR [rax]
  105be9:	48 c1 e8 0c          	shr    rax,0xc
  105bed:	48 8d 50 01          	lea    rdx,[rax+0x1]
  105bf1:	48 c7 c0 b0 00 11 00 	mov    rax,0x1100b0
  105bf8:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  105bfc:	48 89 d6             	mov    rsi,rdx
  105bff:	48 89 c7             	mov    rdi,rax
  105c02:	e8 28 08 00 00       	call   10642f <lock_pages>
  105c07:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  105c0e:	00 
  105c0f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  105c13:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
  105c17:	0f 83 d1 00 00 00    	jae    105cee <memory::allocation::map_memory(stivale_memory_map*, unsigned long, unsigned long)+0x2a2>
  105c1d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  105c21:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  105c24:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  105c28:	48 0f af 45 98       	imul   rax,QWORD PTR [rbp-0x68]
  105c2d:	48 01 d0             	add    rax,rdx
  105c30:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  105c34:	48 8d 3d 42 54 00 00 	lea    rdi,[rip+0x5442]        # 10b07d <BASE_GRAN+0xf4>
  105c3b:	e8 d6 19 00 00       	call   107616 <serial_msg>
  105c40:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  105c44:	48 8b 00             	mov    rax,QWORD PTR [rax]
  105c47:	be 10 00 00 00       	mov    esi,0x10
  105c4c:	48 89 c7             	mov    rdi,rax
  105c4f:	e8 95 0f 00 00       	call   106be9 <util::itoa(long, int)>
  105c54:	48 89 c7             	mov    rdi,rax
  105c57:	e8 ba 19 00 00       	call   107616 <serial_msg>
  105c5c:	48 8d 3d 1f 54 00 00 	lea    rdi,[rip+0x541f]        # 10b082 <BASE_GRAN+0xf9>
  105c63:	e8 ae 19 00 00       	call   107616 <serial_msg>
  105c68:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  105c6c:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
  105c6f:	0f b7 c0             	movzx  eax,ax
  105c72:	89 c7                	mov    edi,eax
  105c74:	e8 fb fb ff ff       	call   105874 <memory_types(unsigned short)>
  105c79:	48 89 c7             	mov    rdi,rax
  105c7c:	e8 95 19 00 00       	call   107616 <serial_msg>
  105c81:	48 8d 3d fd 53 00 00 	lea    rdi,[rip+0x53fd]        # 10b085 <BASE_GRAN+0xfc>
  105c88:	e8 89 19 00 00       	call   107616 <serial_msg>
  105c8d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  105c91:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  105c95:	48 c1 e8 0c          	shr    rax,0xc
  105c99:	be 0a 00 00 00       	mov    esi,0xa
  105c9e:	48 89 c7             	mov    rdi,rax
  105ca1:	e8 43 0f 00 00       	call   106be9 <util::itoa(long, int)>
  105ca6:	48 89 c7             	mov    rdi,rax
  105ca9:	e8 68 19 00 00       	call   107616 <serial_msg>
  105cae:	48 8d 3d d7 53 00 00 	lea    rdi,[rip+0x53d7]        # 10b08c <BASE_GRAN+0x103>
  105cb5:	e8 5c 19 00 00       	call   107616 <serial_msg>
  105cba:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  105cbe:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
  105cc1:	83 f8 01             	cmp    eax,0x1
  105cc4:	74 1e                	je     105ce4 <memory::allocation::map_memory(stivale_memory_map*, unsigned long, unsigned long)+0x298>
  105cc6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  105cca:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  105cce:	48 c1 e8 0c          	shr    rax,0xc
  105cd2:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  105cd6:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  105cd9:	48 89 c6             	mov    rsi,rax
  105cdc:	48 89 d7             	mov    rdi,rdx
  105cdf:	e8 a7 04 00 00       	call   10618b <reserve_pages>
  105ce4:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
  105ce9:	e9 21 ff ff ff       	jmp    105c0f <memory::allocation::map_memory(stivale_memory_map*, unsigned long, unsigned long)+0x1c3>
  105cee:	be 00 01 00 00       	mov    esi,0x100
  105cf3:	bf 00 00 00 00       	mov    edi,0x0
  105cf8:	e8 8e 04 00 00       	call   10618b <reserve_pages>
  105cfd:	48 c7 c0 a8 e0 10 00 	mov    rax,0x10e0a8
  105d04:	48 8b 00             	mov    rax,QWORD PTR [rax]
  105d07:	48 89 c6             	mov    rsi,rax
  105d0a:	48 c7 c0 00 00 10 00 	mov    rax,0x100000
  105d11:	48 89 c7             	mov    rdi,rax
  105d14:	e8 72 04 00 00       	call   10618b <reserve_pages>
  105d19:	eb 01                	jmp    105d1c <memory::allocation::map_memory(stivale_memory_map*, unsigned long, unsigned long)+0x2d0>
  105d1b:	90                   	nop
  105d1c:	c9                   	leave  
  105d1d:	c3                   	ret    

0000000000105d1e <memory::allocation::initialize_heap(void*, unsigned long)>:
  105d1e:	55                   	push   rbp
  105d1f:	48 89 e5             	mov    rbp,rsp
  105d22:	48 83 ec 20          	sub    rsp,0x20
  105d26:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  105d2a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  105d2e:	48 c7 c0 e0 00 11 00 	mov    rax,0x1100e0
  105d35:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  105d39:	48 89 10             	mov    QWORD PTR [rax],rdx
  105d3c:	48 c7 c0 e0 00 11 00 	mov    rax,0x1100e0
  105d43:	48 8b 00             	mov    rax,QWORD PTR [rax]
  105d46:	48 89 c2             	mov    rdx,rax
  105d49:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  105d4d:	48 01 d0             	add    rax,rdx
  105d50:	48 89 c2             	mov    rdx,rax
  105d53:	48 c7 c0 e8 00 11 00 	mov    rax,0x1100e8
  105d5a:	48 89 10             	mov    QWORD PTR [rax],rdx
  105d5d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  105d61:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  105d65:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  105d69:	48 8d 50 e0          	lea    rdx,[rax-0x20]
  105d6d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105d71:	48 89 10             	mov    QWORD PTR [rax],rdx
  105d74:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105d78:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
  105d7f:	00 
  105d80:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105d84:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
  105d8b:	00 
  105d8c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105d90:	c6 40 18 01          	mov    BYTE PTR [rax+0x18],0x1
  105d94:	90                   	nop
  105d95:	c9                   	leave  
  105d96:	c3                   	ret    

0000000000105d97 <memory::allocation::malloc(unsigned long)>:
  105d97:	55                   	push   rbp
  105d98:	48 89 e5             	mov    rbp,rsp
  105d9b:	48 83 ec 20          	sub    rsp,0x20
  105d9f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  105da3:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
  105da8:	75 0a                	jne    105db4 <memory::allocation::malloc(unsigned long)+0x1d>
  105daa:	b8 00 00 00 00       	mov    eax,0x0
  105daf:	e9 9f 00 00 00       	jmp    105e53 <memory::allocation::malloc(unsigned long)+0xbc>
  105db4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  105db8:	83 e0 0f             	and    eax,0xf
  105dbb:	48 85 c0             	test   rax,rax
  105dbe:	74 0f                	je     105dcf <memory::allocation::malloc(unsigned long)+0x38>
  105dc0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  105dc4:	83 e0 0f             	and    eax,0xf
  105dc7:	48 83 c0 10          	add    rax,0x10
  105dcb:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  105dcf:	48 c7 c0 e0 00 11 00 	mov    rax,0x1100e0
  105dd6:	48 8b 00             	mov    rax,QWORD PTR [rax]
  105dd9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  105ddd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105de1:	0f b6 40 18          	movzx  eax,BYTE PTR [rax+0x18]
  105de5:	84 c0                	test   al,al
  105de7:	74 49                	je     105e32 <memory::allocation::malloc(unsigned long)+0x9b>
  105de9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105ded:	48 8b 00             	mov    rax,QWORD PTR [rax]
  105df0:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
  105df4:	73 21                	jae    105e17 <memory::allocation::malloc(unsigned long)+0x80>
  105df6:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  105dfa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105dfe:	48 89 d6             	mov    rsi,rdx
  105e01:	48 89 c7             	mov    rdi,rax
  105e04:	e8 bd 00 00 00       	call   105ec6 <memory::allocation::heap_segment_header::split(unsigned long)>
  105e09:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105e0d:	c6 40 18 00          	mov    BYTE PTR [rax+0x18],0x0
  105e11:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105e15:	eb 3c                	jmp    105e53 <memory::allocation::malloc(unsigned long)+0xbc>
  105e17:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105e1b:	48 8b 00             	mov    rax,QWORD PTR [rax]
  105e1e:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
  105e22:	75 0e                	jne    105e32 <memory::allocation::malloc(unsigned long)+0x9b>
  105e24:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105e28:	c6 40 18 00          	mov    BYTE PTR [rax+0x18],0x0
  105e2c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105e30:	eb 21                	jmp    105e53 <memory::allocation::malloc(unsigned long)+0xbc>
  105e32:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105e36:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  105e3a:	48 85 c0             	test   rax,rax
  105e3d:	74 0e                	je     105e4d <memory::allocation::malloc(unsigned long)+0xb6>
  105e3f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105e43:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  105e47:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  105e4b:	eb 90                	jmp    105ddd <memory::allocation::malloc(unsigned long)+0x46>
  105e4d:	90                   	nop
  105e4e:	b8 00 00 00 00       	mov    eax,0x0
  105e53:	c9                   	leave  
  105e54:	c3                   	ret    

0000000000105e55 <memory::allocation::free(void*)>:
  105e55:	55                   	push   rbp
  105e56:	48 89 e5             	mov    rbp,rsp
  105e59:	48 83 ec 20          	sub    rsp,0x20
  105e5d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  105e61:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  105e65:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  105e69:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105e6d:	c6 40 18 01          	mov    BYTE PTR [rax+0x18],0x1
  105e71:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105e75:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  105e79:	48 85 c0             	test   rax,rax
  105e7c:	74 1c                	je     105e9a <memory::allocation::free(void*)+0x45>
  105e7e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105e82:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  105e86:	0f b6 40 18          	movzx  eax,BYTE PTR [rax+0x18]
  105e8a:	84 c0                	test   al,al
  105e8c:	74 0c                	je     105e9a <memory::allocation::free(void*)+0x45>
  105e8e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105e92:	48 89 c7             	mov    rdi,rax
  105e95:	e8 e4 00 00 00       	call   105f7e <memory::allocation::heap_segment_header::combine_forward()>
  105e9a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105e9e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  105ea2:	48 85 c0             	test   rax,rax
  105ea5:	74 1c                	je     105ec3 <memory::allocation::free(void*)+0x6e>
  105ea7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105eab:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  105eaf:	0f b6 40 18          	movzx  eax,BYTE PTR [rax+0x18]
  105eb3:	84 c0                	test   al,al
  105eb5:	74 0c                	je     105ec3 <memory::allocation::free(void*)+0x6e>
  105eb7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105ebb:	48 89 c7             	mov    rdi,rax
  105ebe:	e8 35 01 00 00       	call   105ff8 <memory::allocation::heap_segment_header::combine_backward()>
  105ec3:	90                   	nop
  105ec4:	c9                   	leave  
  105ec5:	c3                   	ret    

0000000000105ec6 <memory::allocation::heap_segment_header::split(unsigned long)>:
  105ec6:	55                   	push   rbp
  105ec7:	48 89 e5             	mov    rbp,rsp
  105eca:	48 83 ec 20          	sub    rsp,0x20
  105ece:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  105ed2:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  105ed6:	48 83 7d e0 0f       	cmp    QWORD PTR [rbp-0x20],0xf
  105edb:	77 0a                	ja     105ee7 <memory::allocation::heap_segment_header::split(unsigned long)+0x21>
  105edd:	b8 00 00 00 00       	mov    eax,0x0
  105ee2:	e9 95 00 00 00       	jmp    105f7c <memory::allocation::heap_segment_header::split(unsigned long)+0xb6>
  105ee7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  105eeb:	48 8b 00             	mov    rax,QWORD PTR [rax]
  105eee:	48 2b 45 e0          	sub    rax,QWORD PTR [rbp-0x20]
  105ef2:	48 83 e8 40          	sub    rax,0x40
  105ef6:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  105efa:	48 83 7d f8 0f       	cmp    QWORD PTR [rbp-0x8],0xf
  105eff:	77 07                	ja     105f08 <memory::allocation::heap_segment_header::split(unsigned long)+0x42>
  105f01:	b8 00 00 00 00       	mov    eax,0x0
  105f06:	eb 74                	jmp    105f7c <memory::allocation::heap_segment_header::split(unsigned long)+0xb6>
  105f08:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  105f0c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  105f10:	48 01 d0             	add    rax,rdx
  105f13:	48 83 c0 20          	add    rax,0x20
  105f17:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  105f1b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  105f1f:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  105f23:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  105f27:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
  105f2b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  105f2f:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  105f33:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  105f37:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
  105f3b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  105f3f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  105f43:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
  105f47:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  105f4b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  105f4f:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
  105f53:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  105f57:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  105f5b:	48 89 10             	mov    QWORD PTR [rax],rdx
  105f5e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  105f62:	0f b6 50 18          	movzx  edx,BYTE PTR [rax+0x18]
  105f66:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  105f6a:	88 50 18             	mov    BYTE PTR [rax+0x18],dl
  105f6d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  105f71:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  105f75:	48 89 10             	mov    QWORD PTR [rax],rdx
  105f78:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  105f7c:	c9                   	leave  
  105f7d:	c3                   	ret    

0000000000105f7e <memory::allocation::heap_segment_header::combine_forward()>:
  105f7e:	55                   	push   rbp
  105f7f:	48 89 e5             	mov    rbp,rsp
  105f82:	48 83 ec 08          	sub    rsp,0x8
  105f86:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  105f8a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105f8e:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  105f92:	48 85 c0             	test   rax,rax
  105f95:	74 5a                	je     105ff1 <memory::allocation::heap_segment_header::combine_forward()+0x73>
  105f97:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105f9b:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  105f9f:	0f b6 40 18          	movzx  eax,BYTE PTR [rax+0x18]
  105fa3:	83 f0 01             	xor    eax,0x1
  105fa6:	84 c0                	test   al,al
  105fa8:	75 4a                	jne    105ff4 <memory::allocation::heap_segment_header::combine_forward()+0x76>
  105faa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105fae:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  105fb2:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  105fb6:	48 85 c0             	test   rax,rax
  105fb9:	74 14                	je     105fcf <memory::allocation::heap_segment_header::combine_forward()+0x51>
  105fbb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105fbf:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  105fc3:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  105fc7:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  105fcb:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
  105fcf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105fd3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  105fd6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105fda:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  105fde:	48 8b 00             	mov    rax,QWORD PTR [rax]
  105fe1:	48 01 d0             	add    rax,rdx
  105fe4:	48 8d 50 20          	lea    rdx,[rax+0x20]
  105fe8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  105fec:	48 89 10             	mov    QWORD PTR [rax],rdx
  105fef:	eb 04                	jmp    105ff5 <memory::allocation::heap_segment_header::combine_forward()+0x77>
  105ff1:	90                   	nop
  105ff2:	eb 01                	jmp    105ff5 <memory::allocation::heap_segment_header::combine_forward()+0x77>
  105ff4:	90                   	nop
  105ff5:	c9                   	leave  
  105ff6:	c3                   	ret    
  105ff7:	90                   	nop

0000000000105ff8 <memory::allocation::heap_segment_header::combine_backward()>:
  105ff8:	55                   	push   rbp
  105ff9:	48 89 e5             	mov    rbp,rsp
  105ffc:	48 83 ec 10          	sub    rsp,0x10
  106000:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  106004:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106008:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  10600c:	48 85 c0             	test   rax,rax
  10600f:	74 10                	je     106021 <memory::allocation::heap_segment_header::combine_backward()+0x29>
  106011:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106015:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  106019:	48 89 c7             	mov    rdi,rax
  10601c:	e8 5d ff ff ff       	call   105f7e <memory::allocation::heap_segment_header::combine_forward()>
  106021:	90                   	nop
  106022:	c9                   	leave  
  106023:	c3                   	ret    

0000000000106024 <unreserve_page(void*)>:
  106024:	55                   	push   rbp
  106025:	48 89 e5             	mov    rbp,rsp
  106028:	48 83 ec 20          	sub    rsp,0x20
  10602c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  106030:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  106034:	48 c1 e8 0c          	shr    rax,0xc
  106038:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  10603c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106040:	48 89 c6             	mov    rsi,rax
  106043:	48 c7 c0 b0 00 11 00 	mov    rax,0x1100b0
  10604a:	48 89 c7             	mov    rdi,rax
  10604d:	e8 84 0a 00 00       	call   106ad6 <util::bitmap::operator[](unsigned long)>
  106052:	0f b6 c0             	movzx  eax,al
  106055:	85 c0                	test   eax,eax
  106057:	0f 94 c0             	sete   al
  10605a:	84 c0                	test   al,al
  10605c:	75 53                	jne    1060b1 <unreserve_page(void*)+0x8d>
  10605e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106062:	ba 00 00 00 00       	mov    edx,0x0
  106067:	48 89 c6             	mov    rsi,rax
  10606a:	48 c7 c0 b0 00 11 00 	mov    rax,0x1100b0
  106071:	48 89 c7             	mov    rdi,rax
  106074:	e8 d3 0a 00 00       	call   106b4c <util::bitmap::set(unsigned long, bool)>
  106079:	48 c7 c0 90 00 11 00 	mov    rax,0x110090
  106080:	48 8b 00             	mov    rax,QWORD PTR [rax]
  106083:	48 8d 90 00 10 00 00 	lea    rdx,[rax+0x1000]
  10608a:	48 c7 c0 90 00 11 00 	mov    rax,0x110090
  106091:	48 89 10             	mov    QWORD PTR [rax],rdx
  106094:	48 c7 c0 a8 00 11 00 	mov    rax,0x1100a8
  10609b:	48 8b 00             	mov    rax,QWORD PTR [rax]
  10609e:	48 8d 90 00 f0 ff ff 	lea    rdx,[rax-0x1000]
  1060a5:	48 c7 c0 a8 00 11 00 	mov    rax,0x1100a8
  1060ac:	48 89 10             	mov    QWORD PTR [rax],rdx
  1060af:	eb 01                	jmp    1060b2 <unreserve_page(void*)+0x8e>
  1060b1:	90                   	nop
  1060b2:	c9                   	leave  
  1060b3:	c3                   	ret    

00000000001060b4 <unreserve_pages(void*, unsigned long)>:
  1060b4:	55                   	push   rbp
  1060b5:	48 89 e5             	mov    rbp,rsp
  1060b8:	48 83 ec 20          	sub    rsp,0x20
  1060bc:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  1060c0:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  1060c4:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  1060cb:	00 
  1060cc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1060d0:	48 3b 45 e0          	cmp    rax,QWORD PTR [rbp-0x20]
  1060d4:	73 21                	jae    1060f7 <unreserve_pages(void*, unsigned long)+0x43>
  1060d6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1060da:	48 c1 e0 0c          	shl    rax,0xc
  1060de:	48 89 c2             	mov    rdx,rax
  1060e1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  1060e5:	48 01 d0             	add    rax,rdx
  1060e8:	48 89 c7             	mov    rdi,rax
  1060eb:	e8 34 ff ff ff       	call   106024 <unreserve_page(void*)>
  1060f0:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
  1060f5:	eb d5                	jmp    1060cc <unreserve_pages(void*, unsigned long)+0x18>
  1060f7:	90                   	nop
  1060f8:	c9                   	leave  
  1060f9:	c3                   	ret    

00000000001060fa <reserve_page>:
  1060fa:	55                   	push   rbp
  1060fb:	48 89 e5             	mov    rbp,rsp
  1060fe:	48 83 ec 20          	sub    rsp,0x20
  106102:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  106106:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  10610a:	48 c1 e8 0c          	shr    rax,0xc
  10610e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  106112:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106116:	48 89 c6             	mov    rsi,rax
  106119:	48 c7 c0 b0 00 11 00 	mov    rax,0x1100b0
  106120:	48 89 c7             	mov    rdi,rax
  106123:	e8 ae 09 00 00       	call   106ad6 <util::bitmap::operator[](unsigned long)>
  106128:	0f b6 c0             	movzx  eax,al
  10612b:	83 f8 01             	cmp    eax,0x1
  10612e:	0f 94 c0             	sete   al
  106131:	84 c0                	test   al,al
  106133:	75 53                	jne    106188 <reserve_page+0x8e>
  106135:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106139:	ba 01 00 00 00       	mov    edx,0x1
  10613e:	48 89 c6             	mov    rsi,rax
  106141:	48 c7 c0 b0 00 11 00 	mov    rax,0x1100b0
  106148:	48 89 c7             	mov    rdi,rax
  10614b:	e8 fc 09 00 00       	call   106b4c <util::bitmap::set(unsigned long, bool)>
  106150:	48 c7 c0 90 00 11 00 	mov    rax,0x110090
  106157:	48 8b 00             	mov    rax,QWORD PTR [rax]
  10615a:	48 8d 90 00 f0 ff ff 	lea    rdx,[rax-0x1000]
  106161:	48 c7 c0 90 00 11 00 	mov    rax,0x110090
  106168:	48 89 10             	mov    QWORD PTR [rax],rdx
  10616b:	48 c7 c0 a8 00 11 00 	mov    rax,0x1100a8
  106172:	48 8b 00             	mov    rax,QWORD PTR [rax]
  106175:	48 8d 90 00 10 00 00 	lea    rdx,[rax+0x1000]
  10617c:	48 c7 c0 a8 00 11 00 	mov    rax,0x1100a8
  106183:	48 89 10             	mov    QWORD PTR [rax],rdx
  106186:	eb 01                	jmp    106189 <reserve_page+0x8f>
  106188:	90                   	nop
  106189:	c9                   	leave  
  10618a:	c3                   	ret    

000000000010618b <reserve_pages>:
  10618b:	55                   	push   rbp
  10618c:	48 89 e5             	mov    rbp,rsp
  10618f:	48 83 ec 20          	sub    rsp,0x20
  106193:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  106197:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  10619b:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  1061a2:	00 
  1061a3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1061a7:	48 3b 45 e0          	cmp    rax,QWORD PTR [rbp-0x20]
  1061ab:	73 21                	jae    1061ce <reserve_pages+0x43>
  1061ad:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1061b1:	48 c1 e0 0c          	shl    rax,0xc
  1061b5:	48 89 c2             	mov    rdx,rax
  1061b8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  1061bc:	48 01 d0             	add    rax,rdx
  1061bf:	48 89 c7             	mov    rdi,rax
  1061c2:	e8 33 ff ff ff       	call   1060fa <reserve_page>
  1061c7:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
  1061cc:	eb d5                	jmp    1061a3 <reserve_pages+0x18>
  1061ce:	90                   	nop
  1061cf:	c9                   	leave  
  1061d0:	c3                   	ret    

00000000001061d1 <request_page>:
  1061d1:	55                   	push   rbp
  1061d2:	48 89 e5             	mov    rbp,rsp
  1061d5:	48 83 ec 10          	sub    rsp,0x10
  1061d9:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  1061e0:	00 
  1061e1:	48 c7 c0 b0 00 11 00 	mov    rax,0x1100b0
  1061e8:	48 8b 00             	mov    rax,QWORD PTR [rax]
  1061eb:	48 c1 e0 03          	shl    rax,0x3
  1061ef:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
  1061f3:	73 45                	jae    10623a <request_page+0x69>
  1061f5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1061f9:	48 89 c6             	mov    rsi,rax
  1061fc:	48 c7 c0 b0 00 11 00 	mov    rax,0x1100b0
  106203:	48 89 c7             	mov    rdi,rax
  106206:	e8 cb 08 00 00       	call   106ad6 <util::bitmap::operator[](unsigned long)>
  10620b:	0f b6 c0             	movzx  eax,al
  10620e:	83 f8 01             	cmp    eax,0x1
  106211:	0f 94 c0             	sete   al
  106214:	84 c0                	test   al,al
  106216:	75 1a                	jne    106232 <request_page+0x61>
  106218:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  10621c:	48 c1 e0 0c          	shl    rax,0xc
  106220:	48 89 c7             	mov    rdi,rax
  106223:	e8 76 01 00 00       	call   10639e <lock_page>
  106228:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  10622c:	48 c1 e0 0c          	shl    rax,0xc
  106230:	eb 0d                	jmp    10623f <request_page+0x6e>
  106232:	90                   	nop
  106233:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
  106238:	eb a7                	jmp    1061e1 <request_page+0x10>
  10623a:	b8 00 00 00 00       	mov    eax,0x0
  10623f:	c9                   	leave  
  106240:	c3                   	ret    

0000000000106241 <request_pages>:
  106241:	55                   	push   rbp
  106242:	48 89 e5             	mov    rbp,rsp
  106245:	48 83 ec 30          	sub    rsp,0x30
  106249:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  10624d:	48 83 7d d8 01       	cmp    QWORD PTR [rbp-0x28],0x1
  106252:	77 07                	ja     10625b <request_pages+0x1a>
  106254:	b8 00 00 00 00       	mov    eax,0x0
  106259:	eb 6b                	jmp    1062c6 <request_pages+0x85>
  10625b:	e8 71 ff ff ff       	call   1061d1 <request_page>
  106260:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  106264:	48 83 6d d8 01       	sub    QWORD PTR [rbp-0x28],0x1
  106269:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  10626d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  106271:	48 89 d6             	mov    rsi,rdx
  106274:	48 89 c7             	mov    rdi,rax
  106277:	e8 70 02 00 00       	call   1064ec <memory::paging::map_memory(void*, void*)>
  10627c:	48 c7 45 f8 01 00 00 	mov    QWORD PTR [rbp-0x8],0x1
  106283:	00 
  106284:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106288:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
  10628c:	77 34                	ja     1062c2 <request_pages+0x81>
  10628e:	e8 3e ff ff ff       	call   1061d1 <request_page>
  106293:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  106297:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  10629b:	48 c1 e0 0c          	shl    rax,0xc
  10629f:	48 89 c2             	mov    rdx,rax
  1062a2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  1062a6:	48 01 d0             	add    rax,rdx
  1062a9:	48 89 c2             	mov    rdx,rax
  1062ac:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  1062b0:	48 89 c6             	mov    rsi,rax
  1062b3:	48 89 d7             	mov    rdi,rdx
  1062b6:	e8 31 02 00 00       	call   1064ec <memory::paging::map_memory(void*, void*)>
  1062bb:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
  1062c0:	eb c2                	jmp    106284 <request_pages+0x43>
  1062c2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  1062c6:	c9                   	leave  
  1062c7:	c3                   	ret    

00000000001062c8 <free_page>:
  1062c8:	55                   	push   rbp
  1062c9:	48 89 e5             	mov    rbp,rsp
  1062cc:	48 83 ec 20          	sub    rsp,0x20
  1062d0:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  1062d4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  1062d8:	48 c1 e8 0c          	shr    rax,0xc
  1062dc:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  1062e0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1062e4:	48 89 c6             	mov    rsi,rax
  1062e7:	48 c7 c0 b0 00 11 00 	mov    rax,0x1100b0
  1062ee:	48 89 c7             	mov    rdi,rax
  1062f1:	e8 e0 07 00 00       	call   106ad6 <util::bitmap::operator[](unsigned long)>
  1062f6:	0f b6 c0             	movzx  eax,al
  1062f9:	85 c0                	test   eax,eax
  1062fb:	0f 94 c0             	sete   al
  1062fe:	84 c0                	test   al,al
  106300:	75 53                	jne    106355 <free_page+0x8d>
  106302:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106306:	ba 00 00 00 00       	mov    edx,0x0
  10630b:	48 89 c6             	mov    rsi,rax
  10630e:	48 c7 c0 b0 00 11 00 	mov    rax,0x1100b0
  106315:	48 89 c7             	mov    rdi,rax
  106318:	e8 2f 08 00 00       	call   106b4c <util::bitmap::set(unsigned long, bool)>
  10631d:	48 c7 c0 90 00 11 00 	mov    rax,0x110090
  106324:	48 8b 00             	mov    rax,QWORD PTR [rax]
  106327:	48 8d 90 00 10 00 00 	lea    rdx,[rax+0x1000]
  10632e:	48 c7 c0 90 00 11 00 	mov    rax,0x110090
  106335:	48 89 10             	mov    QWORD PTR [rax],rdx
  106338:	48 c7 c0 98 00 11 00 	mov    rax,0x110098
  10633f:	48 8b 00             	mov    rax,QWORD PTR [rax]
  106342:	48 8d 90 00 f0 ff ff 	lea    rdx,[rax-0x1000]
  106349:	48 c7 c0 98 00 11 00 	mov    rax,0x110098
  106350:	48 89 10             	mov    QWORD PTR [rax],rdx
  106353:	eb 01                	jmp    106356 <free_page+0x8e>
  106355:	90                   	nop
  106356:	c9                   	leave  
  106357:	c3                   	ret    

0000000000106358 <free_pages>:
  106358:	55                   	push   rbp
  106359:	48 89 e5             	mov    rbp,rsp
  10635c:	48 83 ec 20          	sub    rsp,0x20
  106360:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  106364:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  106368:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  10636f:	00 
  106370:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106374:	48 3b 45 e0          	cmp    rax,QWORD PTR [rbp-0x20]
  106378:	73 21                	jae    10639b <free_pages+0x43>
  10637a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  10637e:	48 c1 e0 0c          	shl    rax,0xc
  106382:	48 89 c2             	mov    rdx,rax
  106385:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  106389:	48 01 d0             	add    rax,rdx
  10638c:	48 89 c7             	mov    rdi,rax
  10638f:	e8 34 ff ff ff       	call   1062c8 <free_page>
  106394:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
  106399:	eb d5                	jmp    106370 <free_pages+0x18>
  10639b:	90                   	nop
  10639c:	c9                   	leave  
  10639d:	c3                   	ret    

000000000010639e <lock_page>:
  10639e:	55                   	push   rbp
  10639f:	48 89 e5             	mov    rbp,rsp
  1063a2:	48 83 ec 20          	sub    rsp,0x20
  1063a6:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  1063aa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  1063ae:	48 c1 e8 0c          	shr    rax,0xc
  1063b2:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  1063b6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1063ba:	48 89 c6             	mov    rsi,rax
  1063bd:	48 c7 c0 b0 00 11 00 	mov    rax,0x1100b0
  1063c4:	48 89 c7             	mov    rdi,rax
  1063c7:	e8 0a 07 00 00       	call   106ad6 <util::bitmap::operator[](unsigned long)>
  1063cc:	0f b6 c0             	movzx  eax,al
  1063cf:	83 f8 01             	cmp    eax,0x1
  1063d2:	0f 94 c0             	sete   al
  1063d5:	84 c0                	test   al,al
  1063d7:	75 53                	jne    10642c <lock_page+0x8e>
  1063d9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1063dd:	ba 01 00 00 00       	mov    edx,0x1
  1063e2:	48 89 c6             	mov    rsi,rax
  1063e5:	48 c7 c0 b0 00 11 00 	mov    rax,0x1100b0
  1063ec:	48 89 c7             	mov    rdi,rax
  1063ef:	e8 58 07 00 00       	call   106b4c <util::bitmap::set(unsigned long, bool)>
  1063f4:	48 c7 c0 90 00 11 00 	mov    rax,0x110090
  1063fb:	48 8b 00             	mov    rax,QWORD PTR [rax]
  1063fe:	48 8d 90 00 f0 ff ff 	lea    rdx,[rax-0x1000]
  106405:	48 c7 c0 90 00 11 00 	mov    rax,0x110090
  10640c:	48 89 10             	mov    QWORD PTR [rax],rdx
  10640f:	48 c7 c0 98 00 11 00 	mov    rax,0x110098
  106416:	48 8b 00             	mov    rax,QWORD PTR [rax]
  106419:	48 8d 90 00 10 00 00 	lea    rdx,[rax+0x1000]
  106420:	48 c7 c0 98 00 11 00 	mov    rax,0x110098
  106427:	48 89 10             	mov    QWORD PTR [rax],rdx
  10642a:	eb 01                	jmp    10642d <lock_page+0x8f>
  10642c:	90                   	nop
  10642d:	c9                   	leave  
  10642e:	c3                   	ret    

000000000010642f <lock_pages>:
  10642f:	55                   	push   rbp
  106430:	48 89 e5             	mov    rbp,rsp
  106433:	48 83 ec 20          	sub    rsp,0x20
  106437:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  10643b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  10643f:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  106446:	00 
  106447:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  10644b:	48 3b 45 e0          	cmp    rax,QWORD PTR [rbp-0x20]
  10644f:	73 21                	jae    106472 <lock_pages+0x43>
  106451:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106455:	48 c1 e0 0c          	shl    rax,0xc
  106459:	48 89 c2             	mov    rdx,rax
  10645c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  106460:	48 01 d0             	add    rax,rdx
  106463:	48 89 c7             	mov    rdi,rax
  106466:	e8 33 ff ff ff       	call   10639e <lock_page>
  10646b:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
  106470:	eb d5                	jmp    106447 <lock_pages+0x18>
  106472:	90                   	nop
  106473:	c9                   	leave  
  106474:	c3                   	ret    
  106475:	90                   	nop

0000000000106476 <memory::paging::page_map_indexer::page_map_indexer(unsigned long)>:
  106476:	55                   	push   rbp
  106477:	48 89 e5             	mov    rbp,rsp
  10647a:	48 83 ec 10          	sub    rsp,0x10
  10647e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  106482:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  106486:	48 c1 6d f0 0c       	shr    QWORD PTR [rbp-0x10],0xc
  10648b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  10648f:	25 ff 01 00 00       	and    eax,0x1ff
  106494:	48 89 c2             	mov    rdx,rax
  106497:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  10649b:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
  10649f:	48 c1 6d f0 09       	shr    QWORD PTR [rbp-0x10],0x9
  1064a4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  1064a8:	25 ff 01 00 00       	and    eax,0x1ff
  1064ad:	48 89 c2             	mov    rdx,rax
  1064b0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1064b4:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
  1064b8:	48 c1 6d f0 09       	shr    QWORD PTR [rbp-0x10],0x9
  1064bd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  1064c1:	25 ff 01 00 00       	and    eax,0x1ff
  1064c6:	48 89 c2             	mov    rdx,rax
  1064c9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1064cd:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
  1064d1:	48 c1 6d f0 09       	shr    QWORD PTR [rbp-0x10],0x9
  1064d6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  1064da:	25 ff 01 00 00       	and    eax,0x1ff
  1064df:	48 89 c2             	mov    rdx,rax
  1064e2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1064e6:	48 89 10             	mov    QWORD PTR [rax],rdx
  1064e9:	90                   	nop
  1064ea:	c9                   	leave  
  1064eb:	c3                   	ret    

00000000001064ec <memory::paging::map_memory(void*, void*)>:
  1064ec:	55                   	push   rbp
  1064ed:	48 89 e5             	mov    rbp,rsp
  1064f0:	48 83 ec 60          	sub    rsp,0x60
  1064f4:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  1064f8:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  1064fc:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  106500:	48 8d 45 c0          	lea    rax,[rbp-0x40]
  106504:	48 89 d6             	mov    rsi,rdx
  106507:	48 89 c7             	mov    rdi,rax
  10650a:	e8 67 ff ff ff       	call   106476 <memory::paging::page_map_indexer::page_map_indexer(unsigned long)>
  10650f:	48 c7 c0 d0 00 11 00 	mov    rax,0x1100d0
  106516:	48 8b 00             	mov    rax,QWORD PTR [rax]
  106519:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  10651d:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
  106521:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  106525:	48 8d 45 b8          	lea    rax,[rbp-0x48]
  106529:	be 00 00 00 00       	mov    esi,0x0
  10652e:	48 89 c7             	mov    rdi,rax
  106531:	e8 34 04 00 00       	call   10696a <memory::paging::page_directory_entry::get_flag(memory::paging::pt_flag)>
  106536:	83 f0 01             	xor    eax,0x1
  106539:	84 c0                	test   al,al
  10653b:	0f 84 90 00 00 00    	je     1065d1 <memory::paging::map_memory(void*, void*)+0xe5>
  106541:	e8 8b fc ff ff       	call   1061d1 <request_page>
  106546:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  10654a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  10654e:	ba 00 10 00 00       	mov    edx,0x1000
  106553:	be 00 00 00 00       	mov    esi,0x0
  106558:	48 89 c7             	mov    rdi,rax
  10655b:	e8 00 05 00 00       	call   106a60 <memory::operations::memset(void*, unsigned char, unsigned long)>
  106560:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106564:	48 c1 e8 0c          	shr    rax,0xc
  106568:	48 89 c2             	mov    rdx,rax
  10656b:	48 8d 45 b8          	lea    rax,[rbp-0x48]
  10656f:	48 89 d6             	mov    rsi,rdx
  106572:	48 89 c7             	mov    rdi,rax
  106575:	e8 50 04 00 00       	call   1069ca <memory::paging::page_directory_entry::set_address(unsigned long)>
  10657a:	48 8d 45 b8          	lea    rax,[rbp-0x48]
  10657e:	ba 01 00 00 00       	mov    edx,0x1
  106583:	be 00 00 00 00       	mov    esi,0x0
  106588:	48 89 c7             	mov    rdi,rax
  10658b:	e8 7c 03 00 00       	call   10690c <memory::paging::page_directory_entry::set_flag(memory::paging::pt_flag, bool)>
  106590:	48 8d 45 b8          	lea    rax,[rbp-0x48]
  106594:	ba 01 00 00 00       	mov    edx,0x1
  106599:	be 01 00 00 00       	mov    esi,0x1
  10659e:	48 89 c7             	mov    rdi,rax
  1065a1:	e8 66 03 00 00       	call   10690c <memory::paging::page_directory_entry::set_flag(memory::paging::pt_flag, bool)>
  1065a6:	48 c7 c0 d0 00 11 00 	mov    rax,0x1100d0
  1065ad:	48 8b 00             	mov    rax,QWORD PTR [rax]
  1065b0:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  1065b4:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  1065b8:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
  1065bc:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  1065c0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1065c4:	48 89 d6             	mov    rsi,rdx
  1065c7:	48 89 c7             	mov    rdi,rax
  1065ca:	e8 1d ff ff ff       	call   1064ec <memory::paging::map_memory(void*, void*)>
  1065cf:	eb 14                	jmp    1065e5 <memory::paging::map_memory(void*, void*)+0xf9>
  1065d1:	48 8d 45 b8          	lea    rax,[rbp-0x48]
  1065d5:	48 89 c7             	mov    rdi,rax
  1065d8:	e8 c3 03 00 00       	call   1069a0 <memory::paging::page_directory_entry::get_address()>
  1065dd:	48 c1 e0 0c          	shl    rax,0xc
  1065e1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  1065e5:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  1065e9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1065ed:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
  1065f1:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  1065f5:	48 8d 45 b8          	lea    rax,[rbp-0x48]
  1065f9:	be 00 00 00 00       	mov    esi,0x0
  1065fe:	48 89 c7             	mov    rdi,rax
  106601:	e8 64 03 00 00       	call   10696a <memory::paging::page_directory_entry::get_flag(memory::paging::pt_flag)>
  106606:	83 f0 01             	xor    eax,0x1
  106609:	84 c0                	test   al,al
  10660b:	0f 84 8a 00 00 00    	je     10669b <memory::paging::map_memory(void*, void*)+0x1af>
  106611:	e8 bb fb ff ff       	call   1061d1 <request_page>
  106616:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  10661a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  10661e:	ba 00 10 00 00       	mov    edx,0x1000
  106623:	be 00 00 00 00       	mov    esi,0x0
  106628:	48 89 c7             	mov    rdi,rax
  10662b:	e8 30 04 00 00       	call   106a60 <memory::operations::memset(void*, unsigned char, unsigned long)>
  106630:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  106634:	48 c1 e8 0c          	shr    rax,0xc
  106638:	48 89 c2             	mov    rdx,rax
  10663b:	48 8d 45 b8          	lea    rax,[rbp-0x48]
  10663f:	48 89 d6             	mov    rsi,rdx
  106642:	48 89 c7             	mov    rdi,rax
  106645:	e8 80 03 00 00       	call   1069ca <memory::paging::page_directory_entry::set_address(unsigned long)>
  10664a:	48 8d 45 b8          	lea    rax,[rbp-0x48]
  10664e:	ba 01 00 00 00       	mov    edx,0x1
  106653:	be 00 00 00 00       	mov    esi,0x0
  106658:	48 89 c7             	mov    rdi,rax
  10665b:	e8 ac 02 00 00       	call   10690c <memory::paging::page_directory_entry::set_flag(memory::paging::pt_flag, bool)>
  106660:	48 8d 45 b8          	lea    rax,[rbp-0x48]
  106664:	ba 01 00 00 00       	mov    edx,0x1
  106669:	be 01 00 00 00       	mov    esi,0x1
  10666e:	48 89 c7             	mov    rdi,rax
  106671:	e8 96 02 00 00       	call   10690c <memory::paging::page_directory_entry::set_flag(memory::paging::pt_flag, bool)>
  106676:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  10667a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  10667e:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  106682:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
  106686:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  10668a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  10668e:	48 89 d6             	mov    rsi,rdx
  106691:	48 89 c7             	mov    rdi,rax
  106694:	e8 53 fe ff ff       	call   1064ec <memory::paging::map_memory(void*, void*)>
  106699:	eb 14                	jmp    1066af <memory::paging::map_memory(void*, void*)+0x1c3>
  10669b:	48 8d 45 b8          	lea    rax,[rbp-0x48]
  10669f:	48 89 c7             	mov    rdi,rax
  1066a2:	e8 f9 02 00 00       	call   1069a0 <memory::paging::page_directory_entry::get_address()>
  1066a7:	48 c1 e0 0c          	shl    rax,0xc
  1066ab:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  1066af:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  1066b3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  1066b7:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
  1066bb:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  1066bf:	48 8d 45 b8          	lea    rax,[rbp-0x48]
  1066c3:	be 00 00 00 00       	mov    esi,0x0
  1066c8:	48 89 c7             	mov    rdi,rax
  1066cb:	e8 9a 02 00 00       	call   10696a <memory::paging::page_directory_entry::get_flag(memory::paging::pt_flag)>
  1066d0:	83 f0 01             	xor    eax,0x1
  1066d3:	84 c0                	test   al,al
  1066d5:	0f 84 8a 00 00 00    	je     106765 <memory::paging::map_memory(void*, void*)+0x279>
  1066db:	e8 f1 fa ff ff       	call   1061d1 <request_page>
  1066e0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  1066e4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  1066e8:	ba 00 10 00 00       	mov    edx,0x1000
  1066ed:	be 00 00 00 00       	mov    esi,0x0
  1066f2:	48 89 c7             	mov    rdi,rax
  1066f5:	e8 66 03 00 00       	call   106a60 <memory::operations::memset(void*, unsigned char, unsigned long)>
  1066fa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  1066fe:	48 c1 e8 0c          	shr    rax,0xc
  106702:	48 89 c2             	mov    rdx,rax
  106705:	48 8d 45 b8          	lea    rax,[rbp-0x48]
  106709:	48 89 d6             	mov    rsi,rdx
  10670c:	48 89 c7             	mov    rdi,rax
  10670f:	e8 b6 02 00 00       	call   1069ca <memory::paging::page_directory_entry::set_address(unsigned long)>
  106714:	48 8d 45 b8          	lea    rax,[rbp-0x48]
  106718:	ba 01 00 00 00       	mov    edx,0x1
  10671d:	be 00 00 00 00       	mov    esi,0x0
  106722:	48 89 c7             	mov    rdi,rax
  106725:	e8 e2 01 00 00       	call   10690c <memory::paging::page_directory_entry::set_flag(memory::paging::pt_flag, bool)>
  10672a:	48 8d 45 b8          	lea    rax,[rbp-0x48]
  10672e:	ba 01 00 00 00       	mov    edx,0x1
  106733:	be 01 00 00 00       	mov    esi,0x1
  106738:	48 89 c7             	mov    rdi,rax
  10673b:	e8 cc 01 00 00       	call   10690c <memory::paging::page_directory_entry::set_flag(memory::paging::pt_flag, bool)>
  106740:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  106744:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  106748:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  10674c:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
  106750:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  106754:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  106758:	48 89 d6             	mov    rsi,rdx
  10675b:	48 89 c7             	mov    rdi,rax
  10675e:	e8 89 fd ff ff       	call   1064ec <memory::paging::map_memory(void*, void*)>
  106763:	eb 14                	jmp    106779 <memory::paging::map_memory(void*, void*)+0x28d>
  106765:	48 8d 45 b8          	lea    rax,[rbp-0x48]
  106769:	48 89 c7             	mov    rdi,rax
  10676c:	e8 2f 02 00 00       	call   1069a0 <memory::paging::page_directory_entry::get_address()>
  106771:	48 c1 e0 0c          	shl    rax,0xc
  106775:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  106779:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  10677d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  106781:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
  106785:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  106789:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  10678d:	48 c1 e8 0c          	shr    rax,0xc
  106791:	48 89 c2             	mov    rdx,rax
  106794:	48 8d 45 b8          	lea    rax,[rbp-0x48]
  106798:	48 89 d6             	mov    rsi,rdx
  10679b:	48 89 c7             	mov    rdi,rax
  10679e:	e8 27 02 00 00       	call   1069ca <memory::paging::page_directory_entry::set_address(unsigned long)>
  1067a3:	48 8d 45 b8          	lea    rax,[rbp-0x48]
  1067a7:	ba 01 00 00 00       	mov    edx,0x1
  1067ac:	be 00 00 00 00       	mov    esi,0x0
  1067b1:	48 89 c7             	mov    rdi,rax
  1067b4:	e8 53 01 00 00       	call   10690c <memory::paging::page_directory_entry::set_flag(memory::paging::pt_flag, bool)>
  1067b9:	48 8d 45 b8          	lea    rax,[rbp-0x48]
  1067bd:	ba 01 00 00 00       	mov    edx,0x1
  1067c2:	be 01 00 00 00       	mov    esi,0x1
  1067c7:	48 89 c7             	mov    rdi,rax
  1067ca:	e8 3d 01 00 00       	call   10690c <memory::paging::page_directory_entry::set_flag(memory::paging::pt_flag, bool)>
  1067cf:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  1067d3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  1067d7:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
  1067db:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
  1067df:	90                   	nop
  1067e0:	c9                   	leave  
  1067e1:	c3                   	ret    

00000000001067e2 <donate_to_userspace>:
  1067e2:	55                   	push   rbp
  1067e3:	48 89 e5             	mov    rbp,rsp
  1067e6:	48 83 ec 60          	sub    rsp,0x60
  1067ea:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  1067ee:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  1067f2:	48 8d 45 c0          	lea    rax,[rbp-0x40]
  1067f6:	48 89 d6             	mov    rsi,rdx
  1067f9:	48 89 c7             	mov    rdi,rax
  1067fc:	e8 75 fc ff ff       	call   106476 <memory::paging::page_map_indexer::page_map_indexer(unsigned long)>
  106801:	48 c7 c0 d0 00 11 00 	mov    rax,0x1100d0
  106808:	48 8b 00             	mov    rax,QWORD PTR [rax]
  10680b:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  10680f:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
  106813:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  106817:	48 c7 c0 d0 00 11 00 	mov    rax,0x1100d0
  10681e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  106821:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  106825:	48 c1 e0 03          	shl    rax,0x3
  106829:	48 01 d0             	add    rax,rdx
  10682c:	ba 01 00 00 00       	mov    edx,0x1
  106831:	be 02 00 00 00       	mov    esi,0x2
  106836:	48 89 c7             	mov    rdi,rax
  106839:	e8 ce 00 00 00       	call   10690c <memory::paging::page_directory_entry::set_flag(memory::paging::pt_flag, bool)>
  10683e:	48 8d 45 b8          	lea    rax,[rbp-0x48]
  106842:	48 89 c7             	mov    rdi,rax
  106845:	e8 56 01 00 00       	call   1069a0 <memory::paging::page_directory_entry::get_address()>
  10684a:	48 c1 e0 0c          	shl    rax,0xc
  10684e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  106852:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  106856:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  10685d:	00 
  10685e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106862:	48 01 d0             	add    rax,rdx
  106865:	ba 01 00 00 00       	mov    edx,0x1
  10686a:	be 02 00 00 00       	mov    esi,0x2
  10686f:	48 89 c7             	mov    rdi,rax
  106872:	e8 95 00 00 00       	call   10690c <memory::paging::page_directory_entry::set_flag(memory::paging::pt_flag, bool)>
  106877:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  10687b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  10687f:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
  106883:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  106887:	48 8d 45 b8          	lea    rax,[rbp-0x48]
  10688b:	48 89 c7             	mov    rdi,rax
  10688e:	e8 0d 01 00 00       	call   1069a0 <memory::paging::page_directory_entry::get_address()>
  106893:	48 c1 e0 0c          	shl    rax,0xc
  106897:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  10689b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  10689f:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  1068a6:	00 
  1068a7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  1068ab:	48 01 d0             	add    rax,rdx
  1068ae:	ba 01 00 00 00       	mov    edx,0x1
  1068b3:	be 02 00 00 00       	mov    esi,0x2
  1068b8:	48 89 c7             	mov    rdi,rax
  1068bb:	e8 4c 00 00 00       	call   10690c <memory::paging::page_directory_entry::set_flag(memory::paging::pt_flag, bool)>
  1068c0:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  1068c4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  1068c8:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
  1068cc:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  1068d0:	48 8d 45 b8          	lea    rax,[rbp-0x48]
  1068d4:	48 89 c7             	mov    rdi,rax
  1068d7:	e8 c4 00 00 00       	call   1069a0 <memory::paging::page_directory_entry::get_address()>
  1068dc:	48 c1 e0 0c          	shl    rax,0xc
  1068e0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  1068e4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  1068e8:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  1068ef:	00 
  1068f0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  1068f4:	48 01 d0             	add    rax,rdx
  1068f7:	ba 01 00 00 00       	mov    edx,0x1
  1068fc:	be 02 00 00 00       	mov    esi,0x2
  106901:	48 89 c7             	mov    rdi,rax
  106904:	e8 03 00 00 00       	call   10690c <memory::paging::page_directory_entry::set_flag(memory::paging::pt_flag, bool)>
  106909:	90                   	nop
  10690a:	c9                   	leave  
  10690b:	c3                   	ret    

000000000010690c <memory::paging::page_directory_entry::set_flag(memory::paging::pt_flag, bool)>:
  10690c:	55                   	push   rbp
  10690d:	48 89 e5             	mov    rbp,rsp
  106910:	48 83 ec 20          	sub    rsp,0x20
  106914:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  106918:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
  10691b:	89 d0                	mov    eax,edx
  10691d:	88 45 e0             	mov    BYTE PTR [rbp-0x20],al
  106920:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  106923:	ba 01 00 00 00       	mov    edx,0x1
  106928:	89 c1                	mov    ecx,eax
  10692a:	48 d3 e2             	shl    rdx,cl
  10692d:	48 89 d0             	mov    rax,rdx
  106930:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  106934:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  106938:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  10693b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  10693f:	48 f7 d0             	not    rax
  106942:	48 21 c2             	and    rdx,rax
  106945:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  106949:	48 89 10             	mov    QWORD PTR [rax],rdx
  10694c:	80 7d e0 00          	cmp    BYTE PTR [rbp-0x20],0x0
  106950:	74 15                	je     106967 <memory::paging::page_directory_entry::set_flag(memory::paging::pt_flag, bool)+0x5b>
  106952:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  106956:	48 8b 00             	mov    rax,QWORD PTR [rax]
  106959:	48 0b 45 f8          	or     rax,QWORD PTR [rbp-0x8]
  10695d:	48 89 c2             	mov    rdx,rax
  106960:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  106964:	48 89 10             	mov    QWORD PTR [rax],rdx
  106967:	90                   	nop
  106968:	c9                   	leave  
  106969:	c3                   	ret    

000000000010696a <memory::paging::page_directory_entry::get_flag(memory::paging::pt_flag)>:
  10696a:	55                   	push   rbp
  10696b:	48 89 e5             	mov    rbp,rsp
  10696e:	48 83 ec 20          	sub    rsp,0x20
  106972:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  106976:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
  106979:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  10697c:	ba 01 00 00 00       	mov    edx,0x1
  106981:	89 c1                	mov    ecx,eax
  106983:	48 d3 e2             	shl    rdx,cl
  106986:	48 89 d0             	mov    rax,rdx
  106989:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  10698d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  106991:	48 8b 00             	mov    rax,QWORD PTR [rax]
  106994:	48 23 45 f8          	and    rax,QWORD PTR [rbp-0x8]
  106998:	48 85 c0             	test   rax,rax
  10699b:	0f 95 c0             	setne  al
  10699e:	c9                   	leave  
  10699f:	c3                   	ret    

00000000001069a0 <memory::paging::page_directory_entry::get_address()>:
  1069a0:	55                   	push   rbp
  1069a1:	48 89 e5             	mov    rbp,rsp
  1069a4:	48 83 ec 08          	sub    rsp,0x8
  1069a8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  1069ac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1069b0:	48 8b 00             	mov    rax,QWORD PTR [rax]
  1069b3:	48 c1 e8 0c          	shr    rax,0xc
  1069b7:	48 89 c2             	mov    rdx,rax
  1069ba:	48 b8 ff ff ff ff ff 	movabs rax,0xffffffffff
  1069c1:	00 00 00 
  1069c4:	48 21 d0             	and    rax,rdx
  1069c7:	c9                   	leave  
  1069c8:	c3                   	ret    
  1069c9:	90                   	nop

00000000001069ca <memory::paging::page_directory_entry::set_address(unsigned long)>:
  1069ca:	55                   	push   rbp
  1069cb:	48 89 e5             	mov    rbp,rsp
  1069ce:	48 83 ec 10          	sub    rsp,0x10
  1069d2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  1069d6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  1069da:	48 b8 ff ff ff ff ff 	movabs rax,0xffffffffff
  1069e1:	00 00 00 
  1069e4:	48 21 45 f0          	and    QWORD PTR [rbp-0x10],rax
  1069e8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1069ec:	48 8b 00             	mov    rax,QWORD PTR [rax]
  1069ef:	48 ba ff 0f 00 00 00 	movabs rdx,0xfff0000000000fff
  1069f6:	00 f0 ff 
  1069f9:	48 21 c2             	and    rdx,rax
  1069fc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106a00:	48 89 10             	mov    QWORD PTR [rax],rdx
  106a03:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106a07:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  106a0a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  106a0e:	48 c1 e0 0c          	shl    rax,0xc
  106a12:	48 09 c2             	or     rdx,rax
  106a15:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106a19:	48 89 10             	mov    QWORD PTR [rax],rdx
  106a1c:	90                   	nop
  106a1d:	c9                   	leave  
  106a1e:	c3                   	ret    

0000000000106a1f <memory::operations::memcpy(void*, void const*, unsigned long)>:
  106a1f:	55                   	push   rbp
  106a20:	48 89 e5             	mov    rbp,rsp
  106a23:	48 83 ec 18          	sub    rsp,0x18
  106a27:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  106a2b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  106a2f:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  106a33:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  106a37:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  106a3b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106a3f:	48 89 d6             	mov    rsi,rdx
  106a42:	48 89 c7             	mov    rdi,rax
  106a45:	fc                   	cld    
  106a46:	f3 a4                	rep movs BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
  106a48:	48 89 f8             	mov    rax,rdi
  106a4b:	48 89 f2             	mov    rdx,rsi
  106a4e:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  106a52:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  106a56:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  106a5a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106a5e:	c9                   	leave  
  106a5f:	c3                   	ret    

0000000000106a60 <memory::operations::memset(void*, unsigned char, unsigned long)>:
  106a60:	55                   	push   rbp
  106a61:	48 89 e5             	mov    rbp,rsp
  106a64:	48 83 ec 28          	sub    rsp,0x28
  106a68:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  106a6c:	89 f0                	mov    eax,esi
  106a6e:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  106a72:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
  106a75:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  106a79:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  106a7d:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  106a84:	00 
  106a85:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106a89:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
  106a8d:	73 18                	jae    106aa7 <memory::operations::memset(void*, unsigned char, unsigned long)+0x47>
  106a8f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  106a93:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106a97:	48 01 c2             	add    rdx,rax
  106a9a:	0f b6 45 e4          	movzx  eax,BYTE PTR [rbp-0x1c]
  106a9e:	88 02                	mov    BYTE PTR [rdx],al
  106aa0:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
  106aa5:	eb de                	jmp    106a85 <memory::operations::memset(void*, unsigned char, unsigned long)+0x25>
  106aa7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  106aab:	c9                   	leave  
  106aac:	c3                   	ret    

0000000000106aad <ex_syscall_handler>:
  106aad:	55                   	push   rbp
  106aae:	48 89 e5             	mov    rbp,rsp
  106ab1:	48 83 ec 10          	sub    rsp,0x10
  106ab5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  106ab9:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  106abd:	48 83 7d f8 01       	cmp    QWORD PTR [rbp-0x8],0x1
  106ac2:	75 0e                	jne    106ad2 <ex_syscall_handler+0x25>
  106ac4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  106ac8:	48 89 c7             	mov    rdi,rax
  106acb:	e8 46 0b 00 00       	call   107616 <serial_msg>
  106ad0:	eb 01                	jmp    106ad3 <ex_syscall_handler+0x26>
  106ad2:	90                   	nop
  106ad3:	90                   	nop
  106ad4:	c9                   	leave  
  106ad5:	c3                   	ret    

0000000000106ad6 <util::bitmap::operator[](unsigned long)>:
  106ad6:	55                   	push   rbp
  106ad7:	48 89 e5             	mov    rbp,rsp
  106ada:	48 83 ec 20          	sub    rsp,0x20
  106ade:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  106ae2:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  106ae6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  106aea:	48 8b 00             	mov    rax,QWORD PTR [rax]
  106aed:	48 c1 e0 03          	shl    rax,0x3
  106af1:	48 83 e8 01          	sub    rax,0x1
  106af5:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
  106af9:	76 02                	jbe    106afd <util::bitmap::operator[](unsigned long)+0x27>
  106afb:	cd 0d                	int    0xd
  106afd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  106b01:	48 c1 e8 03          	shr    rax,0x3
  106b05:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  106b09:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  106b0d:	83 e0 07             	and    eax,0x7
  106b10:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
  106b13:	0f b6 45 f7          	movzx  eax,BYTE PTR [rbp-0x9]
  106b17:	ba 80 00 00 00       	mov    edx,0x80
  106b1c:	89 c1                	mov    ecx,eax
  106b1e:	d3 fa                	sar    edx,cl
  106b20:	89 d0                	mov    eax,edx
  106b22:	88 45 f6             	mov    BYTE PTR [rbp-0xa],al
  106b25:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  106b29:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  106b2d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106b31:	48 01 d0             	add    rax,rdx
  106b34:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  106b37:	22 45 f6             	and    al,BYTE PTR [rbp-0xa]
  106b3a:	84 c0                	test   al,al
  106b3c:	74 07                	je     106b45 <util::bitmap::operator[](unsigned long)+0x6f>
  106b3e:	b8 01 00 00 00       	mov    eax,0x1
  106b43:	eb 05                	jmp    106b4a <util::bitmap::operator[](unsigned long)+0x74>
  106b45:	b8 00 00 00 00       	mov    eax,0x0
  106b4a:	c9                   	leave  
  106b4b:	c3                   	ret    

0000000000106b4c <util::bitmap::set(unsigned long, bool)>:
  106b4c:	55                   	push   rbp
  106b4d:	48 89 e5             	mov    rbp,rsp
  106b50:	48 83 ec 28          	sub    rsp,0x28
  106b54:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  106b58:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  106b5c:	89 d0                	mov    eax,edx
  106b5e:	88 45 dc             	mov    BYTE PTR [rbp-0x24],al
  106b61:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  106b65:	48 c1 e8 03          	shr    rax,0x3
  106b69:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  106b6d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  106b71:	83 e0 07             	and    eax,0x7
  106b74:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
  106b77:	0f b6 45 f7          	movzx  eax,BYTE PTR [rbp-0x9]
  106b7b:	ba 80 00 00 00       	mov    edx,0x80
  106b80:	89 c1                	mov    ecx,eax
  106b82:	d3 fa                	sar    edx,cl
  106b84:	89 d0                	mov    eax,edx
  106b86:	88 45 f6             	mov    BYTE PTR [rbp-0xa],al
  106b89:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  106b8d:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  106b91:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106b95:	48 01 d0             	add    rax,rdx
  106b98:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  106b9b:	89 c2                	mov    edx,eax
  106b9d:	0f b6 45 f6          	movzx  eax,BYTE PTR [rbp-0xa]
  106ba1:	f7 d0                	not    eax
  106ba3:	89 d1                	mov    ecx,edx
  106ba5:	21 c1                	and    ecx,eax
  106ba7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  106bab:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  106baf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106bb3:	48 01 d0             	add    rax,rdx
  106bb6:	89 ca                	mov    edx,ecx
  106bb8:	88 10                	mov    BYTE PTR [rax],dl
  106bba:	80 7d dc 00          	cmp    BYTE PTR [rbp-0x24],0x0
  106bbe:	74 26                	je     106be6 <util::bitmap::set(unsigned long, bool)+0x9a>
  106bc0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  106bc4:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  106bc8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106bcc:	48 01 d0             	add    rax,rdx
  106bcf:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  106bd2:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  106bd6:	48 8b 4a 08          	mov    rcx,QWORD PTR [rdx+0x8]
  106bda:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  106bde:	48 01 ca             	add    rdx,rcx
  106be1:	0a 45 f6             	or     al,BYTE PTR [rbp-0xa]
  106be4:	88 02                	mov    BYTE PTR [rdx],al
  106be6:	90                   	nop
  106be7:	c9                   	leave  
  106be8:	c3                   	ret    

0000000000106be9 <util::itoa(long, int)>:
  106be9:	55                   	push   rbp
  106bea:	48 89 e5             	mov    rbp,rsp
  106bed:	48 83 ec 20          	sub    rsp,0x20
  106bf1:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  106bf5:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
  106bf8:	48 c7 45 f8 3c 00 00 	mov    QWORD PTR [rbp-0x8],0x3c
  106bff:	00 
  106c00:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
  106c05:	74 4b                	je     106c52 <util::itoa(long, int)+0x69>
  106c07:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  106c0c:	74 44                	je     106c52 <util::itoa(long, int)+0x69>
  106c0e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  106c11:	48 63 c8             	movsxd rcx,eax
  106c14:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  106c18:	48 99                	cqo    
  106c1a:	48 f7 f9             	idiv   rcx
  106c1d:	48 8d 05 70 44 00 00 	lea    rax,[rip+0x4470]        # 10b094 <BASE_GRAN+0x10b>
  106c24:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
  106c28:	48 8d 0d d1 94 00 00 	lea    rcx,[rip+0x94d1]        # 110100 <util::itoa(long, int)::buf>
  106c2f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  106c33:	48 01 ca             	add    rdx,rcx
  106c36:	88 02                	mov    BYTE PTR [rdx],al
  106c38:	48 83 6d f8 01       	sub    QWORD PTR [rbp-0x8],0x1
  106c3d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  106c40:	48 63 f0             	movsxd rsi,eax
  106c43:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  106c47:	48 99                	cqo    
  106c49:	48 f7 fe             	idiv   rsi
  106c4c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  106c50:	eb ae                	jmp    106c00 <util::itoa(long, int)+0x17>
  106c52:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106c56:	48 8d 50 01          	lea    rdx,[rax+0x1]
  106c5a:	48 8d 05 9f 94 00 00 	lea    rax,[rip+0x949f]        # 110100 <util::itoa(long, int)::buf>
  106c61:	48 01 d0             	add    rax,rdx
  106c64:	c9                   	leave  
  106c65:	c3                   	ret    

0000000000106c66 <util::strcomp(char const*, char const*)>:
  106c66:	55                   	push   rbp
  106c67:	48 89 e5             	mov    rbp,rsp
  106c6a:	48 83 ec 10          	sub    rsp,0x10
  106c6e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  106c72:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  106c76:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106c7a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  106c7d:	84 c0                	test   al,al
  106c7f:	74 25                	je     106ca6 <util::strcomp(char const*, char const*)+0x40>
  106c81:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106c85:	0f b6 10             	movzx  edx,BYTE PTR [rax]
  106c88:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  106c8c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  106c8f:	38 c2                	cmp    dl,al
  106c91:	74 07                	je     106c9a <util::strcomp(char const*, char const*)+0x34>
  106c93:	b8 00 00 00 00       	mov    eax,0x0
  106c98:	eb 11                	jmp    106cab <util::strcomp(char const*, char const*)+0x45>
  106c9a:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
  106c9f:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
  106ca4:	eb d0                	jmp    106c76 <util::strcomp(char const*, char const*)+0x10>
  106ca6:	b8 01 00 00 00       	mov    eax,0x1
  106cab:	c9                   	leave  
  106cac:	c3                   	ret    

0000000000106cad <util::strlen(char const*)>:
  106cad:	55                   	push   rbp
  106cae:	48 89 e5             	mov    rbp,rsp
  106cb1:	48 83 ec 18          	sub    rsp,0x18
  106cb5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  106cb9:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  106cc0:	00 
  106cc1:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  106cc5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106cc9:	48 01 d0             	add    rax,rdx
  106ccc:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  106ccf:	84 c0                	test   al,al
  106cd1:	74 19                	je     106cec <util::strlen(char const*)+0x3f>
  106cd3:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  106cd7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106cdb:	48 01 d0             	add    rax,rdx
  106cde:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  106ce1:	84 c0                	test   al,al
  106ce3:	74 07                	je     106cec <util::strlen(char const*)+0x3f>
  106ce5:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
  106cea:	eb d5                	jmp    106cc1 <util::strlen(char const*)+0x14>
  106cec:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106cf0:	c9                   	leave  
  106cf1:	c3                   	ret    

0000000000106cf2 <util::strcat(char*, char const*)>:
  106cf2:	55                   	push   rbp
  106cf3:	48 89 e5             	mov    rbp,rsp
  106cf6:	48 83 ec 20          	sub    rsp,0x20
  106cfa:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  106cfe:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  106d02:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  106d06:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  106d0a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106d0e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  106d11:	84 c0                	test   al,al
  106d13:	74 07                	je     106d1c <util::strcat(char*, char const*)+0x2a>
  106d15:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
  106d1a:	eb ee                	jmp    106d0a <util::strcat(char*, char const*)+0x18>
  106d1c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  106d20:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  106d23:	84 c0                	test   al,al
  106d25:	74 19                	je     106d40 <util::strcat(char*, char const*)+0x4e>
  106d27:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  106d2b:	0f b6 10             	movzx  edx,BYTE PTR [rax]
  106d2e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106d32:	88 10                	mov    BYTE PTR [rax],dl
  106d34:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
  106d39:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
  106d3e:	eb dc                	jmp    106d1c <util::strcat(char*, char const*)+0x2a>
  106d40:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106d44:	c6 00 00             	mov    BYTE PTR [rax],0x0
  106d47:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  106d4b:	c9                   	leave  
  106d4c:	c3                   	ret    

0000000000106d4d <util::strcpy(char*, char const*)>:
  106d4d:	55                   	push   rbp
  106d4e:	48 89 e5             	mov    rbp,rsp
  106d51:	48 83 ec 20          	sub    rsp,0x20
  106d55:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  106d59:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  106d5d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  106d61:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  106d65:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  106d69:	0f b6 10             	movzx  edx,BYTE PTR [rax]
  106d6c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  106d70:	88 10                	mov    BYTE PTR [rax],dl
  106d72:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  106d76:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  106d79:	84 c0                	test   al,al
  106d7b:	0f 95 c0             	setne  al
  106d7e:	84 c0                	test   al,al
  106d80:	74 0c                	je     106d8e <util::strcpy(char*, char const*)+0x41>
  106d82:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
  106d87:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
  106d8c:	eb d7                	jmp    106d65 <util::strcpy(char*, char const*)+0x18>
  106d8e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106d92:	c9                   	leave  
  106d93:	c3                   	ret    

0000000000106d94 <util::isdigit(char)>:
  106d94:	55                   	push   rbp
  106d95:	48 89 e5             	mov    rbp,rsp
  106d98:	48 83 ec 08          	sub    rsp,0x8
  106d9c:	89 f8                	mov    eax,edi
  106d9e:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
  106da1:	80 7d fc 2f          	cmp    BYTE PTR [rbp-0x4],0x2f
  106da5:	7e 0d                	jle    106db4 <util::isdigit(char)+0x20>
  106da7:	80 7d fc 39          	cmp    BYTE PTR [rbp-0x4],0x39
  106dab:	7f 07                	jg     106db4 <util::isdigit(char)+0x20>
  106dad:	b8 01 00 00 00       	mov    eax,0x1
  106db2:	eb 05                	jmp    106db9 <util::isdigit(char)+0x25>
  106db4:	b8 00 00 00 00       	mov    eax,0x0
  106db9:	0f b6 c0             	movzx  eax,al
  106dbc:	c9                   	leave  
  106dbd:	c3                   	ret    

0000000000106dbe <interface_controller(io::keyboard::keyboard_packet)>:
  106dbe:	55                   	push   rbp
  106dbf:	48 89 e5             	mov    rbp,rsp
  106dc2:	48 83 ec 10          	sub    rsp,0x10
  106dc6:	66 89 7d fe          	mov    WORD PTR [rbp-0x2],di
  106dca:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
  106dce:	83 e0 01             	and    eax,0x1
  106dd1:	83 f0 01             	xor    eax,0x1
  106dd4:	84 c0                	test   al,al
  106dd6:	0f 85 ca 00 00 00    	jne    106ea6 <interface_controller(io::keyboard::keyboard_packet)+0xe8>
  106ddc:	48 c7 c0 10 d1 10 00 	mov    rax,0x10d110
  106de3:	48 8b 00             	mov    rax,QWORD PTR [rax]
  106de6:	48 8d 50 ff          	lea    rdx,[rax-0x1]
  106dea:	48 c7 c0 60 01 11 00 	mov    rax,0x110160
  106df1:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
  106df5:	66 c7 00 00 00       	mov    WORD PTR [rax],0x0
  106dfa:	0f b6 45 fe          	movzx  eax,BYTE PTR [rbp-0x2]
  106dfe:	3c b8                	cmp    al,0xb8
  106e00:	75 1a                	jne    106e1c <interface_controller(io::keyboard::keyboard_packet)+0x5e>
  106e02:	48 c7 c0 10 d1 10 00 	mov    rax,0x10d110
  106e09:	48 8b 00             	mov    rax,QWORD PTR [rax]
  106e0c:	48 8d 50 ff          	lea    rdx,[rax-0x1]
  106e10:	48 c7 c0 10 d1 10 00 	mov    rax,0x10d110
  106e17:	48 89 10             	mov    QWORD PTR [rax],rdx
  106e1a:	eb 20                	jmp    106e3c <interface_controller(io::keyboard::keyboard_packet)+0x7e>
  106e1c:	0f b6 45 fe          	movzx  eax,BYTE PTR [rbp-0x2]
  106e20:	3c c0                	cmp    al,0xc0
  106e22:	75 18                	jne    106e3c <interface_controller(io::keyboard::keyboard_packet)+0x7e>
  106e24:	48 c7 c0 10 d1 10 00 	mov    rax,0x10d110
  106e2b:	48 8b 00             	mov    rax,QWORD PTR [rax]
  106e2e:	48 8d 50 01          	lea    rdx,[rax+0x1]
  106e32:	48 c7 c0 10 d1 10 00 	mov    rax,0x10d110
  106e39:	48 89 10             	mov    QWORD PTR [rax],rdx
  106e3c:	48 c7 c0 10 d1 10 00 	mov    rax,0x10d110
  106e43:	48 8b 00             	mov    rax,QWORD PTR [rax]
  106e46:	48 83 f8 06          	cmp    rax,0x6
  106e4a:	76 10                	jbe    106e5c <interface_controller(io::keyboard::keyboard_packet)+0x9e>
  106e4c:	48 c7 c0 10 d1 10 00 	mov    rax,0x10d110
  106e53:	48 c7 00 01 00 00 00 	mov    QWORD PTR [rax],0x1
  106e5a:	eb 1d                	jmp    106e79 <interface_controller(io::keyboard::keyboard_packet)+0xbb>
  106e5c:	48 c7 c0 10 d1 10 00 	mov    rax,0x10d110
  106e63:	48 8b 00             	mov    rax,QWORD PTR [rax]
  106e66:	48 85 c0             	test   rax,rax
  106e69:	75 0e                	jne    106e79 <interface_controller(io::keyboard::keyboard_packet)+0xbb>
  106e6b:	48 c7 c0 10 d1 10 00 	mov    rax,0x10d110
  106e72:	48 c7 00 06 00 00 00 	mov    QWORD PTR [rax],0x6
  106e79:	48 c7 c0 10 d1 10 00 	mov    rax,0x10d110
  106e80:	48 8b 00             	mov    rax,QWORD PTR [rax]
  106e83:	48 8d 50 ff          	lea    rdx,[rax-0x1]
  106e87:	48 c7 c0 60 01 11 00 	mov    rax,0x110160
  106e8e:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
  106e92:	66 c7 00 2a 0b       	mov    WORD PTR [rax],0xb2a
  106e97:	e8 b6 b2 ff ff       	call   102152 <terminal::instance()>
  106e9c:	48 89 c7             	mov    rdi,rax
  106e9f:	e8 12 ac ff ff       	call   101ab6 <terminal::render_buffer()>
  106ea4:	eb 01                	jmp    106ea7 <interface_controller(io::keyboard::keyboard_packet)+0xe9>
  106ea6:	90                   	nop
  106ea7:	c9                   	leave  
  106ea8:	c3                   	ret    

0000000000106ea9 <sys::tui::start()>:
  106ea9:	55                   	push   rbp
  106eaa:	48 89 e5             	mov    rbp,rsp
  106ead:	48 83 ec 10          	sub    rsp,0x10
  106eb1:	e8 9c b2 ff ff       	call   102152 <terminal::instance()>
  106eb6:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  106eba:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106ebe:	48 8d 35 e3 41 00 00 	lea    rsi,[rip+0x41e3]        # 10b0a8 <selector_entry+0x2>
  106ec5:	48 89 c7             	mov    rdi,rax
  106ec8:	e8 f9 ae ff ff       	call   101dc6 <terminal::write(char const*)>
  106ecd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106ed1:	48 8d 35 d2 41 00 00 	lea    rsi,[rip+0x41d2]        # 10b0aa <selector_entry+0x4>
  106ed8:	48 89 c7             	mov    rdi,rax
  106edb:	e8 e6 ae ff ff       	call   101dc6 <terminal::write(char const*)>
  106ee0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106ee4:	ba 0c 00 00 00       	mov    edx,0xc
  106ee9:	be 06 00 00 00       	mov    esi,0x6
  106eee:	48 89 c7             	mov    rdi,rax
  106ef1:	e8 20 b1 ff ff       	call   102016 <terminal::setCursor(unsigned long, unsigned long)>
  106ef6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106efa:	48 8d 35 b6 41 00 00 	lea    rsi,[rip+0x41b6]        # 10b0b7 <selector_entry+0x11>
  106f01:	48 89 c7             	mov    rdi,rax
  106f04:	e8 bd ae ff ff       	call   101dc6 <terminal::write(char const*)>
  106f09:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106f0d:	ba 0f 00 00 00       	mov    edx,0xf
  106f12:	be 06 00 00 00       	mov    esi,0x6
  106f17:	48 89 c7             	mov    rdi,rax
  106f1a:	e8 f7 b0 ff ff       	call   102016 <terminal::setCursor(unsigned long, unsigned long)>
  106f1f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106f23:	48 8d 35 9d 41 00 00 	lea    rsi,[rip+0x419d]        # 10b0c7 <selector_entry+0x21>
  106f2a:	48 89 c7             	mov    rdi,rax
  106f2d:	e8 94 ae ff ff       	call   101dc6 <terminal::write(char const*)>
  106f32:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106f36:	ba 10 00 00 00       	mov    edx,0x10
  106f3b:	be 06 00 00 00       	mov    esi,0x6
  106f40:	48 89 c7             	mov    rdi,rax
  106f43:	e8 ce b0 ff ff       	call   102016 <terminal::setCursor(unsigned long, unsigned long)>
  106f48:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106f4c:	48 8d 35 78 41 00 00 	lea    rsi,[rip+0x4178]        # 10b0cb <selector_entry+0x25>
  106f53:	48 89 c7             	mov    rdi,rax
  106f56:	e8 6b ae ff ff       	call   101dc6 <terminal::write(char const*)>
  106f5b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106f5f:	ba 11 00 00 00       	mov    edx,0x11
  106f64:	be 06 00 00 00       	mov    esi,0x6
  106f69:	48 89 c7             	mov    rdi,rax
  106f6c:	e8 a5 b0 ff ff       	call   102016 <terminal::setCursor(unsigned long, unsigned long)>
  106f71:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106f75:	48 8d 35 56 41 00 00 	lea    rsi,[rip+0x4156]        # 10b0d2 <selector_entry+0x2c>
  106f7c:	48 89 c7             	mov    rdi,rax
  106f7f:	e8 42 ae ff ff       	call   101dc6 <terminal::write(char const*)>
  106f84:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106f88:	ba 12 00 00 00       	mov    edx,0x12
  106f8d:	be 06 00 00 00       	mov    esi,0x6
  106f92:	48 89 c7             	mov    rdi,rax
  106f95:	e8 7c b0 ff ff       	call   102016 <terminal::setCursor(unsigned long, unsigned long)>
  106f9a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106f9e:	48 8d 35 36 41 00 00 	lea    rsi,[rip+0x4136]        # 10b0db <selector_entry+0x35>
  106fa5:	48 89 c7             	mov    rdi,rax
  106fa8:	e8 19 ae ff ff       	call   101dc6 <terminal::write(char const*)>
  106fad:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106fb1:	ba 13 00 00 00       	mov    edx,0x13
  106fb6:	be 06 00 00 00       	mov    esi,0x6
  106fbb:	48 89 c7             	mov    rdi,rax
  106fbe:	e8 53 b0 ff ff       	call   102016 <terminal::setCursor(unsigned long, unsigned long)>
  106fc3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106fc7:	48 8d 35 11 41 00 00 	lea    rsi,[rip+0x4111]        # 10b0df <selector_entry+0x39>
  106fce:	48 89 c7             	mov    rdi,rax
  106fd1:	e8 f0 ad ff ff       	call   101dc6 <terminal::write(char const*)>
  106fd6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106fda:	ba 14 00 00 00       	mov    edx,0x14
  106fdf:	be 06 00 00 00       	mov    esi,0x6
  106fe4:	48 89 c7             	mov    rdi,rax
  106fe7:	e8 2a b0 ff ff       	call   102016 <terminal::setCursor(unsigned long, unsigned long)>
  106fec:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  106ff0:	48 8d 35 ee 40 00 00 	lea    rsi,[rip+0x40ee]        # 10b0e5 <selector_entry+0x3f>
  106ff7:	48 89 c7             	mov    rdi,rax
  106ffa:	e8 c7 ad ff ff       	call   101dc6 <terminal::write(char const*)>
  106fff:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  107003:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  107006:	48 89 d0             	mov    rax,rdx
  107009:	48 c1 e0 04          	shl    rax,0x4
  10700d:	48 29 d0             	sub    rax,rdx
  107010:	48 01 c0             	add    rax,rax
  107013:	48 89 c2             	mov    rdx,rax
  107016:	48 c7 c0 00 e0 10 00 	mov    rax,0x10e000
  10701d:	48 8b 00             	mov    rax,QWORD PTR [rax]
  107020:	48 01 d0             	add    rax,rdx
  107023:	48 83 c0 08          	add    rax,0x8
  107027:	48 89 c2             	mov    rdx,rax
  10702a:	48 c7 c0 60 01 11 00 	mov    rax,0x110160
  107031:	48 89 10             	mov    QWORD PTR [rax],rdx
  107034:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  107038:	48 8b 00             	mov    rax,QWORD PTR [rax]
  10703b:	48 c1 e0 05          	shl    rax,0x5
  10703f:	48 89 c2             	mov    rdx,rax
  107042:	48 c7 c0 00 e0 10 00 	mov    rax,0x10e000
  107049:	48 8b 00             	mov    rax,QWORD PTR [rax]
  10704c:	48 01 d0             	add    rax,rdx
  10704f:	48 83 c0 08          	add    rax,0x8
  107053:	48 89 c2             	mov    rdx,rax
  107056:	48 c7 c0 60 01 11 00 	mov    rax,0x110160
  10705d:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
  107061:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  107065:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  107068:	48 89 d0             	mov    rax,rdx
  10706b:	48 c1 e0 04          	shl    rax,0x4
  10706f:	48 01 d0             	add    rax,rdx
  107072:	48 01 c0             	add    rax,rax
  107075:	48 89 c2             	mov    rdx,rax
  107078:	48 c7 c0 00 e0 10 00 	mov    rax,0x10e000
  10707f:	48 8b 00             	mov    rax,QWORD PTR [rax]
  107082:	48 01 d0             	add    rax,rdx
  107085:	48 83 c0 08          	add    rax,0x8
  107089:	48 89 c2             	mov    rdx,rax
  10708c:	48 c7 c0 60 01 11 00 	mov    rax,0x110160
  107093:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
  107097:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  10709b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  10709e:	48 89 d0             	mov    rax,rdx
  1070a1:	48 c1 e0 03          	shl    rax,0x3
  1070a5:	48 01 d0             	add    rax,rdx
  1070a8:	48 c1 e0 02          	shl    rax,0x2
  1070ac:	48 89 c2             	mov    rdx,rax
  1070af:	48 c7 c0 00 e0 10 00 	mov    rax,0x10e000
  1070b6:	48 8b 00             	mov    rax,QWORD PTR [rax]
  1070b9:	48 01 d0             	add    rax,rdx
  1070bc:	48 83 c0 08          	add    rax,0x8
  1070c0:	48 89 c2             	mov    rdx,rax
  1070c3:	48 c7 c0 60 01 11 00 	mov    rax,0x110160
  1070ca:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
  1070ce:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  1070d2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  1070d5:	48 89 d0             	mov    rax,rdx
  1070d8:	48 c1 e0 03          	shl    rax,0x3
  1070dc:	48 01 d0             	add    rax,rdx
  1070df:	48 01 c0             	add    rax,rax
  1070e2:	48 01 d0             	add    rax,rdx
  1070e5:	48 01 c0             	add    rax,rax
  1070e8:	48 89 c2             	mov    rdx,rax
  1070eb:	48 c7 c0 00 e0 10 00 	mov    rax,0x10e000
  1070f2:	48 8b 00             	mov    rax,QWORD PTR [rax]
  1070f5:	48 01 d0             	add    rax,rdx
  1070f8:	48 83 c0 08          	add    rax,0x8
  1070fc:	48 89 c2             	mov    rdx,rax
  1070ff:	48 c7 c0 60 01 11 00 	mov    rax,0x110160
  107106:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
  10710a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  10710e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  107111:	48 89 d0             	mov    rax,rdx
  107114:	48 c1 e0 02          	shl    rax,0x2
  107118:	48 01 d0             	add    rax,rdx
  10711b:	48 c1 e0 03          	shl    rax,0x3
  10711f:	48 89 c2             	mov    rdx,rax
  107122:	48 c7 c0 00 e0 10 00 	mov    rax,0x10e000
  107129:	48 8b 00             	mov    rax,QWORD PTR [rax]
  10712c:	48 01 d0             	add    rax,rdx
  10712f:	48 83 c0 08          	add    rax,0x8
  107133:	48 89 c2             	mov    rdx,rax
  107136:	48 c7 c0 60 01 11 00 	mov    rax,0x110160
  10713d:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
  107141:	48 c7 c0 60 01 11 00 	mov    rax,0x110160
  107148:	48 8b 00             	mov    rax,QWORD PTR [rax]
  10714b:	66 c7 00 2a 0b       	mov    WORD PTR [rax],0xb2a
  107150:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  107154:	48 89 c7             	mov    rdi,rax
  107157:	e8 5a a9 ff ff       	call   101ab6 <terminal::render_buffer()>
  10715c:	48 c7 c0 be 6d 10 00 	mov    rax,0x106dbe
  107163:	48 89 c7             	mov    rdi,rax
  107166:	e8 66 00 00 00       	call   1071d1 <io::keyboard::keyboard_event_subscribe(void (*)(io::keyboard::keyboard_packet))>
  10716b:	90                   	nop
  10716c:	c9                   	leave  
  10716d:	c3                   	ret    

000000000010716e <io::inb(unsigned short)>:
  10716e:	55                   	push   rbp
  10716f:	48 89 e5             	mov    rbp,rsp
  107172:	48 83 ec 18          	sub    rsp,0x18
  107176:	89 f8                	mov    eax,edi
  107178:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
  10717c:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
  107180:	89 c2                	mov    edx,eax
  107182:	ec                   	in     al,dx
  107183:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
  107186:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
  10718a:	c9                   	leave  
  10718b:	c3                   	ret    

000000000010718c <io::keyboard::keyboard_event_publisher(io::keyboard::keyboard_packet)>:
  10718c:	55                   	push   rbp
  10718d:	48 89 e5             	mov    rbp,rsp
  107190:	48 83 ec 20          	sub    rsp,0x20
  107194:	66 89 7d ee          	mov    WORD PTR [rbp-0x12],di
  107198:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  10719f:	00 
  1071a0:	48 c7 c0 a0 09 11 00 	mov    rax,0x1109a0
  1071a7:	48 8b 00             	mov    rax,QWORD PTR [rax]
  1071aa:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
  1071ae:	7d 1e                	jge    1071ce <io::keyboard::keyboard_event_publisher(io::keyboard::keyboard_packet)+0x42>
  1071b0:	48 c7 c0 a0 01 11 00 	mov    rax,0x1101a0
  1071b7:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  1071bb:	48 8b 14 d0          	mov    rdx,QWORD PTR [rax+rdx*8]
  1071bf:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
  1071c3:	89 c7                	mov    edi,eax
  1071c5:	ff d2                	call   rdx
  1071c7:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
  1071cc:	eb d2                	jmp    1071a0 <io::keyboard::keyboard_event_publisher(io::keyboard::keyboard_packet)+0x14>
  1071ce:	90                   	nop
  1071cf:	c9                   	leave  
  1071d0:	c3                   	ret    

00000000001071d1 <io::keyboard::keyboard_event_subscribe(void (*)(io::keyboard::keyboard_packet))>:
  1071d1:	55                   	push   rbp
  1071d2:	48 89 e5             	mov    rbp,rsp
  1071d5:	48 83 ec 08          	sub    rsp,0x8
  1071d9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  1071dd:	48 c7 c0 a0 09 11 00 	mov    rax,0x1109a0
  1071e4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  1071e7:	48 c7 c0 a0 01 11 00 	mov    rax,0x1101a0
  1071ee:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  1071f2:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
  1071f6:	48 c7 c0 a0 09 11 00 	mov    rax,0x1109a0
  1071fd:	48 8b 00             	mov    rax,QWORD PTR [rax]
  107200:	48 8d 50 01          	lea    rdx,[rax+0x1]
  107204:	48 c7 c0 a0 09 11 00 	mov    rax,0x1109a0
  10720b:	48 89 10             	mov    QWORD PTR [rax],rdx
  10720e:	90                   	nop
  10720f:	c9                   	leave  
  107210:	c3                   	ret    

0000000000107211 <io::keyboard::keyboard_event_unsubscribe(void (*)(io::keyboard::keyboard_packet))>:
  107211:	55                   	push   rbp
  107212:	48 89 e5             	mov    rbp,rsp
  107215:	48 83 ec 28          	sub    rsp,0x28
  107219:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  10721d:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  107224:	00 
  107225:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  10722c:	00 
  10722d:	48 c7 c0 a0 09 11 00 	mov    rax,0x1109a0
  107234:	48 8b 00             	mov    rax,QWORD PTR [rax]
  107237:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
  10723b:	7d 51                	jge    10728e <io::keyboard::keyboard_event_unsubscribe(void (*)(io::keyboard::keyboard_packet))+0x7d>
  10723d:	48 c7 c0 a0 01 11 00 	mov    rax,0x1101a0
  107244:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  107248:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
  10724c:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
  107250:	75 35                	jne    107287 <io::keyboard::keyboard_event_unsubscribe(void (*)(io::keyboard::keyboard_packet))+0x76>
  107252:	48 c7 c0 a0 01 11 00 	mov    rax,0x1101a0
  107259:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  10725d:	48 c7 04 d0 00 00 00 	mov    QWORD PTR [rax+rdx*8],0x0
  107264:	00 
  107265:	48 c7 c0 a0 09 11 00 	mov    rax,0x1109a0
  10726c:	48 8b 00             	mov    rax,QWORD PTR [rax]
  10726f:	48 8d 50 ff          	lea    rdx,[rax-0x1]
  107273:	48 c7 c0 a0 09 11 00 	mov    rax,0x1109a0
  10727a:	48 89 10             	mov    QWORD PTR [rax],rdx
  10727d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  107281:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  107285:	eb 07                	jmp    10728e <io::keyboard::keyboard_event_unsubscribe(void (*)(io::keyboard::keyboard_packet))+0x7d>
  107287:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
  10728c:	eb 9f                	jmp    10722d <io::keyboard::keyboard_event_unsubscribe(void (*)(io::keyboard::keyboard_packet))+0x1c>
  10728e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  107292:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  107296:	48 83 7d e8 3f       	cmp    QWORD PTR [rbp-0x18],0x3f
  10729b:	7f 29                	jg     1072c6 <io::keyboard::keyboard_event_unsubscribe(void (*)(io::keyboard::keyboard_packet))+0xb5>
  10729d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  1072a1:	48 8d 50 01          	lea    rdx,[rax+0x1]
  1072a5:	48 c7 c0 a0 01 11 00 	mov    rax,0x1101a0
  1072ac:	48 8b 0c d0          	mov    rcx,QWORD PTR [rax+rdx*8]
  1072b0:	48 c7 c0 a0 01 11 00 	mov    rax,0x1101a0
  1072b7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  1072bb:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
  1072bf:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
  1072c4:	eb d0                	jmp    107296 <io::keyboard::keyboard_event_unsubscribe(void (*)(io::keyboard::keyboard_packet))+0x85>
  1072c6:	90                   	nop
  1072c7:	c9                   	leave  
  1072c8:	c3                   	ret    

00000000001072c9 <kbd_irq_handler>:
  1072c9:	55                   	push   rbp
  1072ca:	48 89 e5             	mov    rbp,rsp
  1072cd:	48 83 ec 10          	sub    rsp,0x10
  1072d1:	bf 60 00 00 00       	mov    edi,0x60
  1072d6:	e8 93 fe ff ff       	call   10716e <io::inb(unsigned short)>
  1072db:	0f b6 c0             	movzx  eax,al
  1072de:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
  1072e2:	66 81 7d fe e0 00    	cmp    WORD PTR [rbp-0x2],0xe0
  1072e8:	75 16                	jne    107300 <kbd_irq_handler+0x37>
  1072ea:	66 c1 65 fe 08       	shl    WORD PTR [rbp-0x2],0x8
  1072ef:	bf 60 00 00 00       	mov    edi,0x60
  1072f4:	e8 75 fe ff ff       	call   10716e <io::inb(unsigned short)>
  1072f9:	0f b6 c0             	movzx  eax,al
  1072fc:	66 09 45 fe          	or     WORD PTR [rbp-0x2],ax
  107300:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  107304:	66 c1 e8 08          	shr    ax,0x8
  107308:	66 3d e0 00          	cmp    ax,0xe0
  10730c:	75 3b                	jne    107349 <kbd_irq_handler+0x80>
  10730e:	66 81 65 fe ff 00    	and    WORD PTR [rbp-0x2],0xff
  107314:	66 83 6d fe 10       	sub    WORD PTR [rbp-0x2],0x10
  107319:	66 83 7d fe 7f       	cmp    WORD PTR [rbp-0x2],0x7f
  10731e:	77 0c                	ja     10732c <kbd_irq_handler+0x63>
  107320:	0f b6 45 fd          	movzx  eax,BYTE PTR [rbp-0x3]
  107324:	83 c8 01             	or     eax,0x1
  107327:	88 45 fd             	mov    BYTE PTR [rbp-0x3],al
  10732a:	eb 0f                	jmp    10733b <kbd_irq_handler+0x72>
  10732c:	0f b6 45 fd          	movzx  eax,BYTE PTR [rbp-0x3]
  107330:	83 e0 fe             	and    eax,0xfffffffe
  107333:	88 45 fd             	mov    BYTE PTR [rbp-0x3],al
  107336:	66 83 45 fe 80       	add    WORD PTR [rbp-0x2],0xff80
  10733b:	66 83 6d fe 80       	sub    WORD PTR [rbp-0x2],0xff80
  107340:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  107344:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
  107347:	eb 2e                	jmp    107377 <kbd_irq_handler+0xae>
  107349:	66 83 7d fe 7f       	cmp    WORD PTR [rbp-0x2],0x7f
  10734e:	77 13                	ja     107363 <kbd_irq_handler+0x9a>
  107350:	0f b6 45 fd          	movzx  eax,BYTE PTR [rbp-0x3]
  107354:	83 c8 01             	or     eax,0x1
  107357:	88 45 fd             	mov    BYTE PTR [rbp-0x3],al
  10735a:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  10735e:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
  107361:	eb 14                	jmp    107377 <kbd_irq_handler+0xae>
  107363:	0f b6 45 fd          	movzx  eax,BYTE PTR [rbp-0x3]
  107367:	83 e0 fe             	and    eax,0xfffffffe
  10736a:	88 45 fd             	mov    BYTE PTR [rbp-0x3],al
  10736d:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  107371:	83 c0 80             	add    eax,0xffffff80
  107374:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
  107377:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
  10737b:	3c 1d                	cmp    al,0x1d
  10737d:	74 08                	je     107387 <kbd_irq_handler+0xbe>
  10737f:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
  107383:	3c 8d                	cmp    al,0x8d
  107385:	75 12                	jne    107399 <kbd_irq_handler+0xd0>
  107387:	0f b6 45 fd          	movzx  eax,BYTE PTR [rbp-0x3]
  10738b:	83 e0 01             	and    eax,0x1
  10738e:	89 c2                	mov    edx,eax
  107390:	48 c7 c0 a9 09 11 00 	mov    rax,0x1109a9
  107397:	88 10                	mov    BYTE PTR [rax],dl
  107399:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
  10739d:	3c 38                	cmp    al,0x38
  10739f:	74 08                	je     1073a9 <kbd_irq_handler+0xe0>
  1073a1:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
  1073a5:	3c a8                	cmp    al,0xa8
  1073a7:	75 12                	jne    1073bb <kbd_irq_handler+0xf2>
  1073a9:	0f b6 45 fd          	movzx  eax,BYTE PTR [rbp-0x3]
  1073ad:	83 e0 01             	and    eax,0x1
  1073b0:	89 c2                	mov    edx,eax
  1073b2:	48 c7 c0 aa 09 11 00 	mov    rax,0x1109aa
  1073b9:	88 10                	mov    BYTE PTR [rax],dl
  1073bb:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
  1073bf:	3c 2a                	cmp    al,0x2a
  1073c1:	74 08                	je     1073cb <kbd_irq_handler+0x102>
  1073c3:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
  1073c7:	3c 36                	cmp    al,0x36
  1073c9:	75 12                	jne    1073dd <kbd_irq_handler+0x114>
  1073cb:	0f b6 45 fd          	movzx  eax,BYTE PTR [rbp-0x3]
  1073cf:	83 e0 01             	and    eax,0x1
  1073d2:	89 c2                	mov    edx,eax
  1073d4:	48 c7 c0 a8 09 11 00 	mov    rax,0x1109a8
  1073db:	88 10                	mov    BYTE PTR [rax],dl
  1073dd:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
  1073e1:	3c 3a                	cmp    al,0x3a
  1073e3:	75 23                	jne    107408 <kbd_irq_handler+0x13f>
  1073e5:	0f b6 45 fd          	movzx  eax,BYTE PTR [rbp-0x3]
  1073e9:	83 e0 01             	and    eax,0x1
  1073ec:	84 c0                	test   al,al
  1073ee:	74 18                	je     107408 <kbd_irq_handler+0x13f>
  1073f0:	48 c7 c0 ac 09 11 00 	mov    rax,0x1109ac
  1073f7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  1073fa:	83 f0 01             	xor    eax,0x1
  1073fd:	89 c2                	mov    edx,eax
  1073ff:	48 c7 c0 ac 09 11 00 	mov    rax,0x1109ac
  107406:	88 10                	mov    BYTE PTR [rax],dl
  107408:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
  10740c:	3c 45                	cmp    al,0x45
  10740e:	75 23                	jne    107433 <kbd_irq_handler+0x16a>
  107410:	0f b6 45 fd          	movzx  eax,BYTE PTR [rbp-0x3]
  107414:	83 e0 01             	and    eax,0x1
  107417:	84 c0                	test   al,al
  107419:	74 18                	je     107433 <kbd_irq_handler+0x16a>
  10741b:	48 c7 c0 ae 09 11 00 	mov    rax,0x1109ae
  107422:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  107425:	83 f0 01             	xor    eax,0x1
  107428:	89 c2                	mov    edx,eax
  10742a:	48 c7 c0 ae 09 11 00 	mov    rax,0x1109ae
  107431:	88 10                	mov    BYTE PTR [rax],dl
  107433:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
  107437:	3c 46                	cmp    al,0x46
  107439:	75 23                	jne    10745e <kbd_irq_handler+0x195>
  10743b:	0f b6 45 fd          	movzx  eax,BYTE PTR [rbp-0x3]
  10743f:	83 e0 01             	and    eax,0x1
  107442:	84 c0                	test   al,al
  107444:	74 18                	je     10745e <kbd_irq_handler+0x195>
  107446:	48 c7 c0 ad 09 11 00 	mov    rax,0x1109ad
  10744d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  107450:	83 f0 01             	xor    eax,0x1
  107453:	89 c2                	mov    edx,eax
  107455:	48 c7 c0 ad 09 11 00 	mov    rax,0x1109ad
  10745c:	88 10                	mov    BYTE PTR [rax],dl
  10745e:	48 c7 c0 aa 09 11 00 	mov    rax,0x1109aa
  107465:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  107468:	83 e0 01             	and    eax,0x1
  10746b:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
  107472:	0f b6 45 fd          	movzx  eax,BYTE PTR [rbp-0x3]
  107476:	83 e0 f7             	and    eax,0xfffffff7
  107479:	09 d0                	or     eax,edx
  10747b:	88 45 fd             	mov    BYTE PTR [rbp-0x3],al
  10747e:	48 c7 c0 a9 09 11 00 	mov    rax,0x1109a9
  107485:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  107488:	83 e0 01             	and    eax,0x1
  10748b:	8d 14 85 00 00 00 00 	lea    edx,[rax*4+0x0]
  107492:	0f b6 45 fd          	movzx  eax,BYTE PTR [rbp-0x3]
  107496:	83 e0 fb             	and    eax,0xfffffffb
  107499:	09 d0                	or     eax,edx
  10749b:	88 45 fd             	mov    BYTE PTR [rbp-0x3],al
  10749e:	48 c7 c0 ab 09 11 00 	mov    rax,0x1109ab
  1074a5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  1074a8:	83 e0 01             	and    eax,0x1
  1074ab:	c1 e0 04             	shl    eax,0x4
  1074ae:	89 c2                	mov    edx,eax
  1074b0:	0f b6 45 fd          	movzx  eax,BYTE PTR [rbp-0x3]
  1074b4:	83 e0 ef             	and    eax,0xffffffef
  1074b7:	09 d0                	or     eax,edx
  1074b9:	88 45 fd             	mov    BYTE PTR [rbp-0x3],al
  1074bc:	48 c7 c0 a8 09 11 00 	mov    rax,0x1109a8
  1074c3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  1074c6:	83 e0 01             	and    eax,0x1
  1074c9:	8d 14 00             	lea    edx,[rax+rax*1]
  1074cc:	0f b6 45 fd          	movzx  eax,BYTE PTR [rbp-0x3]
  1074d0:	83 e0 fd             	and    eax,0xfffffffd
  1074d3:	09 d0                	or     eax,edx
  1074d5:	88 45 fd             	mov    BYTE PTR [rbp-0x3],al
  1074d8:	48 c7 c0 ac 09 11 00 	mov    rax,0x1109ac
  1074df:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  1074e2:	83 e0 01             	and    eax,0x1
  1074e5:	c1 e0 05             	shl    eax,0x5
  1074e8:	89 c2                	mov    edx,eax
  1074ea:	0f b6 45 fd          	movzx  eax,BYTE PTR [rbp-0x3]
  1074ee:	83 e0 df             	and    eax,0xffffffdf
  1074f1:	09 d0                	or     eax,edx
  1074f3:	88 45 fd             	mov    BYTE PTR [rbp-0x3],al
  1074f6:	48 c7 c0 ae 09 11 00 	mov    rax,0x1109ae
  1074fd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  107500:	c1 e0 07             	shl    eax,0x7
  107503:	89 c2                	mov    edx,eax
  107505:	0f b6 45 fd          	movzx  eax,BYTE PTR [rbp-0x3]
  107509:	83 e0 7f             	and    eax,0x7f
  10750c:	09 d0                	or     eax,edx
  10750e:	88 45 fd             	mov    BYTE PTR [rbp-0x3],al
  107511:	48 c7 c0 ad 09 11 00 	mov    rax,0x1109ad
  107518:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  10751b:	83 e0 01             	and    eax,0x1
  10751e:	c1 e0 06             	shl    eax,0x6
  107521:	89 c2                	mov    edx,eax
  107523:	0f b6 45 fd          	movzx  eax,BYTE PTR [rbp-0x3]
  107527:	83 e0 bf             	and    eax,0xffffffbf
  10752a:	09 d0                	or     eax,edx
  10752c:	88 45 fd             	mov    BYTE PTR [rbp-0x3],al
  10752f:	0f b7 45 fc          	movzx  eax,WORD PTR [rbp-0x4]
  107533:	89 c7                	mov    edi,eax
  107535:	e8 52 fc ff ff       	call   10718c <io::keyboard::keyboard_event_publisher(io::keyboard::keyboard_packet)>
  10753a:	90                   	nop
  10753b:	c9                   	leave  
  10753c:	c3                   	ret    

000000000010753d <io::keyboard::init()>:
  10753d:	55                   	push   rbp
  10753e:	48 89 e5             	mov    rbp,rsp
  107541:	48 c7 c0 ae 09 11 00 	mov    rax,0x1109ae
  107548:	c6 00 00             	mov    BYTE PTR [rax],0x0
  10754b:	48 c7 c0 ac 09 11 00 	mov    rax,0x1109ac
  107552:	c6 00 00             	mov    BYTE PTR [rax],0x0
  107555:	48 c7 c0 ad 09 11 00 	mov    rax,0x1109ad
  10755c:	c6 00 00             	mov    BYTE PTR [rax],0x0
  10755f:	48 c7 c0 aa 09 11 00 	mov    rax,0x1109aa
  107566:	c6 00 00             	mov    BYTE PTR [rax],0x0
  107569:	48 c7 c0 a9 09 11 00 	mov    rax,0x1109a9
  107570:	c6 00 00             	mov    BYTE PTR [rax],0x0
  107573:	48 c7 c0 ab 09 11 00 	mov    rax,0x1109ab
  10757a:	c6 00 00             	mov    BYTE PTR [rax],0x0
  10757d:	bf 01 00 00 00       	mov    edi,0x1
  107582:	e8 73 9c ff ff       	call   1011fa <irq_unmask>
  107587:	90                   	nop
  107588:	5d                   	pop    rbp
  107589:	c3                   	ret    

000000000010758a <io::outb(unsigned short, unsigned char)>:
  10758a:	55                   	push   rbp
  10758b:	48 89 e5             	mov    rbp,rsp
  10758e:	48 83 ec 08          	sub    rsp,0x8
  107592:	89 f8                	mov    eax,edi
  107594:	89 f2                	mov    edx,esi
  107596:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  10759a:	89 d0                	mov    eax,edx
  10759c:	88 45 f8             	mov    BYTE PTR [rbp-0x8],al
  10759f:	0f b6 45 f8          	movzx  eax,BYTE PTR [rbp-0x8]
  1075a3:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
  1075a7:	ee                   	out    dx,al
  1075a8:	90                   	nop
  1075a9:	c9                   	leave  
  1075aa:	c3                   	ret    

00000000001075ab <io::inb(unsigned short)>:
  1075ab:	55                   	push   rbp
  1075ac:	48 89 e5             	mov    rbp,rsp
  1075af:	48 83 ec 18          	sub    rsp,0x18
  1075b3:	89 f8                	mov    eax,edi
  1075b5:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
  1075b9:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
  1075bd:	89 c2                	mov    edx,eax
  1075bf:	ec                   	in     al,dx
  1075c0:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
  1075c3:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
  1075c7:	c9                   	leave  
  1075c8:	c3                   	ret    

00000000001075c9 <io::serial::serial_byte(unsigned char)>:
  1075c9:	55                   	push   rbp
  1075ca:	48 89 e5             	mov    rbp,rsp
  1075cd:	48 83 ec 08          	sub    rsp,0x8
  1075d1:	89 f8                	mov    eax,edi
  1075d3:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
  1075d6:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
  1075da:	89 c6                	mov    esi,eax
  1075dc:	bf f8 03 00 00       	mov    edi,0x3f8
  1075e1:	e8 a4 ff ff ff       	call   10758a <io::outb(unsigned short, unsigned char)>
  1075e6:	90                   	nop
  1075e7:	c9                   	leave  
  1075e8:	c3                   	ret    

00000000001075e9 <read_command()>:
  1075e9:	55                   	push   rbp
  1075ea:	48 89 e5             	mov    rbp,rsp
  1075ed:	48 8d 35 fc 3a 00 00 	lea    rsi,[rip+0x3afc]        # 10b0f0 <selector_entry+0x4a>
  1075f4:	48 c7 c0 c0 09 11 00 	mov    rax,0x1109c0
  1075fb:	48 89 c7             	mov    rdi,rax
  1075fe:	e8 63 f6 ff ff       	call   106c66 <util::strcomp(char const*, char const*)>
  107603:	84 c0                	test   al,al
  107605:	74 0c                	je     107613 <read_command()+0x2a>
  107607:	48 8d 3d f2 3a 00 00 	lea    rdi,[rip+0x3af2]        # 10b100 <selector_entry+0x5a>
  10760e:	e8 03 00 00 00       	call   107616 <serial_msg>
  107613:	90                   	nop
  107614:	5d                   	pop    rbp
  107615:	c3                   	ret    

0000000000107616 <serial_msg>:
  107616:	55                   	push   rbp
  107617:	48 89 e5             	mov    rbp,rsp
  10761a:	48 83 ec 20          	sub    rsp,0x20
  10761e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  107622:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  107629:	00 
  10762a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  10762e:	48 89 c7             	mov    rdi,rax
  107631:	e8 77 f6 ff ff       	call   106cad <util::strlen(char const*)>
  107636:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
  10763a:	0f 92 c0             	setb   al
  10763d:	84 c0                	test   al,al
  10763f:	74 1f                	je     107660 <serial_msg+0x4a>
  107641:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  107645:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  107649:	48 01 d0             	add    rax,rdx
  10764c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  10764f:	0f b6 c0             	movzx  eax,al
  107652:	89 c7                	mov    edi,eax
  107654:	e8 70 ff ff ff       	call   1075c9 <io::serial::serial_byte(unsigned char)>
  107659:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
  10765e:	eb ca                	jmp    10762a <serial_msg+0x14>
  107660:	90                   	nop
  107661:	c9                   	leave  
  107662:	c3                   	ret    

0000000000107663 <prompt()>:
  107663:	55                   	push   rbp
  107664:	48 89 e5             	mov    rbp,rsp
  107667:	48 8d 3d ba 3a 00 00 	lea    rdi,[rip+0x3aba]        # 10b128 <selector_entry+0x82>
  10766e:	e8 a3 ff ff ff       	call   107616 <serial_msg>
  107673:	90                   	nop
  107674:	5d                   	pop    rbp
  107675:	c3                   	ret    

0000000000107676 <clear_buffer()>:
  107676:	55                   	push   rbp
  107677:	48 89 e5             	mov    rbp,rsp
  10767a:	48 83 ec 10          	sub    rsp,0x10
  10767e:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  107685:	00 
  107686:	48 81 7d f8 ff 01 00 	cmp    QWORD PTR [rbp-0x8],0x1ff
  10768d:	00 
  10768e:	7f 18                	jg     1076a8 <clear_buffer()+0x32>
  107690:	48 c7 c2 c0 09 11 00 	mov    rdx,0x1109c0
  107697:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  10769b:	48 01 d0             	add    rax,rdx
  10769e:	c6 00 00             	mov    BYTE PTR [rax],0x0
  1076a1:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
  1076a6:	eb de                	jmp    107686 <clear_buffer()+0x10>
  1076a8:	90                   	nop
  1076a9:	c9                   	leave  
  1076aa:	c3                   	ret    

00000000001076ab <io::serial::console::init()>:
  1076ab:	55                   	push   rbp
  1076ac:	48 89 e5             	mov    rbp,rsp
  1076af:	be 01 00 00 00       	mov    esi,0x1
  1076b4:	bf f9 03 00 00       	mov    edi,0x3f9
  1076b9:	e8 cc fe ff ff       	call   10758a <io::outb(unsigned short, unsigned char)>
  1076be:	bf 04 00 00 00       	mov    edi,0x4
  1076c3:	e8 32 9b ff ff       	call   1011fa <irq_unmask>
  1076c8:	e8 a9 ff ff ff       	call   107676 <clear_buffer()>
  1076cd:	e8 91 ff ff ff       	call   107663 <prompt()>
  1076d2:	90                   	nop
  1076d3:	5d                   	pop    rbp
  1076d4:	c3                   	ret    

00000000001076d5 <io::serial::console::read_character()>:
  1076d5:	55                   	push   rbp
  1076d6:	48 89 e5             	mov    rbp,rsp
  1076d9:	bf f8 03 00 00       	mov    edi,0x3f8
  1076de:	e8 c8 fe ff ff       	call   1075ab <io::inb(unsigned short)>
  1076e3:	89 c2                	mov    edx,eax
  1076e5:	48 c7 c0 c0 0b 11 00 	mov    rax,0x110bc0
  1076ec:	48 8b 00             	mov    rax,QWORD PTR [rax]
  1076ef:	89 d1                	mov    ecx,edx
  1076f1:	48 c7 c2 c0 09 11 00 	mov    rdx,0x1109c0
  1076f8:	88 0c 02             	mov    BYTE PTR [rdx+rax*1],cl
  1076fb:	48 c7 c0 c0 0b 11 00 	mov    rax,0x110bc0
  107702:	48 8b 00             	mov    rax,QWORD PTR [rax]
  107705:	48 c7 c2 c0 09 11 00 	mov    rdx,0x1109c0
  10770c:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
  107710:	3c 0a                	cmp    al,0xa
  107712:	75 5f                	jne    107773 <io::serial::console::read_character()+0x9e>
  107714:	48 c7 c0 c0 0b 11 00 	mov    rax,0x110bc0
  10771b:	48 8b 00             	mov    rax,QWORD PTR [rax]
  10771e:	48 c7 c2 c0 09 11 00 	mov    rdx,0x1109c0
  107725:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
  107729:	48 8d 3d 0a 3a 00 00 	lea    rdi,[rip+0x3a0a]        # 10b13a <selector_entry+0x94>
  107730:	e8 e1 fe ff ff       	call   107616 <serial_msg>
  107735:	e8 af fe ff ff       	call   1075e9 <read_command()>
  10773a:	e8 37 ff ff ff       	call   107676 <clear_buffer()>
  10773f:	48 c7 c0 c0 0b 11 00 	mov    rax,0x110bc0
  107746:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
  10774d:	e8 11 ff ff ff       	call   107663 <prompt()>
  107752:	48 c7 c0 c0 0b 11 00 	mov    rax,0x110bc0
  107759:	48 8b 00             	mov    rax,QWORD PTR [rax]
  10775c:	48 c7 c2 c0 09 11 00 	mov    rdx,0x1109c0
  107763:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
  107767:	0f b6 c0             	movzx  eax,al
  10776a:	89 c7                	mov    edi,eax
  10776c:	e8 58 fe ff ff       	call   1075c9 <io::serial::serial_byte(unsigned char)>
  107771:	eb 37                	jmp    1077aa <io::serial::console::read_character()+0xd5>
  107773:	48 c7 c0 c0 0b 11 00 	mov    rax,0x110bc0
  10777a:	48 8b 00             	mov    rax,QWORD PTR [rax]
  10777d:	48 c7 c2 c0 09 11 00 	mov    rdx,0x1109c0
  107784:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
  107788:	0f b6 c0             	movzx  eax,al
  10778b:	89 c7                	mov    edi,eax
  10778d:	e8 37 fe ff ff       	call   1075c9 <io::serial::serial_byte(unsigned char)>
  107792:	48 c7 c0 c0 0b 11 00 	mov    rax,0x110bc0
  107799:	48 8b 00             	mov    rax,QWORD PTR [rax]
  10779c:	48 8d 50 01          	lea    rdx,[rax+0x1]
  1077a0:	48 c7 c0 c0 0b 11 00 	mov    rax,0x110bc0
  1077a7:	48 89 10             	mov    QWORD PTR [rax],rdx
  1077aa:	90                   	nop
  1077ab:	5d                   	pop    rbp
  1077ac:	c3                   	ret    

00000000001077ad <gfx::screen::plot_pixel(gfx::shapes::s_pos_point, unsigned int)>:
  1077ad:	55                   	push   rbp
  1077ae:	48 89 e5             	mov    rbp,rsp
  1077b1:	48 83 ec 10          	sub    rsp,0x10
  1077b5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  1077b9:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
  1077bc:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  1077c3:	0f b7 40 0a          	movzx  eax,WORD PTR [rax+0xa]
  1077c7:	0f b7 d0             	movzx  edx,ax
  1077ca:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  1077cd:	0f af d0             	imul   edx,eax
  1077d0:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  1077d3:	01 d0                	add    eax,edx
  1077d5:	89 c0                	mov    eax,eax
  1077d7:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
  1077de:	00 
  1077df:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  1077e6:	48 8b 00             	mov    rax,QWORD PTR [rax]
  1077e9:	48 01 d0             	add    rax,rdx
  1077ec:	48 89 c2             	mov    rdx,rax
  1077ef:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  1077f2:	89 02                	mov    DWORD PTR [rdx],eax
  1077f4:	90                   	nop
  1077f5:	c9                   	leave  
  1077f6:	c3                   	ret    

00000000001077f7 <kernel_main>:
  1077f7:	55                   	push   rbp
  1077f8:	48 89 e5             	mov    rbp,rsp
  1077fb:	41 54                	push   r12
  1077fd:	53                   	push   rbx
  1077fe:	48 83 ec 30          	sub    rsp,0x30
  107802:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  107806:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  10780a:	e8 e4 d0 ff ff       	call   1048f3 <sys::config::calculate_kernel_size()>
  10780f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  107813:	48 8d 50 08          	lea    rdx,[rax+0x8]
  107817:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  10781b:	48 83 c0 18          	add    rax,0x18
  10781f:	48 89 d6             	mov    rsi,rdx
  107822:	48 89 c7             	mov    rdi,rax
  107825:	e8 9b cf ff ff       	call   1047c5 <sys::config::configure_memory(stivale_framebuffer*, stivale_memory_map*)>
  10782a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  10782e:	48 89 c6             	mov    rsi,rax
  107831:	bf 00 00 00 00       	mov    edi,0x0
  107836:	e8 ef da ff ff       	call   10532a <tss_install>
  10783b:	e8 dd d4 ff ff       	call   104d1d <load_idt>
  107840:	fb                   	sti    
  107841:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  107845:	48 83 c0 18          	add    rax,0x18
  107849:	48 89 c7             	mov    rdi,rax
  10784c:	e8 1c d0 ff ff       	call   10486d <sys::config::configure_graphics(stivale_framebuffer*)>
  107851:	bf e8 03 00 00       	mov    edi,0x3e8
  107856:	e8 cd 05 00 00       	call   107e28 <io::pit::set_c0_frequency(unsigned int)>
  10785b:	e8 b7 05 00 00       	call   107e17 <io::pit::pit_init()>
  107860:	e8 ed a8 ff ff       	call   102152 <terminal::instance()>
  107865:	48 89 c3             	mov    rbx,rax
  107868:	e8 e5 a8 ff ff       	call   102152 <terminal::instance()>
  10786d:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  107871:	48 83 e8 06          	sub    rax,0x6
  107875:	48 89 c2             	mov    rdx,rax
  107878:	be 0b 00 00 00       	mov    esi,0xb
  10787d:	48 89 df             	mov    rdi,rbx
  107880:	e8 91 a7 ff ff       	call   102016 <terminal::setCursor(unsigned long, unsigned long)>
  107885:	e8 c8 a8 ff ff       	call   102152 <terminal::instance()>
  10788a:	48 8d 35 af 38 00 00 	lea    rsi,[rip+0x38af]        # 10b140 <selector_entry+0x9a>
  107891:	48 89 c7             	mov    rdi,rax
  107894:	e8 2d a5 ff ff       	call   101dc6 <terminal::write(char const*)>
  107899:	e8 b4 a8 ff ff       	call   102152 <terminal::instance()>
  10789e:	49 89 c4             	mov    r12,rax
  1078a1:	e8 ac a8 ff ff       	call   102152 <terminal::instance()>
  1078a6:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  1078aa:	48 8d 58 fa          	lea    rbx,[rax-0x6]
  1078ae:	e8 9f a8 ff ff       	call   102152 <terminal::instance()>
  1078b3:	48 8b 00             	mov    rax,QWORD PTR [rax]
  1078b6:	48 83 e8 18          	sub    rax,0x18
  1078ba:	48 89 da             	mov    rdx,rbx
  1078bd:	48 89 c6             	mov    rsi,rax
  1078c0:	4c 89 e7             	mov    rdi,r12
  1078c3:	e8 4e a7 ff ff       	call   102016 <terminal::setCursor(unsigned long, unsigned long)>
  1078c8:	e8 85 a8 ff ff       	call   102152 <terminal::instance()>
  1078cd:	48 8d 35 82 38 00 00 	lea    rsi,[rip+0x3882]        # 10b156 <selector_entry+0xb0>
  1078d4:	48 89 c7             	mov    rdi,rax
  1078d7:	e8 ea a4 ff ff       	call   101dc6 <terminal::write(char const*)>
  1078dc:	48 c7 45 e0 cc aa 88 	mov    QWORD PTR [rbp-0x20],0x88aacc
  1078e3:	00 
  1078e4:	48 c7 45 e8 37 00 00 	mov    QWORD PTR [rbp-0x18],0x37
  1078eb:	00 
  1078ec:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  1078f3:	0f b7 40 0a          	movzx  eax,WORD PTR [rax+0xa]
  1078f7:	0f b7 c0             	movzx  eax,ax
  1078fa:	48 83 e8 37          	sub    rax,0x37
  1078fe:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
  107902:	0f 83 14 03 00 00    	jae    107c1c <kernel_main+0x425>
  107908:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  10790c:	89 c3                	mov    ebx,eax
  10790e:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  107915:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  107919:	0f b7 c0             	movzx  eax,ax
  10791c:	83 e8 1c             	sub    eax,0x1c
  10791f:	89 c2                	mov    edx,eax
  107921:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  107925:	89 d6                	mov    esi,edx
  107927:	89 c7                	mov    edi,eax
  107929:	e8 41 a9 ff ff       	call   10226f <gfx::shapes::pos(unsigned int, unsigned int)>
  10792e:	89 de                	mov    esi,ebx
  107930:	48 89 c7             	mov    rdi,rax
  107933:	e8 75 fe ff ff       	call   1077ad <gfx::screen::plot_pixel(gfx::shapes::s_pos_point, unsigned int)>
  107938:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  10793c:	89 c3                	mov    ebx,eax
  10793e:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  107945:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  107949:	0f b7 c0             	movzx  eax,ax
  10794c:	83 e8 1d             	sub    eax,0x1d
  10794f:	89 c2                	mov    edx,eax
  107951:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  107955:	89 d6                	mov    esi,edx
  107957:	89 c7                	mov    edi,eax
  107959:	e8 11 a9 ff ff       	call   10226f <gfx::shapes::pos(unsigned int, unsigned int)>
  10795e:	89 de                	mov    esi,ebx
  107960:	48 89 c7             	mov    rdi,rax
  107963:	e8 45 fe ff ff       	call   1077ad <gfx::screen::plot_pixel(gfx::shapes::s_pos_point, unsigned int)>
  107968:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  10796c:	89 c3                	mov    ebx,eax
  10796e:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  107975:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  107979:	0f b7 c0             	movzx  eax,ax
  10797c:	83 e8 1e             	sub    eax,0x1e
  10797f:	89 c2                	mov    edx,eax
  107981:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  107985:	89 d6                	mov    esi,edx
  107987:	89 c7                	mov    edi,eax
  107989:	e8 e1 a8 ff ff       	call   10226f <gfx::shapes::pos(unsigned int, unsigned int)>
  10798e:	89 de                	mov    esi,ebx
  107990:	48 89 c7             	mov    rdi,rax
  107993:	e8 15 fe ff ff       	call   1077ad <gfx::screen::plot_pixel(gfx::shapes::s_pos_point, unsigned int)>
  107998:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  10799c:	89 c3                	mov    ebx,eax
  10799e:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  1079a5:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  1079a9:	0f b7 c0             	movzx  eax,ax
  1079ac:	83 e8 1f             	sub    eax,0x1f
  1079af:	89 c2                	mov    edx,eax
  1079b1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  1079b5:	89 d6                	mov    esi,edx
  1079b7:	89 c7                	mov    edi,eax
  1079b9:	e8 b1 a8 ff ff       	call   10226f <gfx::shapes::pos(unsigned int, unsigned int)>
  1079be:	89 de                	mov    esi,ebx
  1079c0:	48 89 c7             	mov    rdi,rax
  1079c3:	e8 e5 fd ff ff       	call   1077ad <gfx::screen::plot_pixel(gfx::shapes::s_pos_point, unsigned int)>
  1079c8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  1079cc:	89 c3                	mov    ebx,eax
  1079ce:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  1079d5:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  1079d9:	0f b7 c0             	movzx  eax,ax
  1079dc:	83 e8 20             	sub    eax,0x20
  1079df:	89 c2                	mov    edx,eax
  1079e1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  1079e5:	89 d6                	mov    esi,edx
  1079e7:	89 c7                	mov    edi,eax
  1079e9:	e8 81 a8 ff ff       	call   10226f <gfx::shapes::pos(unsigned int, unsigned int)>
  1079ee:	89 de                	mov    esi,ebx
  1079f0:	48 89 c7             	mov    rdi,rax
  1079f3:	e8 b5 fd ff ff       	call   1077ad <gfx::screen::plot_pixel(gfx::shapes::s_pos_point, unsigned int)>
  1079f8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  1079fc:	89 c3                	mov    ebx,eax
  1079fe:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  107a05:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  107a09:	0f b7 c0             	movzx  eax,ax
  107a0c:	83 e8 21             	sub    eax,0x21
  107a0f:	89 c2                	mov    edx,eax
  107a11:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  107a15:	89 d6                	mov    esi,edx
  107a17:	89 c7                	mov    edi,eax
  107a19:	e8 51 a8 ff ff       	call   10226f <gfx::shapes::pos(unsigned int, unsigned int)>
  107a1e:	89 de                	mov    esi,ebx
  107a20:	48 89 c7             	mov    rdi,rax
  107a23:	e8 85 fd ff ff       	call   1077ad <gfx::screen::plot_pixel(gfx::shapes::s_pos_point, unsigned int)>
  107a28:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  107a2c:	89 c3                	mov    ebx,eax
  107a2e:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  107a35:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  107a39:	0f b7 c0             	movzx  eax,ax
  107a3c:	83 e8 22             	sub    eax,0x22
  107a3f:	89 c2                	mov    edx,eax
  107a41:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  107a45:	89 d6                	mov    esi,edx
  107a47:	89 c7                	mov    edi,eax
  107a49:	e8 21 a8 ff ff       	call   10226f <gfx::shapes::pos(unsigned int, unsigned int)>
  107a4e:	89 de                	mov    esi,ebx
  107a50:	48 89 c7             	mov    rdi,rax
  107a53:	e8 55 fd ff ff       	call   1077ad <gfx::screen::plot_pixel(gfx::shapes::s_pos_point, unsigned int)>
  107a58:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  107a5c:	89 c3                	mov    ebx,eax
  107a5e:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  107a65:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  107a69:	0f b7 c0             	movzx  eax,ax
  107a6c:	83 e8 23             	sub    eax,0x23
  107a6f:	89 c2                	mov    edx,eax
  107a71:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  107a75:	89 d6                	mov    esi,edx
  107a77:	89 c7                	mov    edi,eax
  107a79:	e8 f1 a7 ff ff       	call   10226f <gfx::shapes::pos(unsigned int, unsigned int)>
  107a7e:	89 de                	mov    esi,ebx
  107a80:	48 89 c7             	mov    rdi,rax
  107a83:	e8 25 fd ff ff       	call   1077ad <gfx::screen::plot_pixel(gfx::shapes::s_pos_point, unsigned int)>
  107a88:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  107a8c:	89 c3                	mov    ebx,eax
  107a8e:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  107a95:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  107a99:	0f b7 c0             	movzx  eax,ax
  107a9c:	83 e8 24             	sub    eax,0x24
  107a9f:	89 c2                	mov    edx,eax
  107aa1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  107aa5:	89 d6                	mov    esi,edx
  107aa7:	89 c7                	mov    edi,eax
  107aa9:	e8 c1 a7 ff ff       	call   10226f <gfx::shapes::pos(unsigned int, unsigned int)>
  107aae:	89 de                	mov    esi,ebx
  107ab0:	48 89 c7             	mov    rdi,rax
  107ab3:	e8 f5 fc ff ff       	call   1077ad <gfx::screen::plot_pixel(gfx::shapes::s_pos_point, unsigned int)>
  107ab8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  107abc:	89 c3                	mov    ebx,eax
  107abe:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  107ac5:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  107ac9:	0f b7 c0             	movzx  eax,ax
  107acc:	83 e8 25             	sub    eax,0x25
  107acf:	89 c2                	mov    edx,eax
  107ad1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  107ad5:	89 d6                	mov    esi,edx
  107ad7:	89 c7                	mov    edi,eax
  107ad9:	e8 91 a7 ff ff       	call   10226f <gfx::shapes::pos(unsigned int, unsigned int)>
  107ade:	89 de                	mov    esi,ebx
  107ae0:	48 89 c7             	mov    rdi,rax
  107ae3:	e8 c5 fc ff ff       	call   1077ad <gfx::screen::plot_pixel(gfx::shapes::s_pos_point, unsigned int)>
  107ae8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  107aec:	89 c3                	mov    ebx,eax
  107aee:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  107af5:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  107af9:	0f b7 c0             	movzx  eax,ax
  107afc:	83 e8 26             	sub    eax,0x26
  107aff:	89 c2                	mov    edx,eax
  107b01:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  107b05:	89 d6                	mov    esi,edx
  107b07:	89 c7                	mov    edi,eax
  107b09:	e8 61 a7 ff ff       	call   10226f <gfx::shapes::pos(unsigned int, unsigned int)>
  107b0e:	89 de                	mov    esi,ebx
  107b10:	48 89 c7             	mov    rdi,rax
  107b13:	e8 95 fc ff ff       	call   1077ad <gfx::screen::plot_pixel(gfx::shapes::s_pos_point, unsigned int)>
  107b18:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  107b1c:	89 c3                	mov    ebx,eax
  107b1e:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  107b25:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  107b29:	0f b7 c0             	movzx  eax,ax
  107b2c:	83 e8 27             	sub    eax,0x27
  107b2f:	89 c2                	mov    edx,eax
  107b31:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  107b35:	89 d6                	mov    esi,edx
  107b37:	89 c7                	mov    edi,eax
  107b39:	e8 31 a7 ff ff       	call   10226f <gfx::shapes::pos(unsigned int, unsigned int)>
  107b3e:	89 de                	mov    esi,ebx
  107b40:	48 89 c7             	mov    rdi,rax
  107b43:	e8 65 fc ff ff       	call   1077ad <gfx::screen::plot_pixel(gfx::shapes::s_pos_point, unsigned int)>
  107b48:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  107b4c:	89 c3                	mov    ebx,eax
  107b4e:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  107b55:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  107b59:	0f b7 c0             	movzx  eax,ax
  107b5c:	83 e8 28             	sub    eax,0x28
  107b5f:	89 c2                	mov    edx,eax
  107b61:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  107b65:	89 d6                	mov    esi,edx
  107b67:	89 c7                	mov    edi,eax
  107b69:	e8 01 a7 ff ff       	call   10226f <gfx::shapes::pos(unsigned int, unsigned int)>
  107b6e:	89 de                	mov    esi,ebx
  107b70:	48 89 c7             	mov    rdi,rax
  107b73:	e8 35 fc ff ff       	call   1077ad <gfx::screen::plot_pixel(gfx::shapes::s_pos_point, unsigned int)>
  107b78:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  107b7c:	89 c3                	mov    ebx,eax
  107b7e:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  107b85:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  107b89:	0f b7 c0             	movzx  eax,ax
  107b8c:	83 e8 29             	sub    eax,0x29
  107b8f:	89 c2                	mov    edx,eax
  107b91:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  107b95:	89 d6                	mov    esi,edx
  107b97:	89 c7                	mov    edi,eax
  107b99:	e8 d1 a6 ff ff       	call   10226f <gfx::shapes::pos(unsigned int, unsigned int)>
  107b9e:	89 de                	mov    esi,ebx
  107ba0:	48 89 c7             	mov    rdi,rax
  107ba3:	e8 05 fc ff ff       	call   1077ad <gfx::screen::plot_pixel(gfx::shapes::s_pos_point, unsigned int)>
  107ba8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  107bac:	89 c3                	mov    ebx,eax
  107bae:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  107bb5:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  107bb9:	0f b7 c0             	movzx  eax,ax
  107bbc:	83 e8 2a             	sub    eax,0x2a
  107bbf:	89 c2                	mov    edx,eax
  107bc1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  107bc5:	89 d6                	mov    esi,edx
  107bc7:	89 c7                	mov    edi,eax
  107bc9:	e8 a1 a6 ff ff       	call   10226f <gfx::shapes::pos(unsigned int, unsigned int)>
  107bce:	89 de                	mov    esi,ebx
  107bd0:	48 89 c7             	mov    rdi,rax
  107bd3:	e8 d5 fb ff ff       	call   1077ad <gfx::screen::plot_pixel(gfx::shapes::s_pos_point, unsigned int)>
  107bd8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  107bdc:	89 c3                	mov    ebx,eax
  107bde:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  107be5:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  107be9:	0f b7 c0             	movzx  eax,ax
  107bec:	83 e8 2b             	sub    eax,0x2b
  107bef:	89 c2                	mov    edx,eax
  107bf1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  107bf5:	89 d6                	mov    esi,edx
  107bf7:	89 c7                	mov    edi,eax
  107bf9:	e8 71 a6 ff ff       	call   10226f <gfx::shapes::pos(unsigned int, unsigned int)>
  107bfe:	89 de                	mov    esi,ebx
  107c00:	48 89 c7             	mov    rdi,rax
  107c03:	e8 a5 fb ff ff       	call   1077ad <gfx::screen::plot_pixel(gfx::shapes::s_pos_point, unsigned int)>
  107c08:	bf 01 00 00 00       	mov    edi,0x1
  107c0d:	e8 ae 07 00 00       	call   1083c0 <sleep>
  107c12:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
  107c17:	e9 d0 fc ff ff       	jmp    1078ec <kernel_main+0xf5>
  107c1c:	e8 f4 a9 ff ff       	call   102615 <sys::audio::pcspk::init()>
  107c21:	bf 64 00 00 00       	mov    edi,0x64
  107c26:	e8 95 07 00 00       	call   1083c0 <sleep>
  107c2b:	be 64 00 00 00       	mov    esi,0x64
  107c30:	bf 84 03 00 00       	mov    edi,0x384
  107c35:	e8 9a aa ff ff       	call   1026d4 <sys::audio::pcspk::beep(unsigned int, unsigned int)>
  107c3a:	bf 14 00 00 00       	mov    edi,0x14
  107c3f:	e8 7c 07 00 00       	call   1083c0 <sleep>
  107c44:	be 64 00 00 00       	mov    esi,0x64
  107c49:	bf 64 00 00 00       	mov    edi,0x64
  107c4e:	e8 81 aa ff ff       	call   1026d4 <sys::audio::pcspk::beep(unsigned int, unsigned int)>
  107c53:	e8 fa a4 ff ff       	call   102152 <terminal::instance()>
  107c58:	48 89 c3             	mov    rbx,rax
  107c5b:	e8 f2 a4 ff ff       	call   102152 <terminal::instance()>
  107c60:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  107c64:	48 83 e8 09          	sub    rax,0x9
  107c68:	48 89 c2             	mov    rdx,rax
  107c6b:	be 00 00 00 00       	mov    esi,0x0
  107c70:	48 89 df             	mov    rdi,rbx
  107c73:	e8 9e a3 ff ff       	call   102016 <terminal::setCursor(unsigned long, unsigned long)>
  107c78:	e8 d5 a4 ff ff       	call   102152 <terminal::instance()>
  107c7d:	48 8d 35 ec 34 00 00 	lea    rsi,[rip+0x34ec]        # 10b170 <selector_entry+0xca>
  107c84:	48 89 c7             	mov    rdi,rax
  107c87:	e8 3a a1 ff ff       	call   101dc6 <terminal::write(char const*)>
  107c8c:	e8 c1 a4 ff ff       	call   102152 <terminal::instance()>
  107c91:	ba 00 00 00 00       	mov    edx,0x0
  107c96:	be 00 00 00 00       	mov    esi,0x0
  107c9b:	48 89 c7             	mov    rdi,rax
  107c9e:	e8 73 a3 ff ff       	call   102016 <terminal::setCursor(unsigned long, unsigned long)>
  107ca3:	e8 6d a9 ff ff       	call   102615 <sys::audio::pcspk::init()>
  107ca8:	e8 fd a9 ff ff       	call   1026aa <sys::audio::pcspk::beep()>
  107cad:	e8 8b f8 ff ff       	call   10753d <io::keyboard::init()>
  107cb2:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  107cb9:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  107cbd:	0f b7 d0             	movzx  edx,ax
  107cc0:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  107cc7:	0f b7 40 0a          	movzx  eax,WORD PTR [rax+0xa]
  107ccb:	0f b7 c0             	movzx  eax,ax
  107cce:	89 c6                	mov    esi,eax
  107cd0:	48 8d 3d a9 34 00 00 	lea    rdi,[rip+0x34a9]        # 10b180 <selector_entry+0xda>
  107cd7:	b8 00 00 00 00       	mov    eax,0x0
  107cdc:	e8 15 c9 ff ff       	call   1045f6 <printf>
  107ce1:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  107ce8:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  107cec:	0f b7 d0             	movzx  edx,ax
  107cef:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  107cf6:	0f b7 40 0a          	movzx  eax,WORD PTR [rax+0xa]
  107cfa:	0f b7 c0             	movzx  eax,ax
  107cfd:	0f af d0             	imul   edx,eax
  107d00:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  107d07:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
  107d0b:	66 c1 e8 03          	shr    ax,0x3
  107d0f:	0f b7 c0             	movzx  eax,ax
  107d12:	0f af c2             	imul   eax,edx
  107d15:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
  107d1b:	85 c0                	test   eax,eax
  107d1d:	0f 48 c2             	cmovs  eax,edx
  107d20:	c1 f8 0c             	sar    eax,0xc
  107d23:	8d 50 01             	lea    edx,[rax+0x1]
  107d26:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  107d2d:	48 8b 00             	mov    rax,QWORD PTR [rax]
  107d30:	48 89 c6             	mov    rsi,rax
  107d33:	48 8d 3d 6e 34 00 00 	lea    rdi,[rip+0x346e]        # 10b1a8 <selector_entry+0x102>
  107d3a:	b8 00 00 00 00       	mov    eax,0x0
  107d3f:	e8 b2 c8 ff ff       	call   1045f6 <printf>
  107d44:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  107d4b:	0f b7 40 0c          	movzx  eax,WORD PTR [rax+0xc]
  107d4f:	0f b7 d0             	movzx  edx,ax
  107d52:	48 c7 c0 90 e0 10 00 	mov    rax,0x10e090
  107d59:	0f b7 40 0a          	movzx  eax,WORD PTR [rax+0xa]
  107d5d:	0f b7 c0             	movzx  eax,ax
  107d60:	89 d6                	mov    esi,edx
  107d62:	89 c7                	mov    edi,eax
  107d64:	e8 26 a5 ff ff       	call   10228f <gfx::shapes::dims(unsigned int, unsigned int)>
  107d69:	48 89 c7             	mov    rdi,rax
  107d6c:	e8 13 a4 ff ff       	call   102184 <terminal::get_optimal_size(gfx::shapes::s_dimensions)>
  107d71:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  107d75:	48 c7 c0 00 e0 10 00 	mov    rax,0x10e000
  107d7c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  107d7f:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  107d82:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  107d85:	89 c6                	mov    esi,eax
  107d87:	48 8d 3d 3e 34 00 00 	lea    rdi,[rip+0x343e]        # 10b1cc <selector_entry+0x126>
  107d8e:	b8 00 00 00 00       	mov    eax,0x0
  107d93:	e8 5e c8 ff ff       	call   1045f6 <printf>
  107d98:	48 c7 c0 a8 e0 10 00 	mov    rax,0x10e0a8
  107d9f:	48 8b 00             	mov    rax,QWORD PTR [rax]
  107da2:	48 89 c2             	mov    rdx,rax
  107da5:	48 c7 c0 00 00 10 00 	mov    rax,0x100000
  107dac:	48 89 c6             	mov    rsi,rax
  107daf:	48 8d 3d 32 34 00 00 	lea    rdi,[rip+0x3432]        # 10b1e8 <selector_entry+0x142>
  107db6:	b8 00 00 00 00       	mov    eax,0x0
  107dbb:	e8 36 c8 ff ff       	call   1045f6 <printf>
  107dc0:	48 c7 c0 90 00 11 00 	mov    rax,0x110090
  107dc7:	48 8b 00             	mov    rax,QWORD PTR [rax]
  107dca:	48 c1 e8 14          	shr    rax,0x14
  107dce:	48 89 c6             	mov    rsi,rax
  107dd1:	48 8d 3d 2f 34 00 00 	lea    rdi,[rip+0x342f]        # 10b207 <selector_entry+0x161>
  107dd8:	b8 00 00 00 00       	mov    eax,0x0
  107ddd:	e8 14 c8 ff ff       	call   1045f6 <printf>
  107de2:	e8 c2 f0 ff ff       	call   106ea9 <sys::tui::start()>
  107de7:	e8 48 cb ff ff       	call   104934 <sys::config::configure_userspace()>
  107dec:	90                   	nop
  107ded:	48 83 c4 30          	add    rsp,0x30
  107df1:	5b                   	pop    rbx
  107df2:	41 5c                	pop    r12
  107df4:	5d                   	pop    rbp
  107df5:	c3                   	ret    

0000000000107df6 <io::outb(unsigned short, unsigned char)>:
  107df6:	55                   	push   rbp
  107df7:	48 89 e5             	mov    rbp,rsp
  107dfa:	48 83 ec 08          	sub    rsp,0x8
  107dfe:	89 f8                	mov    eax,edi
  107e00:	89 f2                	mov    edx,esi
  107e02:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
  107e06:	89 d0                	mov    eax,edx
  107e08:	88 45 f8             	mov    BYTE PTR [rbp-0x8],al
  107e0b:	0f b6 45 f8          	movzx  eax,BYTE PTR [rbp-0x8]
  107e0f:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
  107e13:	ee                   	out    dx,al
  107e14:	90                   	nop
  107e15:	c9                   	leave  
  107e16:	c3                   	ret    

0000000000107e17 <io::pit::pit_init()>:
  107e17:	55                   	push   rbp
  107e18:	48 89 e5             	mov    rbp,rsp
  107e1b:	bf 00 00 00 00       	mov    edi,0x0
  107e20:	e8 d5 93 ff ff       	call   1011fa <irq_unmask>
  107e25:	90                   	nop
  107e26:	5d                   	pop    rbp
  107e27:	c3                   	ret    

0000000000107e28 <io::pit::set_c0_frequency(unsigned int)>:
  107e28:	55                   	push   rbp
  107e29:	48 89 e5             	mov    rbp,rsp
  107e2c:	48 83 ec 08          	sub    rsp,0x8
  107e30:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  107e33:	fa                   	cli    
  107e34:	48 c7 c0 cc 0b 11 00 	mov    rax,0x110bcc
  107e3b:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
  107e3e:	89 10                	mov    DWORD PTR [rax],edx
  107e40:	b8 de 34 12 00       	mov    eax,0x1234de
  107e45:	ba 00 00 00 00       	mov    edx,0x0
  107e4a:	f7 75 fc             	div    DWORD PTR [rbp-0x4]
  107e4d:	89 c2                	mov    edx,eax
  107e4f:	48 c7 c0 c8 0b 11 00 	mov    rax,0x110bc8
  107e56:	66 89 10             	mov    WORD PTR [rax],dx
  107e59:	be 34 00 00 00       	mov    esi,0x34
  107e5e:	bf 43 00 00 00       	mov    edi,0x43
  107e63:	e8 8e ff ff ff       	call   107df6 <io::outb(unsigned short, unsigned char)>
  107e68:	48 c7 c0 c8 0b 11 00 	mov    rax,0x110bc8
  107e6f:	0f b7 00             	movzx  eax,WORD PTR [rax]
  107e72:	0f b6 c0             	movzx  eax,al
  107e75:	89 c6                	mov    esi,eax
  107e77:	bf 40 00 00 00       	mov    edi,0x40
  107e7c:	e8 75 ff ff ff       	call   107df6 <io::outb(unsigned short, unsigned char)>
  107e81:	48 c7 c0 c8 0b 11 00 	mov    rax,0x110bc8
  107e88:	0f b7 00             	movzx  eax,WORD PTR [rax]
  107e8b:	66 c1 e8 08          	shr    ax,0x8
  107e8f:	0f b6 c0             	movzx  eax,al
  107e92:	89 c6                	mov    esi,eax
  107e94:	bf 40 00 00 00       	mov    edi,0x40
  107e99:	e8 58 ff ff ff       	call   107df6 <io::outb(unsigned short, unsigned char)>
  107e9e:	fb                   	sti    
  107e9f:	90                   	nop
  107ea0:	c9                   	leave  
  107ea1:	c3                   	ret    

0000000000107ea2 <io::pit::set_c2_frequency(unsigned int)>:
  107ea2:	55                   	push   rbp
  107ea3:	48 89 e5             	mov    rbp,rsp
  107ea6:	48 83 ec 08          	sub    rsp,0x8
  107eaa:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  107ead:	fa                   	cli    
  107eae:	48 c7 c0 d4 0b 11 00 	mov    rax,0x110bd4
  107eb5:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
  107eb8:	89 10                	mov    DWORD PTR [rax],edx
  107eba:	b8 de 34 12 00       	mov    eax,0x1234de
  107ebf:	ba 00 00 00 00       	mov    edx,0x0
  107ec4:	f7 75 fc             	div    DWORD PTR [rbp-0x4]
  107ec7:	89 c2                	mov    edx,eax
  107ec9:	48 c7 c0 d0 0b 11 00 	mov    rax,0x110bd0
  107ed0:	66 89 10             	mov    WORD PTR [rax],dx
  107ed3:	be b6 00 00 00       	mov    esi,0xb6
  107ed8:	bf 43 00 00 00       	mov    edi,0x43
  107edd:	e8 14 ff ff ff       	call   107df6 <io::outb(unsigned short, unsigned char)>
  107ee2:	48 c7 c0 c8 0b 11 00 	mov    rax,0x110bc8
  107ee9:	0f b7 00             	movzx  eax,WORD PTR [rax]
  107eec:	0f b6 c0             	movzx  eax,al
  107eef:	89 c6                	mov    esi,eax
  107ef1:	bf 42 00 00 00       	mov    edi,0x42
  107ef6:	e8 fb fe ff ff       	call   107df6 <io::outb(unsigned short, unsigned char)>
  107efb:	48 c7 c0 c8 0b 11 00 	mov    rax,0x110bc8
  107f02:	0f b7 00             	movzx  eax,WORD PTR [rax]
  107f05:	66 c1 e8 08          	shr    ax,0x8
  107f09:	0f b6 c0             	movzx  eax,al
  107f0c:	89 c6                	mov    esi,eax
  107f0e:	bf 42 00 00 00       	mov    edi,0x42
  107f13:	e8 de fe ff ff       	call   107df6 <io::outb(unsigned short, unsigned char)>
  107f18:	fb                   	sti    
  107f19:	90                   	nop
  107f1a:	c9                   	leave  
  107f1b:	c3                   	ret    
  107f1c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000107f20 <lidt>:
  107f20:	0f 01 1f             	lidt   [rdi]
  107f23:	c3                   	ret    

0000000000107f24 <isr0>:
  107f24:	6a 00                	push   0x0
  107f26:	6a 00                	push   0x0
  107f28:	4c 8d 35 89 02 00 00 	lea    r14,[rip+0x289]        # 1081b8 <isr_common_stub>
  107f2f:	41 ff e6             	jmp    r14

0000000000107f32 <isr1>:
  107f32:	6a 00                	push   0x0
  107f34:	6a 01                	push   0x1
  107f36:	4c 8d 35 7b 02 00 00 	lea    r14,[rip+0x27b]        # 1081b8 <isr_common_stub>
  107f3d:	41 ff e6             	jmp    r14

0000000000107f40 <isr2>:
  107f40:	6a 00                	push   0x0
  107f42:	6a 02                	push   0x2
  107f44:	4c 8d 35 6d 02 00 00 	lea    r14,[rip+0x26d]        # 1081b8 <isr_common_stub>
  107f4b:	41 ff e6             	jmp    r14

0000000000107f4e <isr3>:
  107f4e:	6a 00                	push   0x0
  107f50:	6a 03                	push   0x3
  107f52:	4c 8d 35 5f 02 00 00 	lea    r14,[rip+0x25f]        # 1081b8 <isr_common_stub>
  107f59:	41 ff e6             	jmp    r14

0000000000107f5c <isr4>:
  107f5c:	6a 00                	push   0x0
  107f5e:	6a 04                	push   0x4
  107f60:	4c 8d 35 51 02 00 00 	lea    r14,[rip+0x251]        # 1081b8 <isr_common_stub>
  107f67:	41 ff e6             	jmp    r14

0000000000107f6a <isr5>:
  107f6a:	6a 00                	push   0x0
  107f6c:	6a 05                	push   0x5
  107f6e:	4c 8d 35 43 02 00 00 	lea    r14,[rip+0x243]        # 1081b8 <isr_common_stub>
  107f75:	41 ff e6             	jmp    r14

0000000000107f78 <isr6>:
  107f78:	6a 00                	push   0x0
  107f7a:	6a 06                	push   0x6
  107f7c:	4c 8d 35 35 02 00 00 	lea    r14,[rip+0x235]        # 1081b8 <isr_common_stub>
  107f83:	41 ff e6             	jmp    r14

0000000000107f86 <isr7>:
  107f86:	6a 00                	push   0x0
  107f88:	6a 07                	push   0x7
  107f8a:	4c 8d 35 27 02 00 00 	lea    r14,[rip+0x227]        # 1081b8 <isr_common_stub>
  107f91:	41 ff e6             	jmp    r14

0000000000107f94 <isr8>:
  107f94:	6a 08                	push   0x8
  107f96:	4c 8d 35 1b 02 00 00 	lea    r14,[rip+0x21b]        # 1081b8 <isr_common_stub>
  107f9d:	41 ff e6             	jmp    r14

0000000000107fa0 <isr9>:
  107fa0:	6a 00                	push   0x0
  107fa2:	6a 09                	push   0x9
  107fa4:	4c 8d 35 0d 02 00 00 	lea    r14,[rip+0x20d]        # 1081b8 <isr_common_stub>
  107fab:	41 ff e6             	jmp    r14

0000000000107fae <isr10>:
  107fae:	6a 0a                	push   0xa
  107fb0:	4c 8d 35 01 02 00 00 	lea    r14,[rip+0x201]        # 1081b8 <isr_common_stub>
  107fb7:	41 ff e6             	jmp    r14

0000000000107fba <isr11>:
  107fba:	6a 0b                	push   0xb
  107fbc:	4c 8d 35 f5 01 00 00 	lea    r14,[rip+0x1f5]        # 1081b8 <isr_common_stub>
  107fc3:	41 ff e6             	jmp    r14

0000000000107fc6 <isr12>:
  107fc6:	6a 0c                	push   0xc
  107fc8:	4c 8d 35 e9 01 00 00 	lea    r14,[rip+0x1e9]        # 1081b8 <isr_common_stub>
  107fcf:	41 ff e6             	jmp    r14

0000000000107fd2 <isr13>:
  107fd2:	6a 0d                	push   0xd
  107fd4:	4c 8d 35 dd 01 00 00 	lea    r14,[rip+0x1dd]        # 1081b8 <isr_common_stub>
  107fdb:	41 ff e6             	jmp    r14

0000000000107fde <isr14>:
  107fde:	6a 0e                	push   0xe
  107fe0:	4c 8d 35 d1 01 00 00 	lea    r14,[rip+0x1d1]        # 1081b8 <isr_common_stub>
  107fe7:	41 ff e6             	jmp    r14

0000000000107fea <isr15>:
  107fea:	6a 00                	push   0x0
  107fec:	6a 0f                	push   0xf
  107fee:	4c 8d 35 c3 01 00 00 	lea    r14,[rip+0x1c3]        # 1081b8 <isr_common_stub>
  107ff5:	41 ff e6             	jmp    r14

0000000000107ff8 <isr16>:
  107ff8:	6a 00                	push   0x0
  107ffa:	6a 10                	push   0x10
  107ffc:	4c 8d 35 b5 01 00 00 	lea    r14,[rip+0x1b5]        # 1081b8 <isr_common_stub>
  108003:	41 ff e6             	jmp    r14

0000000000108006 <isr17>:
  108006:	6a 00                	push   0x0
  108008:	6a 11                	push   0x11
  10800a:	4c 8d 35 a7 01 00 00 	lea    r14,[rip+0x1a7]        # 1081b8 <isr_common_stub>
  108011:	41 ff e6             	jmp    r14

0000000000108014 <isr18>:
  108014:	6a 00                	push   0x0
  108016:	6a 12                	push   0x12
  108018:	4c 8d 35 99 01 00 00 	lea    r14,[rip+0x199]        # 1081b8 <isr_common_stub>
  10801f:	41 ff e6             	jmp    r14

0000000000108022 <isr19>:
  108022:	6a 00                	push   0x0
  108024:	6a 13                	push   0x13
  108026:	4c 8d 35 8b 01 00 00 	lea    r14,[rip+0x18b]        # 1081b8 <isr_common_stub>
  10802d:	41 ff e6             	jmp    r14

0000000000108030 <isr20>:
  108030:	6a 00                	push   0x0
  108032:	6a 14                	push   0x14
  108034:	4c 8d 35 7d 01 00 00 	lea    r14,[rip+0x17d]        # 1081b8 <isr_common_stub>
  10803b:	41 ff e6             	jmp    r14

000000000010803e <isr21>:
  10803e:	6a 00                	push   0x0
  108040:	6a 15                	push   0x15
  108042:	4c 8d 35 6f 01 00 00 	lea    r14,[rip+0x16f]        # 1081b8 <isr_common_stub>
  108049:	41 ff e6             	jmp    r14

000000000010804c <isr22>:
  10804c:	6a 00                	push   0x0
  10804e:	6a 16                	push   0x16
  108050:	4c 8d 35 61 01 00 00 	lea    r14,[rip+0x161]        # 1081b8 <isr_common_stub>
  108057:	41 ff e6             	jmp    r14

000000000010805a <isr23>:
  10805a:	6a 00                	push   0x0
  10805c:	6a 17                	push   0x17
  10805e:	4c 8d 35 53 01 00 00 	lea    r14,[rip+0x153]        # 1081b8 <isr_common_stub>
  108065:	41 ff e6             	jmp    r14

0000000000108068 <isr24>:
  108068:	6a 00                	push   0x0
  10806a:	6a 18                	push   0x18
  10806c:	4c 8d 35 45 01 00 00 	lea    r14,[rip+0x145]        # 1081b8 <isr_common_stub>
  108073:	41 ff e6             	jmp    r14

0000000000108076 <isr25>:
  108076:	6a 00                	push   0x0
  108078:	6a 19                	push   0x19
  10807a:	4c 8d 35 37 01 00 00 	lea    r14,[rip+0x137]        # 1081b8 <isr_common_stub>
  108081:	41 ff e6             	jmp    r14

0000000000108084 <isr26>:
  108084:	6a 00                	push   0x0
  108086:	6a 1a                	push   0x1a
  108088:	4c 8d 35 29 01 00 00 	lea    r14,[rip+0x129]        # 1081b8 <isr_common_stub>
  10808f:	41 ff e6             	jmp    r14

0000000000108092 <isr27>:
  108092:	6a 00                	push   0x0
  108094:	6a 1b                	push   0x1b
  108096:	4c 8d 35 1b 01 00 00 	lea    r14,[rip+0x11b]        # 1081b8 <isr_common_stub>
  10809d:	41 ff e6             	jmp    r14

00000000001080a0 <isr28>:
  1080a0:	6a 00                	push   0x0
  1080a2:	6a 1c                	push   0x1c
  1080a4:	4c 8d 35 0d 01 00 00 	lea    r14,[rip+0x10d]        # 1081b8 <isr_common_stub>
  1080ab:	41 ff e6             	jmp    r14

00000000001080ae <isr29>:
  1080ae:	6a 00                	push   0x0
  1080b0:	6a 1d                	push   0x1d
  1080b2:	4c 8d 35 ff 00 00 00 	lea    r14,[rip+0xff]        # 1081b8 <isr_common_stub>
  1080b9:	41 ff e6             	jmp    r14

00000000001080bc <isr30>:
  1080bc:	6a 00                	push   0x0
  1080be:	6a 1e                	push   0x1e
  1080c0:	4c 8d 35 f1 00 00 00 	lea    r14,[rip+0xf1]        # 1081b8 <isr_common_stub>
  1080c7:	41 ff e6             	jmp    r14

00000000001080ca <isr31>:
  1080ca:	6a 00                	push   0x0
  1080cc:	6a 1f                	push   0x1f
  1080ce:	4c 8d 35 e3 00 00 00 	lea    r14,[rip+0xe3]        # 1081b8 <isr_common_stub>
  1080d5:	41 ff e6             	jmp    r14

00000000001080d8 <irq0>:
  1080d8:	6a 00                	push   0x0
  1080da:	6a 20                	push   0x20
  1080dc:	4c 8d 35 1f 01 00 00 	lea    r14,[rip+0x11f]        # 108202 <irq_common_stub>
  1080e3:	41 ff e6             	jmp    r14

00000000001080e6 <irq1>:
  1080e6:	6a 01                	push   0x1
  1080e8:	6a 21                	push   0x21
  1080ea:	4c 8d 35 11 01 00 00 	lea    r14,[rip+0x111]        # 108202 <irq_common_stub>
  1080f1:	41 ff e6             	jmp    r14

00000000001080f4 <irq2>:
  1080f4:	6a 02                	push   0x2
  1080f6:	6a 22                	push   0x22
  1080f8:	4c 8d 35 03 01 00 00 	lea    r14,[rip+0x103]        # 108202 <irq_common_stub>
  1080ff:	41 ff e6             	jmp    r14

0000000000108102 <irq3>:
  108102:	6a 03                	push   0x3
  108104:	6a 23                	push   0x23
  108106:	4c 8d 35 f5 00 00 00 	lea    r14,[rip+0xf5]        # 108202 <irq_common_stub>
  10810d:	41 ff e6             	jmp    r14

0000000000108110 <irq4>:
  108110:	6a 04                	push   0x4
  108112:	6a 24                	push   0x24
  108114:	4c 8d 35 e7 00 00 00 	lea    r14,[rip+0xe7]        # 108202 <irq_common_stub>
  10811b:	41 ff e6             	jmp    r14

000000000010811e <irq5>:
  10811e:	6a 05                	push   0x5
  108120:	6a 25                	push   0x25
  108122:	4c 8d 35 d9 00 00 00 	lea    r14,[rip+0xd9]        # 108202 <irq_common_stub>
  108129:	41 ff e6             	jmp    r14

000000000010812c <irq6>:
  10812c:	6a 06                	push   0x6
  10812e:	6a 26                	push   0x26
  108130:	4c 8d 35 cb 00 00 00 	lea    r14,[rip+0xcb]        # 108202 <irq_common_stub>
  108137:	41 ff e6             	jmp    r14

000000000010813a <irq7>:
  10813a:	6a 07                	push   0x7
  10813c:	6a 27                	push   0x27
  10813e:	4c 8d 35 bd 00 00 00 	lea    r14,[rip+0xbd]        # 108202 <irq_common_stub>
  108145:	41 ff e6             	jmp    r14

0000000000108148 <irq8>:
  108148:	6a 08                	push   0x8
  10814a:	6a 28                	push   0x28
  10814c:	4c 8d 35 af 00 00 00 	lea    r14,[rip+0xaf]        # 108202 <irq_common_stub>
  108153:	41 ff e6             	jmp    r14

0000000000108156 <irq9>:
  108156:	6a 09                	push   0x9
  108158:	6a 29                	push   0x29
  10815a:	4c 8d 35 a1 00 00 00 	lea    r14,[rip+0xa1]        # 108202 <irq_common_stub>
  108161:	41 ff e6             	jmp    r14

0000000000108164 <irq10>:
  108164:	6a 0a                	push   0xa
  108166:	6a 2a                	push   0x2a
  108168:	4c 8d 35 93 00 00 00 	lea    r14,[rip+0x93]        # 108202 <irq_common_stub>
  10816f:	41 ff e6             	jmp    r14

0000000000108172 <irq11>:
  108172:	6a 0b                	push   0xb
  108174:	6a 2b                	push   0x2b
  108176:	4c 8d 35 85 00 00 00 	lea    r14,[rip+0x85]        # 108202 <irq_common_stub>
  10817d:	41 ff e6             	jmp    r14

0000000000108180 <irq12>:
  108180:	6a 0c                	push   0xc
  108182:	6a 2c                	push   0x2c
  108184:	4c 8d 35 77 00 00 00 	lea    r14,[rip+0x77]        # 108202 <irq_common_stub>
  10818b:	41 ff e6             	jmp    r14

000000000010818e <irq13>:
  10818e:	6a 0d                	push   0xd
  108190:	6a 2d                	push   0x2d
  108192:	4c 8d 35 69 00 00 00 	lea    r14,[rip+0x69]        # 108202 <irq_common_stub>
  108199:	41 ff e6             	jmp    r14

000000000010819c <irq14>:
  10819c:	6a 0e                	push   0xe
  10819e:	6a 2e                	push   0x2e
  1081a0:	4c 8d 35 5b 00 00 00 	lea    r14,[rip+0x5b]        # 108202 <irq_common_stub>
  1081a7:	41 ff e6             	jmp    r14

00000000001081aa <irq15>:
  1081aa:	6a 0f                	push   0xf
  1081ac:	6a 2f                	push   0x2f
  1081ae:	4c 8d 35 4d 00 00 00 	lea    r14,[rip+0x4d]        # 108202 <irq_common_stub>
  1081b5:	41 ff e6             	jmp    r14

00000000001081b8 <isr_common_stub>:
  1081b8:	50                   	push   rax
  1081b9:	51                   	push   rcx
  1081ba:	52                   	push   rdx
  1081bb:	53                   	push   rbx
  1081bc:	55                   	push   rbp
  1081bd:	56                   	push   rsi
  1081be:	57                   	push   rdi
  1081bf:	66 8c d8             	mov    ax,ds
  1081c2:	50                   	push   rax
  1081c3:	66 b8 10 00          	mov    ax,0x10
  1081c7:	8e d8                	mov    ds,eax
  1081c9:	8e c0                	mov    es,eax
  1081cb:	8e e0                	mov    fs,eax
  1081cd:	8e e8                	mov    gs,eax
  1081cf:	0f 20 c0             	mov    rax,cr0
  1081d2:	50                   	push   rax
  1081d3:	0f 20 d0             	mov    rax,cr2
  1081d6:	50                   	push   rax
  1081d7:	0f 20 d8             	mov    rax,cr3
  1081da:	50                   	push   rax
  1081db:	0f 20 e0             	mov    rax,cr4
  1081de:	50                   	push   rax
  1081df:	48 89 e7             	mov    rdi,rsp
  1081e2:	fc                   	cld    
  1081e3:	e8 00 c9 ff ff       	call   104ae8 <isr_handler>
  1081e8:	5a                   	pop    rdx
  1081e9:	5a                   	pop    rdx
  1081ea:	5a                   	pop    rdx
  1081eb:	5a                   	pop    rdx
  1081ec:	5b                   	pop    rbx
  1081ed:	8e db                	mov    ds,ebx
  1081ef:	8e c3                	mov    es,ebx
  1081f1:	8e e3                	mov    fs,ebx
  1081f3:	8e eb                	mov    gs,ebx
  1081f5:	5f                   	pop    rdi
  1081f6:	5e                   	pop    rsi
  1081f7:	5d                   	pop    rbp
  1081f8:	5b                   	pop    rbx
  1081f9:	5a                   	pop    rdx
  1081fa:	59                   	pop    rcx
  1081fb:	58                   	pop    rax
  1081fc:	48 83 c4 10          	add    rsp,0x10
  108200:	48 cf                	iretq  

0000000000108202 <irq_common_stub>:
  108202:	50                   	push   rax
  108203:	51                   	push   rcx
  108204:	52                   	push   rdx
  108205:	53                   	push   rbx
  108206:	55                   	push   rbp
  108207:	56                   	push   rsi
  108208:	57                   	push   rdi
  108209:	66 8c d8             	mov    ax,ds
  10820c:	50                   	push   rax
  10820d:	66 b8 10 00          	mov    ax,0x10
  108211:	8e d8                	mov    ds,eax
  108213:	8e c0                	mov    es,eax
  108215:	8e e0                	mov    fs,eax
  108217:	8e e8                	mov    gs,eax
  108219:	0f 20 c0             	mov    rax,cr0
  10821c:	50                   	push   rax
  10821d:	0f 20 d0             	mov    rax,cr2
  108220:	50                   	push   rax
  108221:	0f 20 d8             	mov    rax,cr3
  108224:	50                   	push   rax
  108225:	0f 20 e0             	mov    rax,cr4
  108228:	50                   	push   rax
  108229:	48 89 e7             	mov    rdi,rsp
  10822c:	fc                   	cld    
  10822d:	4c 8d 35 cf c8 ff ff 	lea    r14,[rip+0xffffffffffffc8cf]        # 104b03 <irq_handler>
  108234:	41 ff d6             	call   r14
  108237:	5a                   	pop    rdx
  108238:	5a                   	pop    rdx
  108239:	5a                   	pop    rdx
  10823a:	5a                   	pop    rdx
  10823b:	58                   	pop    rax
  10823c:	8e d8                	mov    ds,eax
  10823e:	8e c0                	mov    es,eax
  108240:	8e e0                	mov    fs,eax
  108242:	8e e8                	mov    gs,eax
  108244:	5f                   	pop    rdi
  108245:	5e                   	pop    rsi
  108246:	5d                   	pop    rbp
  108247:	5b                   	pop    rbx
  108248:	5a                   	pop    rdx
  108249:	59                   	pop    rcx
  10824a:	58                   	pop    rax
  10824b:	48 83 c4 10          	add    rsp,0x10
  10824f:	48 cf                	iretq  
  108251:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108258:	00 00 00 
  10825b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000108260 <load_gdt>:
  108260:	50                   	push   rax
  108261:	0f 01 17             	lgdt   [rdi]
  108264:	66 b8 10 00          	mov    ax,0x10
  108268:	8e d8                	mov    ds,eax
  10826a:	8e c0                	mov    es,eax
  10826c:	8e e0                	mov    fs,eax
  10826e:	8e e8                	mov    gs,eax
  108270:	8e d0                	mov    ss,eax
  108272:	58                   	pop    rax
  108273:	48 ff 2d 05 00 00 00 	rex.W jmp FWORD PTR [rip+0x5]        # 10827f <cs_ptr>

000000000010827a <load_gdt.ret>:
  10827a:	c3                   	ret    

000000000010827b <load_tss>:
  10827b:	0f 00 df             	ltr    di
  10827e:	c3                   	ret    

000000000010827f <cs_ptr>:
  10827f:	7a 82 10 00 00 00 00 00 08 00 0f 1f 80 00 00 00     z...............
	...

0000000000108290 <setup_syscalls>:
  108290:	48 8d 05 30 00 00 00 	lea    rax,[rip+0x30]        # 1082c7 <syscall_handler>
  108297:	49 89 c0             	mov    r8,rax
  10829a:	49 c1 e8 20          	shr    r8,0x20
  10829e:	4c 89 c2             	mov    rdx,r8
  1082a1:	89 c0                	mov    eax,eax
  1082a3:	89 d2                	mov    edx,edx
  1082a5:	b9 82 00 00 c0       	mov    ecx,0xc0000082
  1082aa:	0f 30                	wrmsr  
  1082ac:	b9 80 00 00 c0       	mov    ecx,0xc0000080
  1082b1:	0f 32                	rdmsr  
  1082b3:	83 c8 01             	or     eax,0x1
  1082b6:	0f 30                	wrmsr  
  1082b8:	b9 81 00 00 c0       	mov    ecx,0xc0000081
  1082bd:	0f 32                	rdmsr  
  1082bf:	ba 08 00 18 00       	mov    edx,0x180008
  1082c4:	0f 30                	wrmsr  
  1082c6:	c3                   	ret    

00000000001082c7 <syscall_handler>:
  1082c7:	fa                   	cli    
  1082c8:	50                   	push   rax
  1082c9:	53                   	push   rbx
  1082ca:	51                   	push   rcx
  1082cb:	52                   	push   rdx
  1082cc:	55                   	push   rbp
  1082cd:	56                   	push   rsi
  1082ce:	57                   	push   rdi
  1082cf:	41 50                	push   r8
  1082d1:	41 51                	push   r9
  1082d3:	41 52                	push   r10
  1082d5:	41 53                	push   r11
  1082d7:	41 54                	push   r12
  1082d9:	41 55                	push   r13
  1082db:	41 56                	push   r14
  1082dd:	41 57                	push   r15
  1082df:	49 89 c7             	mov    r15,rax
  1082e2:	bf 00 00 00 00       	mov    edi,0x0
  1082e7:	49 89 cd             	mov    r13,rcx
  1082ea:	4c 8d 35 81 d2 ff ff 	lea    r14,[rip+0xffffffffffffd281]        # 105572 <tss_get>
  1082f1:	41 ff d6             	call   r14
  1082f4:	4c 89 e9             	mov    rcx,r13
  1082f7:	48 89 e7             	mov    rdi,rsp
  1082fa:	48 8b 60 04          	mov    rsp,QWORD PTR [rax+0x4]
  1082fe:	57                   	push   rdi
  1082ff:	4c 89 ff             	mov    rdi,r15
  108302:	48 89 de             	mov    rsi,rbx
  108305:	4c 89 e2             	mov    rdx,r12
  108308:	4c 8d 35 9e e7 ff ff 	lea    r14,[rip+0xffffffffffffe79e]        # 106aad <ex_syscall_handler>
  10830f:	41 ff d6             	call   r14

0000000000108312 <syscall_handler.syscall_end>:
  108312:	5c                   	pop    rsp
  108313:	41 5f                	pop    r15
  108315:	41 5e                	pop    r14
  108317:	41 5d                	pop    r13
  108319:	41 5c                	pop    r12
  10831b:	41 5b                	pop    r11
  10831d:	41 5a                	pop    r10
  10831f:	41 59                	pop    r9
  108321:	41 58                	pop    r8
  108323:	5f                   	pop    rdi
  108324:	5e                   	pop    rsi
  108325:	5d                   	pop    rbp
  108326:	5a                   	pop    rdx
  108327:	59                   	pop    rcx
  108328:	5b                   	pop    rbx
  108329:	58                   	pop    rax
  10832a:	48 0f 07             	sysretq 
  10832d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000108330 <enter_userspace>:
  108330:	4c 8d 35 9a de ff ff 	lea    r14,[rip+0xffffffffffffde9a]        # 1061d1 <request_page>
  108337:	41 ff d6             	call   r14
  10833a:	48 89 c3             	mov    rbx,rax
  10833d:	48 81 c3 00 10 00 00 	add    rbx,0x1000
  108344:	48 89 c7             	mov    rdi,rax
  108347:	4c 8d 35 94 e4 ff ff 	lea    r14,[rip+0xffffffffffffe494]        # 1067e2 <donate_to_userspace>
  10834e:	41 ff d6             	call   r14
  108351:	4c 8d 35 8a e4 ff ff 	lea    r14,[rip+0xffffffffffffe48a]        # 1067e2 <donate_to_userspace>
  108358:	41 ff d6             	call   r14
  10835b:	b8 1b 00 00 00       	mov    eax,0x1b
  108360:	8e d8                	mov    ds,eax
  108362:	8e c0                	mov    es,eax
  108364:	5d                   	pop    rbp
  108365:	50                   	push   rax
  108366:	53                   	push   rbx
  108367:	68 02 02 00 00       	push   0x202
  10836c:	6a 23                	push   0x23
  10836e:	4c 8d 35 8b 0c 00 00 	lea    r14,[rip+0xc8b]        # 109000 <userspace_entry>
  108375:	41 56                	push   r14
  108377:	48 cf                	iretq  
  108379:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000108380 <kernel_entry>:
  108380:	49 89 ff             	mov    r15,rdi
  108383:	48 8d 25 56 c8 00 00 	lea    rsp,[rip+0xc856]        # 114be0 <stack_end>
  10838a:	48 31 ed             	xor    rbp,rbp
  10838d:	55                   	push   rbp
  10838e:	48 89 e5             	mov    rbp,rsp
  108391:	fa                   	cli    
  108392:	4c 8d 35 11 d2 ff ff 	lea    r14,[rip+0xffffffffffffd211]        # 1055aa <gdt_init>
  108399:	41 ff d6             	call   r14
  10839c:	4c 8d 35 b3 8e ff ff 	lea    r14,[rip+0xffffffffffff8eb3]        # 101256 <configure_pic>
  1083a3:	41 ff d6             	call   r14
  1083a6:	4c 89 ff             	mov    rdi,r15
  1083a9:	48 89 e6             	mov    rsi,rsp
  1083ac:	4c 8d 35 44 f4 ff ff 	lea    r14,[rip+0xfffffffffffff444]        # 1077f7 <kernel_main>
  1083b3:	41 ff d6             	call   r14
  1083b6:	4c 8d 35 73 ff ff ff 	lea    r14,[rip+0xffffffffffffff73]        # 108330 <enter_userspace>
  1083bd:	41 ff e6             	jmp    r14

00000000001083c0 <sleep>:
  1083c0:	55                   	push   rbp
  1083c1:	48 89 e5             	mov    rbp,rsp
  1083c4:	50                   	push   rax
  1083c5:	b8 00 00 00 00       	mov    eax,0x0
  1083ca:	48 89 05 07 88 00 00 	mov    QWORD PTR [rip+0x8807],rax        # 110bd8 <ms_clock>
  1083d1:	48 31 c0             	xor    rax,rax
  1083d4:	89 f8                	mov    eax,edi

00000000001083d6 <sleep.loop>:
  1083d6:	fa                   	cli    
  1083d7:	48 8b 1d fa 87 00 00 	mov    rbx,QWORD PTR [rip+0x87fa]        # 110bd8 <ms_clock>
  1083de:	48 39 c3             	cmp    rbx,rax
  1083e1:	7f 0a                	jg     1083ed <sleep.done>
  1083e3:	fb                   	sti    
  1083e4:	90                   	nop
  1083e5:	90                   	nop
  1083e6:	90                   	nop
  1083e7:	90                   	nop
  1083e8:	90                   	nop
  1083e9:	90                   	nop
  1083ea:	90                   	nop
  1083eb:	eb e9                	jmp    1083d6 <sleep.loop>

00000000001083ed <sleep.done>:
  1083ed:	fb                   	sti    
  1083ee:	58                   	pop    rax
  1083ef:	5d                   	pop    rbp
  1083f0:	c3                   	ret    
  1083f1:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1083f8:	00 00 00 
  1083fb:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108402:	00 00 00 
  108405:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10840c:	00 00 00 
  10840f:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108416:	00 00 00 
  108419:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108420:	00 00 00 
  108423:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10842a:	00 00 00 
  10842d:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108434:	00 00 00 
  108437:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10843e:	00 00 00 
  108441:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108448:	00 00 00 
  10844b:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108452:	00 00 00 
  108455:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10845c:	00 00 00 
  10845f:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108466:	00 00 00 
  108469:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108470:	00 00 00 
  108473:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10847a:	00 00 00 
  10847d:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108484:	00 00 00 
  108487:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10848e:	00 00 00 
  108491:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108498:	00 00 00 
  10849b:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1084a2:	00 00 00 
  1084a5:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1084ac:	00 00 00 
  1084af:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1084b6:	00 00 00 
  1084b9:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1084c0:	00 00 00 
  1084c3:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1084ca:	00 00 00 
  1084cd:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1084d4:	00 00 00 
  1084d7:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1084de:	00 00 00 
  1084e1:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1084e8:	00 00 00 
  1084eb:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1084f2:	00 00 00 
  1084f5:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1084fc:	00 00 00 
  1084ff:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108506:	00 00 00 
  108509:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108510:	00 00 00 
  108513:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10851a:	00 00 00 
  10851d:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108524:	00 00 00 
  108527:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10852e:	00 00 00 
  108531:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108538:	00 00 00 
  10853b:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108542:	00 00 00 
  108545:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10854c:	00 00 00 
  10854f:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108556:	00 00 00 
  108559:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108560:	00 00 00 
  108563:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10856a:	00 00 00 
  10856d:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108574:	00 00 00 
  108577:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10857e:	00 00 00 
  108581:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108588:	00 00 00 
  10858b:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108592:	00 00 00 
  108595:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10859c:	00 00 00 
  10859f:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1085a6:	00 00 00 
  1085a9:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1085b0:	00 00 00 
  1085b3:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1085ba:	00 00 00 
  1085bd:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1085c4:	00 00 00 
  1085c7:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1085ce:	00 00 00 
  1085d1:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1085d8:	00 00 00 
  1085db:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1085e2:	00 00 00 
  1085e5:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1085ec:	00 00 00 
  1085ef:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1085f6:	00 00 00 
  1085f9:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108600:	00 00 00 
  108603:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10860a:	00 00 00 
  10860d:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108614:	00 00 00 
  108617:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10861e:	00 00 00 
  108621:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108628:	00 00 00 
  10862b:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108632:	00 00 00 
  108635:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10863c:	00 00 00 
  10863f:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108646:	00 00 00 
  108649:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108650:	00 00 00 
  108653:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10865a:	00 00 00 
  10865d:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108664:	00 00 00 
  108667:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10866e:	00 00 00 
  108671:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108678:	00 00 00 
  10867b:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108682:	00 00 00 
  108685:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10868c:	00 00 00 
  10868f:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108696:	00 00 00 
  108699:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1086a0:	00 00 00 
  1086a3:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1086aa:	00 00 00 
  1086ad:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1086b4:	00 00 00 
  1086b7:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1086be:	00 00 00 
  1086c1:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1086c8:	00 00 00 
  1086cb:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1086d2:	00 00 00 
  1086d5:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1086dc:	00 00 00 
  1086df:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1086e6:	00 00 00 
  1086e9:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1086f0:	00 00 00 
  1086f3:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1086fa:	00 00 00 
  1086fd:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108704:	00 00 00 
  108707:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10870e:	00 00 00 
  108711:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108718:	00 00 00 
  10871b:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108722:	00 00 00 
  108725:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10872c:	00 00 00 
  10872f:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108736:	00 00 00 
  108739:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108740:	00 00 00 
  108743:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10874a:	00 00 00 
  10874d:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108754:	00 00 00 
  108757:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10875e:	00 00 00 
  108761:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108768:	00 00 00 
  10876b:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108772:	00 00 00 
  108775:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10877c:	00 00 00 
  10877f:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108786:	00 00 00 
  108789:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108790:	00 00 00 
  108793:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10879a:	00 00 00 
  10879d:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1087a4:	00 00 00 
  1087a7:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1087ae:	00 00 00 
  1087b1:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1087b8:	00 00 00 
  1087bb:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1087c2:	00 00 00 
  1087c5:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1087cc:	00 00 00 
  1087cf:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1087d6:	00 00 00 
  1087d9:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1087e0:	00 00 00 
  1087e3:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1087ea:	00 00 00 
  1087ed:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1087f4:	00 00 00 
  1087f7:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1087fe:	00 00 00 
  108801:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108808:	00 00 00 
  10880b:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108812:	00 00 00 
  108815:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10881c:	00 00 00 
  10881f:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108826:	00 00 00 
  108829:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108830:	00 00 00 
  108833:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10883a:	00 00 00 
  10883d:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108844:	00 00 00 
  108847:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10884e:	00 00 00 
  108851:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108858:	00 00 00 
  10885b:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108862:	00 00 00 
  108865:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10886c:	00 00 00 
  10886f:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108876:	00 00 00 
  108879:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108880:	00 00 00 
  108883:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10888a:	00 00 00 
  10888d:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108894:	00 00 00 
  108897:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10889e:	00 00 00 
  1088a1:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1088a8:	00 00 00 
  1088ab:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1088b2:	00 00 00 
  1088b5:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1088bc:	00 00 00 
  1088bf:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1088c6:	00 00 00 
  1088c9:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1088d0:	00 00 00 
  1088d3:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1088da:	00 00 00 
  1088dd:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1088e4:	00 00 00 
  1088e7:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1088ee:	00 00 00 
  1088f1:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1088f8:	00 00 00 
  1088fb:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108902:	00 00 00 
  108905:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10890c:	00 00 00 
  10890f:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108916:	00 00 00 
  108919:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108920:	00 00 00 
  108923:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10892a:	00 00 00 
  10892d:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108934:	00 00 00 
  108937:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10893e:	00 00 00 
  108941:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108948:	00 00 00 
  10894b:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108952:	00 00 00 
  108955:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10895c:	00 00 00 
  10895f:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108966:	00 00 00 
  108969:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108970:	00 00 00 
  108973:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10897a:	00 00 00 
  10897d:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108984:	00 00 00 
  108987:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  10898e:	00 00 00 
  108991:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108998:	00 00 00 
  10899b:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1089a2:	00 00 00 
  1089a5:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1089ac:	00 00 00 
  1089af:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1089b6:	00 00 00 
  1089b9:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1089c0:	00 00 00 
  1089c3:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1089ca:	00 00 00 
  1089cd:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1089d4:	00 00 00 
  1089d7:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1089de:	00 00 00 
  1089e1:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1089e8:	00 00 00 
  1089eb:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1089f2:	00 00 00 
  1089f5:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  1089fc:	00 00 00 
  1089ff:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108a06:	00 00 00 
  108a09:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108a10:	00 00 00 
  108a13:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108a1a:	00 00 00 
  108a1d:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108a24:	00 00 00 
  108a27:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108a2e:	00 00 00 
  108a31:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108a38:	00 00 00 
  108a3b:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108a42:	00 00 00 
  108a45:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108a4c:	00 00 00 
  108a4f:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108a56:	00 00 00 
  108a59:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108a60:	00 00 00 
  108a63:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108a6a:	00 00 00 
  108a6d:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108a74:	00 00 00 
  108a77:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108a7e:	00 00 00 
  108a81:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108a88:	00 00 00 
  108a8b:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108a92:	00 00 00 
  108a95:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108a9c:	00 00 00 
  108a9f:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108aa6:	00 00 00 
  108aa9:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108ab0:	00 00 00 
  108ab3:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108aba:	00 00 00 
  108abd:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108ac4:	00 00 00 
  108ac7:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108ace:	00 00 00 
  108ad1:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108ad8:	00 00 00 
  108adb:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108ae2:	00 00 00 
  108ae5:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108aec:	00 00 00 
  108aef:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108af6:	00 00 00 
  108af9:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108b00:	00 00 00 
  108b03:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108b0a:	00 00 00 
  108b0d:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108b14:	00 00 00 
  108b17:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108b1e:	00 00 00 
  108b21:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108b28:	00 00 00 
  108b2b:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108b32:	00 00 00 
  108b35:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108b3c:	00 00 00 
  108b3f:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108b46:	00 00 00 
  108b49:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108b50:	00 00 00 
  108b53:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108b5a:	00 00 00 
  108b5d:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108b64:	00 00 00 
  108b67:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108b6e:	00 00 00 
  108b71:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108b78:	00 00 00 
  108b7b:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108b82:	00 00 00 
  108b85:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108b8c:	00 00 00 
  108b8f:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108b96:	00 00 00 
  108b99:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108ba0:	00 00 00 
  108ba3:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108baa:	00 00 00 
  108bad:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108bb4:	00 00 00 
  108bb7:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108bbe:	00 00 00 
  108bc1:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108bc8:	00 00 00 
  108bcb:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108bd2:	00 00 00 
  108bd5:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108bdc:	00 00 00 
  108bdf:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108be6:	00 00 00 
  108be9:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108bf0:	00 00 00 
  108bf3:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108bfa:	00 00 00 
  108bfd:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108c04:	00 00 00 
  108c07:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108c0e:	00 00 00 
  108c11:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108c18:	00 00 00 
  108c1b:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108c22:	00 00 00 
  108c25:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108c2c:	00 00 00 
  108c2f:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108c36:	00 00 00 
  108c39:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108c40:	00 00 00 
  108c43:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108c4a:	00 00 00 
  108c4d:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108c54:	00 00 00 
  108c57:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108c5e:	00 00 00 
  108c61:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108c68:	00 00 00 
  108c6b:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108c72:	00 00 00 
  108c75:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108c7c:	00 00 00 
  108c7f:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108c86:	00 00 00 
  108c89:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108c90:	00 00 00 
  108c93:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108c9a:	00 00 00 
  108c9d:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108ca4:	00 00 00 
  108ca7:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108cae:	00 00 00 
  108cb1:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108cb8:	00 00 00 
  108cbb:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108cc2:	00 00 00 
  108cc5:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108ccc:	00 00 00 
  108ccf:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108cd6:	00 00 00 
  108cd9:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108ce0:	00 00 00 
  108ce3:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108cea:	00 00 00 
  108ced:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108cf4:	00 00 00 
  108cf7:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108cfe:	00 00 00 
  108d01:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108d08:	00 00 00 
  108d0b:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108d12:	00 00 00 
  108d15:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108d1c:	00 00 00 
  108d1f:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108d26:	00 00 00 
  108d29:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108d30:	00 00 00 
  108d33:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108d3a:	00 00 00 
  108d3d:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108d44:	00 00 00 
  108d47:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108d4e:	00 00 00 
  108d51:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108d58:	00 00 00 
  108d5b:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108d62:	00 00 00 
  108d65:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108d6c:	00 00 00 
  108d6f:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108d76:	00 00 00 
  108d79:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108d80:	00 00 00 
  108d83:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108d8a:	00 00 00 
  108d8d:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108d94:	00 00 00 
  108d97:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108d9e:	00 00 00 
  108da1:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108da8:	00 00 00 
  108dab:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108db2:	00 00 00 
  108db5:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108dbc:	00 00 00 
  108dbf:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108dc6:	00 00 00 
  108dc9:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108dd0:	00 00 00 
  108dd3:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108dda:	00 00 00 
  108ddd:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108de4:	00 00 00 
  108de7:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108dee:	00 00 00 
  108df1:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108df8:	00 00 00 
  108dfb:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108e02:	00 00 00 
  108e05:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108e0c:	00 00 00 
  108e0f:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108e16:	00 00 00 
  108e19:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108e20:	00 00 00 
  108e23:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108e2a:	00 00 00 
  108e2d:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108e34:	00 00 00 
  108e37:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108e3e:	00 00 00 
  108e41:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108e48:	00 00 00 
  108e4b:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108e52:	00 00 00 
  108e55:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108e5c:	00 00 00 
  108e5f:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108e66:	00 00 00 
  108e69:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108e70:	00 00 00 
  108e73:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108e7a:	00 00 00 
  108e7d:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108e84:	00 00 00 
  108e87:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108e8e:	00 00 00 
  108e91:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108e98:	00 00 00 
  108e9b:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108ea2:	00 00 00 
  108ea5:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108eac:	00 00 00 
  108eaf:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108eb6:	00 00 00 
  108eb9:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108ec0:	00 00 00 
  108ec3:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108eca:	00 00 00 
  108ecd:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108ed4:	00 00 00 
  108ed7:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108ede:	00 00 00 
  108ee1:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108ee8:	00 00 00 
  108eeb:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108ef2:	00 00 00 
  108ef5:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108efc:	00 00 00 
  108eff:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108f06:	00 00 00 
  108f09:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108f10:	00 00 00 
  108f13:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108f1a:	00 00 00 
  108f1d:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108f24:	00 00 00 
  108f27:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108f2e:	00 00 00 
  108f31:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108f38:	00 00 00 
  108f3b:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108f42:	00 00 00 
  108f45:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108f4c:	00 00 00 
  108f4f:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108f56:	00 00 00 
  108f59:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108f60:	00 00 00 
  108f63:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108f6a:	00 00 00 
  108f6d:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108f74:	00 00 00 
  108f77:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108f7e:	00 00 00 
  108f81:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108f88:	00 00 00 
  108f8b:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108f92:	00 00 00 
  108f95:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108f9c:	00 00 00 
  108f9f:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108fa6:	00 00 00 
  108fa9:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108fb0:	00 00 00 
  108fb3:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108fba:	00 00 00 
  108fbd:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108fc4:	00 00 00 
  108fc7:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108fce:	00 00 00 
  108fd1:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108fd8:	00 00 00 
  108fdb:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108fe2:	00 00 00 
  108fe5:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108fec:	00 00 00 
  108fef:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  108ff6:	00 00 00 
  108ff9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000109000 <userspace_entry>:
  109000:	48 31 ed             	xor    rbp,rbp
  109003:	55                   	push   rbp
  109004:	48 89 e5             	mov    rbp,rsp
  109007:	b8 01 05 10 00       	mov    eax,0x100501
  10900c:	48 8d 1d 0d 00 00 00 	lea    rbx,[rip+0xd]        # 109020 <userspace_message>
  109013:	0f 05                	syscall 
  109015:	cd 06                	int    0x6
  109017:	48 8d 1d 00 00 00 00 	lea    rbx,[rip+0x0]        # 10901e <userspace_entry.halt>

000000000010901e <userspace_entry.halt>:
  10901e:	ff e3                	jmp    rbx

0000000000109020 <userspace_message>:
  109020:	0a 0a 47 6f 74 20 69 6e 74 6f 20 75 73 65 72 73     ..Got into users
  109030:	70 61 63 65 2c 20 61 6e 64 20 73 79 73 74 65 6d     pace, and system
  109040:	20 63 61 6c 6c 73 20 61 72 65 20 77 6f 72 6b 69      calls are worki
  109050:	6e 67 21 0a 0a 00                                   ng!...

Disassembly of section .text._ZN8terminal9vga_entryEhh:

0000000000109056 <terminal::vga_entry(unsigned char, unsigned char)>:
  109056:	55                   	push   rbp
  109057:	48 89 e5             	mov    rbp,rsp
  10905a:	48 83 ec 08          	sub    rsp,0x8
  10905e:	89 fa                	mov    edx,edi
  109060:	89 f0                	mov    eax,esi
  109062:	88 55 fc             	mov    BYTE PTR [rbp-0x4],dl
  109065:	88 45 f8             	mov    BYTE PTR [rbp-0x8],al
  109068:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
  10906c:	0f b6 45 f8          	movzx  eax,BYTE PTR [rbp-0x8]
  109070:	c1 e0 08             	shl    eax,0x8
  109073:	09 d0                	or     eax,edx
  109075:	c9                   	leave  
  109076:	c3                   	ret    
